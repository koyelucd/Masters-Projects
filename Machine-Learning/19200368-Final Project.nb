(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2689801,      52510]
NotebookOptionsPosition[   2651567,      51858]
NotebookOutlinePosition[   2652009,      51875]
CellTagsIndexPosition[   2651966,      51872]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Classification of Liver Disease in Indian patients\n",
 StyleBox["Author: Koyel Majumdar(19200368)\nDate: 3rd December, 2019\n\
Module: Mathematica for Research(ACM40730)-Project",
  FontSize->15]
}], "Title",
 CellChangeTimes->{{3.783330911478404*^9, 3.783330925505577*^9}, {
  3.7841268801064982`*^9, 3.7841268921616526`*^9}, {3.7843853865663276`*^9, 
  3.7843853951070623`*^9}, {3.784392689733158*^9, 3.7843927442238846`*^9}, {
  3.7844156122374697`*^9, 3.7844156189888334`*^9}, {3.7844157000425935`*^9, 
  3.784415706268498*^9}},ExpressionUUID->"1134b464-5fd7-4d88-93a1-\
1b28c2150197"],

Cell[CellGroupData[{

Cell["Introduction", "Chapter",
 CellFrame->{{0, 0}, {0, 2}},
 CellChangeTimes->{{3.7841267000935626`*^9, 
  3.78412670285643*^9}},ExpressionUUID->"811ac17f-90f4-46d2-89f9-\
591b73aeec41"],

Cell["\<\
Liver disease is any condition that affects the functioning of liver and \
causes its inflammation. It can be caused due to injury, exposure to toxic \
compounds or certain drugs, or due to genetic defects. Around 10 lakh \
patients are diagnosed every year in India with liver cirrhosis and is among \
the most common causes of death in India. Statistics show every one in five \
Indians maybe affected by liver disease.
A doctor may request a blood test for detecting liver disease. A liver panel \
test contains the below tests:
a) Alanine aminotransferase (ALT) \[Dash] an enzyme found mainly in the \
liver; best test to detect hepatitis
b) Alkaline phosphatase (ALP) \[Dash] an enzyme related to the bile ducts; \
often increased if ducts are blocked
c) Aspartate aminotransferase (AST) \[Dash] an enzyme found in the liver and \
a few other places, particularly the heart and other muscles
d) Total bilirubin \[Dash] measures the bilirubin in the blood; levels are \
increased with many liver diseases and other conditions, such as hemolysis, \
that lead to increased production of bilirubin
e) Direct bilirubin \[Dash] measures a form of bilirubin that is conjugated \
(combined with another compound) in the liver; only increased in liver disease
f) Albumin \[Dash] measures albumin, the main protein made by the liver, and \
tells how well the liver is making it
g) Total protein \[Dash] measures albumin and all other proteins in blood, \
including antibodies present to help fight off infections (antibodies are not \
made in the liver)\
\>", "Text",
 CellChangeTimes->{{3.7841270043073783`*^9, 3.784127034378398*^9}, {
  3.784127069243359*^9, 3.7841272965415897`*^9}, {3.7841273520725536`*^9, 
  3.784127436915573*^9}, {3.784127467637416*^9, 3.784127491299533*^9}, {
  3.7843026066241283`*^9, 3.78430260731161*^9}, {3.784302651384728*^9, 
  3.7843026575092993`*^9}, {3.7843027355086737`*^9, 
  3.7843027369929457`*^9}},ExpressionUUID->"8356d147-77c7-48f4-88bd-\
8c88b6a46f14"],

Cell[CellGroupData[{

Cell["About the dataset", "Subchapter",
 CellChangeTimes->{{3.7841279101853337`*^9, 3.784127924917294*^9}, {
  3.7841279577952766`*^9, 
  3.7841279613482704`*^9}},ExpressionUUID->"3b89fb54-b9dd-40b7-8ecb-\
8e3e6d42391b"],

Cell["\<\
A dataset has been collected from test samples in Andhra Pradesh, India. The \
dataset contains 416 liver patient records and 167 non liver patient records. \
There are 441 male patient and 142 female patient records. The dataset has \
been collected from UCI Machine Learning Repository. The liver dataset \
contains data of liver panel tests done on these patients and they have been \
categorized as suffering from liver disease or not. 
Attribute Information:
1) \[OpenCurlyQuote]Age\[CloseCurlyQuote] of the patient
2) \[OpenCurlyQuote]Gender\[CloseCurlyQuote] of the patient
3) \[OpenCurlyQuote]Total_Bilirubin\[CloseCurlyQuote] level
4) \[OpenCurlyQuote]Direct_Bilirubin\[CloseCurlyQuote] level
5) \[OpenCurlyQuote]Alkaline_Phosphatase\[CloseCurlyQuote] level - ALP test
6) \[OpenCurlyQuote]Alanine_Aminotransferase\[CloseCurlyQuote] level - ALT test
7) \[OpenCurlyQuote]Aspartate_Aminotransferase\[CloseCurlyQuote] level - SGOT \
test
8) \[OpenCurlyQuote]Total_Proteins\[CloseCurlyQuote] level
9) \[OpenCurlyQuote]Albumin\[CloseCurlyQuote] content
10) \[OpenCurlyQuote]Albumin_and_Globulin_Ratio\[CloseCurlyQuote] 
11) \[OpenCurlyQuote]Dataset\[CloseCurlyQuote] classifying a patient having \
liver disease as \[OpenCurlyQuote]1\[CloseCurlyQuote] and patients not having \
liver disease as \[OpenCurlyQuote]2\[CloseCurlyQuote]

Explanatory Data Analysis will be applied on this dataset to understand the \
data and the relation between each variable. The analysis will help to \
understand what are the identifiers of a person having a liver disease. The \
dataset will be then used to train and test the machine learning algorithms \
to classify patients into groups having liver disease and the model accuracy \
will be compared for the different models. \
\>", "Text",
 CellChangeTimes->{{3.784128104794934*^9, 3.78412820725541*^9}, {
  3.7841282446359267`*^9, 3.7841284886926055`*^9}, {3.784128523501264*^9, 
  3.7841285851133785`*^9}, {3.784128667641098*^9, 3.7841286823656816`*^9}, {
  3.784128786916478*^9, 3.7841288622537465`*^9}, {3.784128897740015*^9, 
  3.7841289091284814`*^9}, {3.784128965828869*^9, 3.7841289668062954`*^9}, {
  3.784129032921316*^9, 3.7841290755051827`*^9}, {3.7841291076607833`*^9, 
  3.784129180301416*^9}, {3.784388597486518*^9, 
  3.7843886034210205`*^9}},ExpressionUUID->"c75e66b2-1382-45fb-aa2c-\
165ecb0bec1d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Import", "Chapter",
 CellFrame->{{0, 0}, {0, 2}},
 CellChangeTimes->{{3.783330962995296*^9, 
  3.7833309658117266`*^9}},ExpressionUUID->"a5cbcd1c-7b1b-4c07-9f15-\
fb14aad6ea20"],

Cell["\<\
The dataset will be selected from a location in the local server and imported \
into Mathematica-\
\>", "Text",
 CellChangeTimes->{{3.7841291890968156`*^9, 3.784129240125382*^9}, 
   3.7843854495572596`*^9},ExpressionUUID->"ddc1294a-2bef-47b6-b059-\
37dc4260d942"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"filename", "=", 
   RowBox[{"SystemDialogInput", "[", "\"\<FileOpen\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"file", "=", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"filename", ",", "\"\<Dataset\>\"", ",", 
      RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "1"}]}], "]"}], "//", 
    RowBox[{"Map", "[", "Association", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"file", "[", 
   RowBox[{"1", ";;", "3"}], "]"}], "   ", 
  RowBox[{"(*", 
   RowBox[{
   "Displaying", " ", "the", " ", "first", " ", "3", " ", "rows", " ", "of", 
    " ", "data"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7833309709134083`*^9, 3.7833309881904116`*^9}, {
   3.7833311104143305`*^9, 3.783331112552709*^9}, {3.783331836639201*^9, 
   3.7833318517240586`*^9}, 3.783332102202567*^9, 3.784109839845129*^9, 
   3.7841266335689964`*^9, {3.7841292916559105`*^9, 3.784129347603072*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"103e2e9c-c88a-4979-84de-4c50ba8b9f26"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 3, "Length" -> 3, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Age", "Gender", "Total_Bilirubin", "Direct_Bilirubin", 
            "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
            "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
            "Albumin_and_Globulin_Ratio", "Dataset"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Female", "Male"]], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Age"} -> 1, {All, "Gender"} -> 
           1, {All, "Total_Bilirubin"} -> 1, {All, "Direct_Bilirubin"} -> 
           1, {All, "Alkaline_Phosphatase"} -> 
           1, {All, "Alanine_Aminotransferase"} -> 
           1, {All, "Aspartate_Aminotransferase"} -> 
           1, {All, "Total_Proteins"} -> 1, {All, "Albumin"} -> 
           1, {All, "Albumin_and_Globulin_Ratio"} -> 1, {All, "Dataset"} -> 
           1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Age" -> TypeSystem`PackageScope`AtomShape[34], "Gender" -> 
              TypeSystem`PackageScope`AtomShape[54.], "Total_Bilirubin" -> 
              TypeSystem`PackageScope`AtomShape[60], "Direct_Bilirubin" -> 
              TypeSystem`PackageScope`AtomShape[60], "Alkaline_Phosphatase" -> 
              TypeSystem`PackageScope`AtomShape[34], 
              "Alanine_Aminotransferase" -> 
              TypeSystem`PackageScope`AtomShape[34], 
              "Aspartate_Aminotransferase" -> 
              TypeSystem`PackageScope`AtomShape[34], "Total_Proteins" -> 
              TypeSystem`PackageScope`AtomShape[60], "Albumin" -> 
              TypeSystem`PackageScope`AtomShape[60], 
              "Albumin_and_Globulin_Ratio" -> 
              TypeSystem`PackageScope`AtomShape[60], "Dataset" -> 
              TypeSystem`PackageScope`AtomShape[34]]]], 3, {}]], 
        "InitialData" -> TypeSystem`PackageScope`CacheHandle[2123985173], 
        "Type" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "Age", "Gender", "Total_Bilirubin", "Direct_Bilirubin", 
            "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
            "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
            "Albumin_and_Globulin_Ratio", "Dataset"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[
             TypeSystem`Enumeration["Female", "Male"]], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[2123985173]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Age\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Age\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Age"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Age"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Gender\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Gender\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Gender"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Gender"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Total_Bilirubin\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Total_Bilirubin\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Total_Bilirubin"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Total_Bilirubin"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Direct_Bilirubin\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Direct_Bilirubin\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Direct_Bilirubin"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Direct_Bilirubin"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Alkaline_Phosphatase\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Alkaline_Phosphatase\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Alkaline_Phosphatase"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Alkaline_Phosphatase"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Alanine_Aminotransferase\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Alanine_Aminotransferase\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Alanine_Aminotransferase"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Alanine_Aminotransferase"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Aspartate_Aminotransferase\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Aspartate_Aminotransferase\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Aspartate_Aminotransferase"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Aspartate_Aminotransferase"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Total_Proteins\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Total_Proteins\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Total_Proteins"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Total_Proteins"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Albumin\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Albumin\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Albumin"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Albumin"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Albumin_and_Globulin_Ratio\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Albumin_and_Globulin_Ratio\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Albumin_and_Globulin_Ratio"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Albumin_and_Globulin_Ratio"]], 
                 "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Dataset\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Dataset\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][{
                    All, "Dataset"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[All, "Dataset"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes["65"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Age"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Female", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Gender"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Total_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Direct_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["187"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Alkaline_Phosphatase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["16"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Alanine_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["18"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Aspartate_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6.8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Total_Proteins"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Albumin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Albumin_and_Globulin_Ratio"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[1, 
                   Key["Dataset"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes["62"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Age"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Male", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Gender"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["10.9"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Total_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["5.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Direct_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["699"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Alkaline_Phosphatase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["64"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Alanine_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["100"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Aspartate_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7.5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Total_Proteins"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3.2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Albumin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.74"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Albumin_and_Globulin_Ratio"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[2, 
                   Key["Dataset"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes["62"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Age"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Male", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Gender"]]], "Mouse"], 
                ImageSize -> {{54., Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Total_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["4.1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Direct_Bilirubin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["490"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Alkaline_Phosphatase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["60"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Alanine_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["68"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Aspartate_Aminotransferase"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Total_Proteins"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3.3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Albumin"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["0.89"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Albumin_and_Globulin_Ratio"]]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
                  GeneralUtilities`Slice[3, 
                   Key["Dataset"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 496956021]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[496956021][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {1217., {55., 61.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{
  3.7841293041624794`*^9, 3.7841359180201445`*^9, 3.7841477993259706`*^9, {
   3.7842247746834936`*^9, 3.7842247885852413`*^9}, 3.784302823585597*^9, 
   3.784319340828853*^9, 3.7843854505224843`*^9, 3.7843910313632264`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"13498643-0177-4336-a5a2-92b168b7a536"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exploratory Data Analysis", "Chapter",
 CellFrame->{{0, 0}, {0, 2}},
 CellChangeTimes->{{3.7833321392301016`*^9, 
  3.7833321545622096`*^9}},ExpressionUUID->"fa940175-716a-412c-9184-\
cdb1bde96239"],

Cell[CellGroupData[{

Cell["Statistical Summary of each column:", "Subchapter",
 CellChangeTimes->{{3.783332162676182*^9, 3.7833321666671505`*^9}, {
  3.7833322039245405`*^9, 3.783332207227728*^9}, {3.784129454988879*^9, 
  3.7841294604727473`*^9}},ExpressionUUID->"c140a0d9-9246-4897-8a29-\
ae6fe17c7200"],

Cell["\<\
The 5-number summary(minimum,lower quantile, median, upper quantile and \
maximum) along with mean and standard deviation of each predictor variable \
will calculated. This will help to describe the spread of the data and \
determine whether or not any data points are outliers. A function has been \
written to calculate the statistical summary of each numeric variable. A \
boxplot is plotted to get a visual representation of the statistical summary.\
\>", "Text",
 CellChangeTimes->{{3.784129476102818*^9, 3.784129521124261*^9}, {
  3.784129556103213*^9, 3.784129712384276*^9}, {3.78413700611788*^9, 
  3.784137040975645*^9}},ExpressionUUID->"2c1e59ab-e90a-4795-8c79-\
0f7fa03222a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"statisticalSummary", "[", "x_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Clear", "[", 
      RowBox[{
      "mean", ",", "sd", ",", "min", ",", "max", ",", "median", ",", 
       "quantile25", ",", "quantile75"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"mean", "=", 
      RowBox[{"N", "[", 
       RowBox[{"Mean", "[", 
        RowBox[{"file", "[", 
         RowBox[{"All", ",", "x"}], "]"}], "]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"sd", "=", 
      RowBox[{"N", "[", 
       RowBox[{"StandardDeviation", "[", 
        RowBox[{"file", "[", 
         RowBox[{"All", ",", "x"}], "]"}], "]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"min", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"file", "[", 
        RowBox[{"All", ",", "x"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"max", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"file", "[", 
        RowBox[{"All", ",", "x"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"median", "=", 
      RowBox[{"Median", "[", 
       RowBox[{"file", "[", 
        RowBox[{"All", ",", "x"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"quantile25", "=", 
      RowBox[{"Quantile", "[", 
       RowBox[{
        RowBox[{"file", "[", 
         RowBox[{"All", ",", "x"}], "]"}], ",", 
        RowBox[{"1", "/", "4"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"quantile75", "=", 
      RowBox[{"Quantile", "[", 
       RowBox[{
        RowBox[{"file", "[", 
         RowBox[{"All", ",", "x"}], "]"}], ",", 
        RowBox[{"3", "/", "4"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
      "\"\<Mean=\>\"", ",", "mean", ",", "\"\<\\n\>\"", " ", ",", 
       "\"\<Standard Deviation=\>\"", ",", "sd", ",", "\"\<\\n\>\"", ",", 
       "\"\<Minimum=\>\"", ",", "min", ",", "\[IndentingNewLine]", 
       "\"\<\\n\>\"", ",", "\"\<Maximum=\>\"", ",", "max", ",", "\"\<\\n\>\"",
        ",", "\"\<Median=\>\"", ",", "median", ",", "\"\<\\n\>\"", ",", 
       "\"\<1st Quantile=\>\"", ",", "quantile25", ",", "\"\<\\n\>\"", ",", 
       "\"\<3rd Quantile=\>\"", ",", "quantile75"}], "]"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.783335471760824*^9, 3.7833355438704405`*^9}, 
   3.783335720050167*^9, 3.784129715085694*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"1d2e0337-ec25-4c24-9510-3234781b41da"],

Cell[CellGroupData[{

Cell["Age-", "Subsubsection",
 CellChangeTimes->{{3.7833321966351347`*^9, 
  3.7833322138260374`*^9}},ExpressionUUID->"d41bba06-aa93-4a22-871c-\
1dcb3751db11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Age\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.783332217801035*^9, 3.783332252338475*^9}, {
   3.7833323054797273`*^9, 3.7833323203399725`*^9}, {3.783333194462232*^9, 
   3.7833332004447355`*^9}, {3.7833334007743793`*^9, 3.783333409596137*^9}, {
   3.7833335164331384`*^9, 3.7833336702130284`*^9}, {3.7833338027269*^9, 
   3.7833338639834266`*^9}, {3.7833354855938573`*^9, 3.783335490344138*^9}, 
   3.7841364855581408`*^9, 3.784136556700647*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"a47297f3-b214-4ada-9191-60eb52531433"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "44.74614065180103`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "16.18983330469438`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "90", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "45", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "33", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "58"}],
  SequenceForm[
  "Mean=", 44.74614065180103, "\n", "Standard Deviation=", 16.18983330469438, 
   "\n", "Minimum=", 4, "\n", "Maximum=", 90, "\n", "Median=", 45, "\n", 
   "1st Quantile=", 33, "\n", "3rd Quantile=", 58],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.783332710294155*^9, {3.783333249415973*^9, 3.783333261168982*^9}, {
   3.7833333259998164`*^9, 3.7833334031337843`*^9}, 3.7833335611898403`*^9, 
   3.7833336647104206`*^9, {3.7833354908948154`*^9, 3.783335547986061*^9}, 
   3.783531113131794*^9, 3.784109894148568*^9, {3.7841296945914707`*^9, 
   3.784129722017954*^9}, {3.7841364860788326`*^9, 3.78413650950631*^9}, 
   3.784136564651409*^9, 3.7843892488861504`*^9},
 CellLabel->
  "During evaluation of \
In[26]:=",ExpressionUUID->"bed8a748-c31e-4caf-a1db-9e3a42185645"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BoxWhiskerChart", "[", 
  RowBox[{"file", "[", 
   RowBox[{"All", ",", "\"\<Age\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7841370485647154`*^9, 3.7841370613763666`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"30f388e8-07fc-46cb-b92c-a8365a6403f5"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.5, -0.2999999999999998}, {1.8921138686126808`, 94.3}}]}, 
   {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], 
      TagBox[
       TooltipBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          GraphicsGroupBox[{Antialiasing -> False, 
            
            PolygonBox[{{0.5, 58}, {0.8921138686126808, 58}, {
              0.8921138686126808, 33}, {0.5, 33}}], {}, {{}, {}}, {}, {
             GrayLevel[0], 
             GrayLevel[1], 
             LineBox[{{0.8921138686126808, 45}, {0.5, 45}}]}, {}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.6960569343063404, 33}, {0.6960569343063404, 4}}, {{
                0.6960569343063404, 58}, {0.6960569343063404, 90}}}]}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.7940854014595107, 4}, {0.5980284671531702, 4}}, {{
                0.7940854014595107, 90}, {0.5980284671531702, 90}}}]}, {}}]},
         ImageSizeCache->{{159.5857864376269, 
          213.4142135623731}, {-91.4142135623731, 85.4142135623731}}],
        StyleBox[
         TagBox[
          GridBox[{{
             StyleBox["\"max\"", Bold, StripOnInput -> False], "90"}, {
             StyleBox["\"75%\"", Bold, StripOnInput -> False], "58"}, {
             StyleBox["\"median\"", Bold, StripOnInput -> False], "45"}, {
             StyleBox["\"25%\"", Bold, StripOnInput -> False], "33"}, {
             StyleBox["\"min\"", Bold, StripOnInput -> False], "4"}}, 
           GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
           AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}, "Rows" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}}, 
           GridBoxFrame -> {
            "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, BaseStyle -> 
           Directive[
             AbsoluteThickness[1], 
             Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            Style["max", Bold], 90}, {
            Style["75%", Bold], 58}, {
            Style["median", Bold], 45}, {
            Style["25%", Bold], 33}, {
            Style["min", Bold], 4}}, Dividers -> {{
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}, {
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, Frame -> 
          GrayLevel[0], BaseStyle -> Directive[
            AbsoluteThickness[1], 
            Dashing[{}]]], {}], 
        "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.48039430656936594`, -0.2999999999999998},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
      0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0.6960569343063404, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
     0.8921138686126808, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
    Automatic}]], "Output",
 CellChangeTimes->{3.784137061798091*^9, 3.784389251673448*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"22172044-913d-46b8-be56-cee9c5ea83eb"]
}, Open  ]],

Cell["\<\
The summary shows that the data has been collected for age range from 4 to \
90. The mean and median is almost equal which indicates that the distribution \
is normal. 25% of data has been collected between age range of 4-33 and 75% \
of data between 4-58.  No outlier is observed in the boxplot and the median \
is lying between the 1st and 3rd quantile which reconfirms the normal \
distribution of the data.\
\>", "Text",
 CellChangeTimes->{{3.784129772880632*^9, 3.7841298748692007`*^9}, {
  3.7841370722990756`*^9, 
  3.784137123722044*^9}},ExpressionUUID->"af32f34d-4e57-4b3d-88f8-\
f7b1dbfd52f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Total Bilirubin-", "Subsubsection",
 CellChangeTimes->{{3.783333685781101*^9, 
  3.7833337105928297`*^9}},ExpressionUUID->"2e093b9b-a8c6-41b6-b104-\
a39a2f68c957"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Total_Bilirubin\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7833337136840487`*^9, 3.7833337350386515`*^9}, {
   3.78333386753053*^9, 3.7833339409830694`*^9}, 3.783335527575779*^9, 
   3.7841364905123215`*^9, 3.784136559803216*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"36cb3839-4bae-4ff4-a2a8-fb4feb9af565"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "3.298799313893653`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "6.20952172618015`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "0.4`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "75", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "0.8`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "2.6`"}],
  SequenceForm[
  "Mean=", 3.298799313893653, "\n", "Standard Deviation=", 6.20952172618015, 
   "\n", "Minimum=", 0.4, "\n", "Maximum=", 75, "\n", "Median=", 1, "\n", 
   "1st Quantile=", 0.8, "\n", "3rd Quantile=", 2.6],
  Editable->False]], "Print",
 CellChangeTimes->{3.7833339419308233`*^9, 3.783335551036315*^9, 
  3.7835311176631746`*^9, 3.7841099026646276`*^9, 3.7841298951095753`*^9, 
  3.784136490984022*^9, 3.78413656699054*^9, 3.784389258523737*^9},
 CellLabel->
  "During evaluation of \
In[28]:=",ExpressionUUID->"18a89200-099e-481f-9919-e0bfc2344809"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "1"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Total_Bilirubin\>\""}], "]"}], "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Total Bilirubin Distribution for Liver disease patients\>\""}], 
      ",", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "2"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Total_Bilirubin\>\""}], "]"}], "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Total Bilirubin Distribution for non-Liver disease \
patients\>\""}]}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7841371275428524`*^9, 3.7841371454675913`*^9}, {
  3.784385571291171*^9, 3.784385606934473*^9}, {3.7843857904105144`*^9, 
  3.784385890820999*^9}, {3.7843859384338627`*^9, 3.7843860028675985`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"115a1f33-dcd4-4cc2-af9e-b97ab9a36a3b"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], PointBox[{{-0.5, -3.33}, {1.8921138686126808`, 78.73}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                
                PolygonBox[{{0.5, 3.6500000000000004`}, {0.8921138686126808, 
                 3.6500000000000004`}, {0.8921138686126808, 0.8}, {0.5, 
                 0.8}}], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 1.4}, {0.5, 1.4}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.6960569343063404, 0.8}, {0.6960569343063404, 
                   0.4}}, {{0.6960569343063404, 3.6500000000000004`}, {
                    0.6960569343063404, 75}}}]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 0.4}, {0.5980284671531702, 
                   0.4}}, {{0.7940854014595107, 75}, {
                    0.5980284671531702, 75}}}]}, {}}]},
             
             ImageSizeCache->{{161.5857864376269, 
              212.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "75"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], 
                 "3.6500000000000004`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "1.4`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "0.8`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "0.4`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 75}, {
                Style["75%", Bold], 3.6500000000000004`}, {
                Style["median", Bold], 1.4}, {
                Style["25%", Bold], 0.8}, {
                Style["min", Bold], 0.4}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -3.33},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
       "\"Total Bilirubin Distribution for Liver disease patients\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {192., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.5, 0.15999999999999998`}, {1.8921138686126808`, 
         7.64}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                
                PolygonBox[{{0.5, 1.1}, {0.8921138686126808, 1.1}, {
                 0.8921138686126808, 0.7}, {0.5, 0.7}}], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 0.8}, {0.5, 0.8}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.6960569343063404, 0.7}, {0.6960569343063404, 
                  0.5}}, {{0.6960569343063404, 1.1}, {0.6960569343063404, 
                  7.3}}}]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 0.5}, {0.5980284671531702, 
                  0.5}}, {{0.7940854014595107, 7.3}, {0.5980284671531702, 
                  7.3}}}]}, {}}]},
             
             ImageSizeCache->{{158.5857864376269, 
              209.4142135623731}, {-186.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "7.3`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "1.1`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "0.8`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "0.7`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "0.5`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 7.3}, {
                Style["75%", Bold], 1.1}, {
                Style["median", Bold], 0.8}, {
                Style["25%", Bold], 0.7}, {
                Style["min", Bold], 0.5}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, 0.15999999999999998`},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Total Bilirubin Distribution for non-Liver disease patients\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {576., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}]}, {}},
  ContentSelectable->True,
  ImageSize->{780., 245.61684774746024`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.7843858303866043`*^9, 3.7843858491921873`*^9}, 
   3.784385891576534*^9, {3.7843859810701447`*^9, 3.784386003685613*^9}, 
   3.7843892622187896`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"dab2ce31-debb-46be-9dfd-aec0846ef7fa"]
}, Open  ]],

Cell["\<\
The data collected ranges from 0.4 to 75. Around 25% of people  have total \
bilirubin level below 0.8 and 50% people have bilirubin level below 2.6. The \
median is less than the mean which indicates that the distribution is \
positively skewed. 25% of people are noted to be having total bilirubin level \
of 2.6-75. The boxplot shows the range is from 0.5-7.3 for patients not \
having liver disease but the data is varying largely from 0.4 to 75 for \
patients marked as Liver patients with 25% of the patients having value from \
3.7-75. This shows that liver disease cannot be detected only based on this \
variable.\
\>", "Text",
 CellChangeTimes->{{3.784134078038642*^9, 3.7841340843980193`*^9}, {
   3.7841342627460747`*^9, 3.784134307756078*^9}, 3.784135186278824*^9, {
   3.7841352250754395`*^9, 3.784135232819764*^9}, {3.7841353242614603`*^9, 
   3.784135469210162*^9}, {3.784137159454567*^9, 3.784137170571834*^9}, {
   3.784385477692627*^9, 3.7843854778775673`*^9}, {3.784385745589805*^9, 
   3.78438575406905*^9}, {3.7843860185838933`*^9, 3.7843861655194373`*^9}, {
   3.784388738938645*^9, 3.7843887845071487`*^9}, {3.7843923896621523`*^9, 
   3.784392395948573*^9}},ExpressionUUID->"e9d55fc4-31b7-4ab3-98e9-\
510564d26dd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Direct Bilirubin-", "Subsubsection",
 CellChangeTimes->{{3.7833345568721256`*^9, 
  3.783334560884759*^9}},ExpressionUUID->"b6b60ec4-b267-4a65-8f5d-\
6d99057e96ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Direct_Bilirubin\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.783334564132766*^9, {3.7833346150537987`*^9, 3.783334648207791*^9}, {
   3.7833355636850553`*^9, 3.783335568529307*^9}, 3.784136495430476*^9, 
   3.7841365728228593`*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"31ad2488-ea26-4961-a68d-d08d2def06e7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "1.486106346483705`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "2.808497617658964`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "0.1`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "19.7`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "0.3`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "0.2`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "1.3`"}],
  SequenceForm[
  "Mean=", 1.486106346483705, "\n", "Standard Deviation=", 2.808497617658964, 
   "\n", "Minimum=", 0.1, "\n", "Maximum=", 19.7, "\n", "Median=", 0.3, "\n", 
   "1st Quantile=", 0.2, "\n", "3rd Quantile=", 1.3],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7833345668432074`*^9, 3.783334649778861*^9, 3.7833355690519743`*^9, 
   3.783531122472416*^9, 3.784109915517888*^9, 3.7841354865296893`*^9, 
   3.784136495992147*^9, {3.784136571196309*^9, 3.7841365733506503`*^9}},
 CellLabel->
  "During evaluation of \
In[18]:=",ExpressionUUID->"0f2f5f17-55ad-442b-8caf-8bc215031c07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "1"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Direct_Bilirubin\>\""}], "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Direct Bilirubin Distribution for Liver disease patients\>\""}], 
      ",", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "2"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Direct_Bilirubin\>\""}], "]"}], "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Direct Bilirubin Distribution for non-Liver disease \
patients\>\""}]}], "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7841371880128284`*^9, 3.7841371901136465`*^9}, {
  3.784386186852706*^9, 3.7843862092753944`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"50e67bae-23e1-4f99-a22f-133eb16810a5"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], PointBox[{{-0.5, -0.88}, {1.8921138686126808`, 20.68}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                
                PolygonBox[{{0.5, 1.8}, {0.8921138686126808, 1.8}, {
                 0.8921138686126808, 0.2}, {0.5, 0.2}}], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 0.5}, {0.5, 0.5}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.6960569343063404, 0.2}, {0.6960569343063404, 
                  0.1}}, {{0.6960569343063404, 1.8}, {0.6960569343063404, 
                  19.7}}}]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 0.1}, {0.5980284671531702, 
                  0.1}}, {{0.7940854014595107, 19.7}, {0.5980284671531702, 
                  19.7}}}]}, {}}]},
             
             ImageSizeCache->{{161.5857864376269, 
              212.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "19.7`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "1.8`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "0.5`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "0.2`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "0.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 19.7}, {
                Style["75%", Bold], 1.8}, {
                Style["median", Bold], 0.5}, {
                Style["25%", Bold], 0.2}, {
                Style["min", Bold], 0.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -0.88},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
       "\"Direct Bilirubin Distribution for Liver disease patients\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {192., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.5, -0.07500000000000001}, {1.8921138686126808`, 
         3.775}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                
                PolygonBox[{{0.5, 0.375}, {0.8921138686126808, 0.375}, {
                 0.8921138686126808, 0.2}, {0.5, 0.2}}], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 0.2}, {0.5, 0.2}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.6960569343063404, 0.2}, {0.6960569343063404, 
                  0.1}}, {{0.6960569343063404, 0.375}, {0.6960569343063404, 
                  3.6}}}]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 0.1}, {0.5980284671531702, 
                  0.1}}, {{0.7940854014595107, 3.6}, {0.5980284671531702, 
                  3.6}}}]}, {}}]},
             
             ImageSizeCache->{{158.5857864376269, 
              209.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "3.6`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "0.375`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "0.2`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "0.2`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "0.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 3.6}, {
                Style["75%", Bold], 0.375}, {
                Style["median", Bold], 0.2}, {
                Style["25%", Bold], 0.2}, {
                Style["min", Bold], 0.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -0.07500000000000001},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Direct Bilirubin Distribution for non-Liver disease patients\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {576., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}]}, {}},
  ContentSelectable->True,
  ImageSize->{780., 245.61684774746024`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.7841371906413307`*^9, 3.7843862114443226`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"ab914df3-d475-4acc-8885-23473e417a7b"]
}, Open  ]],

Cell["\<\
The data ranges from 0.1-19.7. The mean is greater than median which \
indicates the  distribution is positively skewed with 25% of people having \
level between 1.3-19.7. The range of data is from 0.1-3.6 for non-liver \
patients but the values vary from 0.1-19.7 for liver patients with 75% of \
patients having levels below 1.8. So a patient cannot be identified as having \
liver disease based on only this variable. \
\>", "Text",
 CellChangeTimes->{{3.784135503004897*^9, 3.7841355827930007`*^9}, {
   3.784137195245678*^9, 3.784137214454658*^9}, 3.7843028993538165`*^9, {
   3.784386221875986*^9, 3.784386258289169*^9}, {3.784388798107718*^9, 
   3.784388880358941*^9}},ExpressionUUID->"cb47702a-99c4-4e70-8031-\
1f3d041547f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alkaline Phosphatase-", "Subsubsection",
 CellChangeTimes->{{3.7833345828765893`*^9, 
  3.783334608159755*^9}},ExpressionUUID->"01fd4b59-109d-4e2d-b1b5-\
6c93efdd3ab4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Alkaline_Phosphatase\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7833345969485984`*^9, {3.7833346553746557`*^9, 3.7833346934208527`*^9}, {
   3.7833355746467714`*^9, 3.7833355858243837`*^9}, {3.784127746381875*^9, 
   3.78412774692871*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"4465c666-9cf8-4f0d-a92a-45cc04f8502d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "290.57632933104634`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "242.93798917934396`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "63", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "2110", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "208", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "175", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "298"}],
  SequenceForm[
  "Mean=", 290.57632933104634`, "\n", "Standard Deviation=", 
   242.93798917934396`, "\n", "Minimum=", 63, "\n", "Maximum=", 2110, "\n", 
   "Median=", 208, "\n", "1st Quantile=", 175, "\n", "3rd Quantile=", 298],
  Editable->False]], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7833346957724695`*^9, 3.783335586301078*^9, 3.7835311260783463`*^9, 
   3.78413558655481*^9, 3.784136578204866*^9, {3.7841366313010483`*^9, 
   3.784136652864683*^9}, 3.7843892691770334`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"7aecafb5-fe91-4a51-bebf-d667596bc2db"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "290.57632933104634`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "242.93798917934396`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "63", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "2110", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "208", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "175", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "298"}],
  SequenceForm[
  "Mean=", 290.57632933104634`, "\n", "Standard Deviation=", 
   242.93798917934396`, "\n", "Minimum=", 63, "\n", "Maximum=", 2110, "\n", 
   "Median=", 208, "\n", "1st Quantile=", 175, "\n", "3rd Quantile=", 298],
  Editable->False]], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7833346957724695`*^9, 3.783335586301078*^9, 3.7835311260783463`*^9, 
   3.78413558655481*^9, 3.784136578204866*^9, {3.7841366313010483`*^9, 
   3.784136652864683*^9}},ExpressionUUID->"1f0bd931-cc14-434c-a7e6-\
94973f4ade44"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BoxWhiskerChart", "[", 
  RowBox[{"file", "[", 
   RowBox[{"All", ",", "\"\<Alkaline_Phosphatase\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7841372401005917`*^9, 3.784137248248918*^9}, {
  3.784386277649026*^9, 3.784386321498907*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"48526865-53f1-4c44-b4df-1e05e06299db"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.5, -39.35000000000001}, {1.8921138686126808`, 2212.35}}]}, 
   {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], 
      TagBox[
       TooltipBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          GraphicsGroupBox[{Antialiasing -> False, 
            PolygonBox[
             
             NCache[{{0.5, 298}, {0.8921138686126808, 298}, {
               0.8921138686126808, 
                Rational[701, 4]}, {0.5, 
                Rational[701, 4]}}, {{0.5, 298}, {0.8921138686126808, 298}, {
               0.8921138686126808, 175.25}, {0.5, 
               175.25}}]], {}, {{}, {}}, {}, {
             GrayLevel[0], 
             GrayLevel[1], 
             LineBox[{{0.8921138686126808, 208}, {0.5, 208}}]}, {}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             LineBox[
              NCache[{{{0.6960569343063404, 
                  Rational[701, 4]}, {0.6960569343063404, 63}}, {{
                 0.6960569343063404, 298}, {0.6960569343063404, 2110}}}, {{{
                 0.6960569343063404, 175.25}, {0.6960569343063404, 63}}, {{
                 0.6960569343063404, 298}, {0.6960569343063404, 2110}}}]]}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.7940854014595107, 63}, {0.5980284671531702, 63}}, {{
                0.7940854014595107, 2110}, {
                0.5980284671531702, 2110}}}]}, {}}]},
         ImageSizeCache->{{166.5857864376269, 
          218.4142135623731}, {-88.4142135623731, 82.4142135623731}}],
        StyleBox[
         TagBox[
          GridBox[{{
             StyleBox["\"max\"", Bold, StripOnInput -> False], "2110"}, {
             StyleBox["\"75%\"", Bold, StripOnInput -> False], "298"}, {
             StyleBox["\"median\"", Bold, StripOnInput -> False], "208"}, {
             StyleBox["\"25%\"", Bold, StripOnInput -> False], 
             FractionBox["701", "4"]}, {
             StyleBox["\"min\"", Bold, StripOnInput -> False], "63"}}, 
           GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
           AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}, "Rows" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}}, 
           GridBoxFrame -> {
            "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, BaseStyle -> 
           Directive[
             AbsoluteThickness[1], 
             Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            Style["max", Bold], 2110}, {
            Style["75%", Bold], 298}, {
            Style["median", Bold], 208}, {
            Style["25%", Bold], 
            Rational[701, 4]}, {
            Style["min", Bold], 63}}, Dividers -> {{
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}, {
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, Frame -> 
          GrayLevel[0], BaseStyle -> Directive[
            AbsoluteThickness[1], 
            Dashing[{}]]], {}], 
        "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.48039430656936594`, -39.35000000000001},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
      0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0.6960569343063404, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
     0.8921138686126808, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
    Automatic}]], "Output",
 CellChangeTimes->{3.7841372487576456`*^9, 3.7843864213716245`*^9, 
  3.7843892802182646`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"1dff94df-631d-490c-9abf-4bafda3bf479"]
}, Open  ]],

Cell["\<\
The data ranges from 63-2110. The mean is greater than median which indicates \
the  distribution is positively skewed with 25% of people having level \
between 298-2110. Around 25% of patients are seem to be having very high \
levels of alkaline phosphatase as indicated in the boxplot.\
\>", "Text",
 CellChangeTimes->{{3.7841359471719365`*^9, 3.7841359612074323`*^9}, {
  3.784136132844652*^9, 3.784136139897603*^9}, {3.784137252640417*^9, 
  3.784137263960906*^9}, {3.7843863410812793`*^9, 3.784386363683307*^9}, {
  3.7843864292869415`*^9, 3.784386441794428*^9}, {3.784388912670813*^9, 
  3.78438893322162*^9}},ExpressionUUID->"29902a4a-0246-4306-8aac-\
d37b53b7887e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alanine_Aminotransferase", "Subsubsection",
 CellChangeTimes->{{3.7841275569018183`*^9, 
  3.784127573346548*^9}},ExpressionUUID->"70841201-1ab5-4acf-9945-\
f02b6e7b0951"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "statisticalSummary", "[", "\"\<Alanine_Aminotransferase\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7841275860902047`*^9, 3.7841276031184664`*^9}, {
  3.7841359352177877`*^9, 3.784135939008617*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"1e60c73d-cbee-4ff0-a035-9bb77e69959d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "80.71355060034305`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "182.62035603420244`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "10", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "2000", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "35", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "23", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "61"}],
  SequenceForm[
  "Mean=", 80.71355060034305, "\n", "Standard Deviation=", 
   182.62035603420244`, "\n", "Minimum=", 10, "\n", "Maximum=", 2000, "\n", 
   "Median=", 35, "\n", "1st Quantile=", 23, "\n", "3rd Quantile=", 61],
  Editable->False]], "Print",
 CellChangeTimes->{3.784135939938099*^9, 3.7841365851238966`*^9, 
  3.784389284073291*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"d47b61b6-a5a1-4109-8bdf-fb9cf2bcd96e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "1"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Alanine_Aminotransferase\>\""}], "]"}], 
       "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Distribution for Liver disease patients\>\""}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "2"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Alanine_Aminotransferase\>\""}], "]"}], 
       "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Distribution for non-Liver disease patients\>\""}]}], "]"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.784137269671636*^9, 3.784137277664073*^9}, {
  3.7843864505057*^9, 3.784386474849061*^9}, {3.784386555091115*^9, 
  3.784386570368327*^9}, {3.784386779025446*^9, 3.784386783717821*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"9caf86a6-1a94-45fa-bdc4-ad21eedc6008"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], PointBox[{{-0.5, -87.4}, {1.8921138686126808`, 2099.4}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                
                PolygonBox[{{0.5, 77}, {0.8921138686126808, 77}, {
                  0.8921138686126808, 25}, {0.5, 25}}], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 41}, {0.5, 41}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.6960569343063404, 25}, {
                    0.6960569343063404, 12}}, {{0.6960569343063404, 77}, {
                    0.6960569343063404, 2000}}}]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 12}, {
                    0.5980284671531702, 12}}, {{0.7940854014595107, 2000}, {
                    0.5980284671531702, 2000}}}]}, {}}]},
             
             ImageSizeCache->{{167.5857864376269, 
              218.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "2000"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "77"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], "41"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "25"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "12"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 2000}, {
                Style["75%", Bold], 77}, {
                Style["median", Bold], 41}, {
                Style["25%", Bold], 25}, {
                Style["min", Bold], 12}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -87.4},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
       "\"Distribution for Liver disease patients\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {192., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.5, 1.4499999999999993`}, {1.8921138686126808`, 
         189.55}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                PolygonBox[
                 NCache[{{0.5, 
                    Rational[151, 4]}, {0.8921138686126808, 
                    Rational[151, 4]}, {0.8921138686126808, 20}, {
                   0.5, 20}}, {{0.5, 37.75}, {0.8921138686126808, 37.75}, {
                   0.8921138686126808, 20}, {0.5, 20}}]], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 27}, {0.5, 27}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 LineBox[
                  
                  NCache[{{{0.6960569343063404, 20}, {
                    0.6960569343063404, 10}}, {{0.6960569343063404, 
                    Rational[151, 4]}, {0.6960569343063404, 181}}}, {{{
                    0.6960569343063404, 20}, {0.6960569343063404, 10}}, {{
                    0.6960569343063404, 37.75}, {
                    0.6960569343063404, 181}}}]]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 10}, {
                    0.5980284671531702, 10}}, {{0.7940854014595107, 181}, {
                    0.5980284671531702, 181}}}]}, {}}]},
             
             ImageSizeCache->{{164.5857864376269, 
              215.4142135623731}, {-185.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "181"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], 
                 FractionBox["151", "4"]}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], "27"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "20"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "10"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 181}, {
                Style["75%", Bold], 
                Rational[151, 4]}, {
                Style["median", Bold], 27}, {
                Style["25%", Bold], 20}, {
                Style["min", Bold], 10}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, 1.4499999999999993`},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Distribution for non-Liver disease patients\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {576., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}]}, {}},
  ContentSelectable->True,
  ImageSize->{780., 245.61684774746024`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.784137278355644*^9, 3.7843864758833785`*^9, {3.7843865626138787`*^9, 
   3.784386571904053*^9}, 3.7843867846425877`*^9, 3.7843892883082223`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"78ea49d3-73ac-42d7-88f4-6bc5530535be"]
}, Open  ]],

Cell["\<\
The data ranges from 10-2000. The mean is greater than median which indicates \
the  distribution is positively skewed with 25% of people having level \
between 61-2000. Again a few cases of very high levels of alanine \
aminotransferase are indicated. Around 25% of people are observed to be \
having Alanine aminotransferase level below 23. The non-liver patients seem \
to be within the range of 10-181 and 25% of patients are having relatively \
higher values. The liver patients seem to be having very high levels of \
alanine aminotransferase.\
\>", "Text",
 CellChangeTimes->{{3.784136006138605*^9, 3.7841360837646804`*^9}, {
  3.7841361451050262`*^9, 3.784136165071599*^9}, {3.784137298673094*^9, 
  3.7841373015284815`*^9}, {3.784386665485445*^9, 3.7843867568192987`*^9}, {
  3.78438896440176*^9, 
  3.7843890334283457`*^9}},ExpressionUUID->"8fc65303-6c49-45f7-be77-\
62a306f3a696"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Aspartate_Aminotransferase", "Subsubsection",
 CellChangeTimes->{3.7833356351252527`*^9, 
  3.783335762438449*^9},ExpressionUUID->"9cad3542-2868-49c6-929c-\
5b002b9fba92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "statisticalSummary", "[", "\"\<Aspartate_Aminotransferase\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7833356390619698`*^9, 3.7833356456701703`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"d573f906-b451-4ad5-9bfa-7833c990e094"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "109.91080617495712`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "288.918529051734`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "10", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "4929", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "42", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "25", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "87"}],
  SequenceForm[
  "Mean=", 109.91080617495712`, "\n", "Standard Deviation=", 288.918529051734,
    "\n", "Minimum=", 10, "\n", "Maximum=", 4929, "\n", "Median=", 42, "\n", 
   "1st Quantile=", 25, "\n", "3rd Quantile=", 87],
  Editable->False]], "Print",
 CellChangeTimes->{3.7833356461868744`*^9, 3.7835311299551225`*^9, 
  3.7841360886868277`*^9, 3.7841366032984695`*^9, 3.784389294188682*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"2a587593-ff33-48c9-9829-288d80b2e697"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "1"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Aspartate_Aminotransferase\>\""}], "]"}], 
       "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Distribution for Liver disease patients\>\""}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"file", ",", 
         RowBox[{
          RowBox[{"#Dataset", "\[Equal]", "2"}], " ", "&"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Aspartate_Aminotransferase\>\""}], "]"}], 
       "]"}], ",", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Distribution for non-Liver disease patients\>\""}]}], "]"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.784137317650505*^9, 3.784137326745063*^9}, {
  3.784386494724679*^9, 3.7843865193139343`*^9}, {3.7843867914941297`*^9, 
  3.7843867960394497`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"8cf296d2-07ec-4c15-8cd3-bab3dbdf1df9"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.5, -234.9}, {1.8921138686126808`, 5174.9}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                PolygonBox[
                 NCache[{{0.5, 
                    Rational[219, 2]}, {0.8921138686126808, 
                    Rational[219, 2]}, {0.8921138686126808, 
                    Rational[59, 2]}, {0.5, 
                    Rational[59, 2]}}, {{0.5, 109.5}, {0.8921138686126808, 
                  109.5}, {0.8921138686126808, 29.5}, {0.5, 
                  29.5}}]], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[
                  NCache[{{0.8921138686126808, 
                    Rational[105, 2]}, {0.5, 
                    Rational[105, 2]}}, {{0.8921138686126808, 52.5}, {0.5, 
                   52.5}}]]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 LineBox[
                  NCache[{{{0.6960569343063404, 
                    Rational[59, 2]}, {0.6960569343063404, 11}}, {{
                    0.6960569343063404, 
                    Rational[219, 2]}, {0.6960569343063404, 4929}}}, {{{
                    0.6960569343063404, 29.5}, {0.6960569343063404, 11}}, {{
                    0.6960569343063404, 109.5}, {
                    0.6960569343063404, 4929}}}]]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 11}, {
                    0.5980284671531702, 11}}, {{0.7940854014595107, 4929}, {
                    0.5980284671531702, 4929}}}]}, {}}]},
             
             ImageSizeCache->{{167.5857864376269, 
              218.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "4929"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], 
                 FractionBox["219", "2"]}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 FractionBox["105", "2"]}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], 
                 FractionBox["59", "2"]}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "11"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 4929}, {
                Style["75%", Bold], 
                Rational[219, 2]}, {
                Style["median", Bold], 
                Rational[105, 2]}, {
                Style["25%", Bold], 
                Rational[59, 2]}, {
                Style["min", Bold], 11}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -234.9},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
       "\"Distribution for Liver disease patients\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {192., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
     GraphicsBox[{
       {Opacity[0], PointBox[{{-0.5, -3.75}, {1.8921138686126808`, 298.75}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            DynamicBox[{
              FEPrivate`If[
               CurrentValue["MouseOver"], 
               EdgeForm[{
                 GrayLevel[0.5], 
                 AbsoluteThickness[1.5], 
                 Opacity[0.66]}], {}, {}], 
              GraphicsGroupBox[{Antialiasing -> False, 
                PolygonBox[
                 NCache[{{0.5, 
                    Rational[175, 4]}, {0.8921138686126808, 
                    Rational[175, 4]}, {0.8921138686126808, 21}, {
                   0.5, 21}}, {{0.5, 43.75}, {0.8921138686126808, 43.75}, {
                   0.8921138686126808, 21}, {0.5, 21}}]], {}, {{}, {}}, {}, {
                 GrayLevel[0], 
                 GrayLevel[1], 
                 LineBox[{{0.8921138686126808, 29}, {0.5, 29}}]}, {}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 LineBox[
                  NCache[{{{0.6960569343063404, 21}, {
                    0.6960569343063404, 10}}, {{0.6960569343063404, 
                    Rational[175, 4]}, {0.6960569343063404, 285}}}, {{{
                    0.6960569343063404, 21}, {0.6960569343063404, 10}}, {{
                    0.6960569343063404, 43.75}, {
                    0.6960569343063404, 285}}}]]}, {
                 GrayLevel[0], 
                 GrayLevel[0.5], 
                 
                 LineBox[{{{0.7940854014595107, 10}, {
                    0.5980284671531702, 10}}, {{0.7940854014595107, 285}, {
                    0.5980284671531702, 285}}}]}, {}}]},
             
             ImageSizeCache->{{164.5857864376269, 
              215.4142135623731}, {-187.41421356237308`, \
-20.585786437626894`}}],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "285"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], 
                 FractionBox["175", "4"]}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], "29"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "21"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "10"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 285}, {
                Style["75%", Bold], 
                Rational[175, 4]}, {
                Style["median", Bold], 29}, {
                Style["25%", Bold], 21}, {
                Style["min", Bold], 10}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.48039430656936594`, -3.75},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
          0.6960569343063404, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          0.8921138686126808, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Distribution for non-Liver disease patients\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{0.6960569343063404, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         0.8921138686126808, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {576., -116.80842387373012}, 
     ImageScaled[{0.5, 0.5}], {360., 222.49223594996212}]}, {}},
  ContentSelectable->True,
  ImageSize->{780., 245.61684774746024`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.7841373274836416`*^9, 3.7843865202322364`*^9, 
  3.7843867967792563`*^9, 3.7843892978409295`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"50576fbc-b572-4eb5-a027-17067a9e4c13"]
}, Open  ]],

Cell["\<\
The data ranges from 10-4929. The mean is greater than median which indicates \
the  distribution is positively skewed with 25% of people having level above \
87. Again a few cases of very high levels of aspartate aminotransferase are \
indicated. The boxplot shows a liver patients having very high levels of \
aspartate aminotransferase, whereas the non-liver patients are within the \
range of 10-285.\
\>", "Text",
 CellChangeTimes->{{3.784136092864438*^9, 3.784136124697452*^9}, {
  3.7841361704224977`*^9, 3.784136181045435*^9}, {3.7841373373969436`*^9, 
  3.7841373711151457`*^9}, {3.7843868036623917`*^9, 3.7843868742668333`*^9}, {
  3.7843890488566236`*^9, 
  3.784389053503476*^9}},ExpressionUUID->"36517b88-8f52-4cd9-9af7-\
834f31bf21f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Total_Proteins-", "Subsubsection",
 CellChangeTimes->{
  3.7833356534394817`*^9, 3.7833357579969883`*^9, {3.784136204442484*^9, 
   3.78413620559683*^9}},ExpressionUUID->"6fcf7359-d62d-46b4-9dce-\
d9faf410a2ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Total_Proteins\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7833356616760874`*^9, 3.7833356686750393`*^9}, {
  3.784136197841775*^9, 3.7841361991275687`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"1d14a544-5270-4a81-82b2-6e3fbf1acb95"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "6.4831903945111495`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "1.085451484023466`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "2.7`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "9.6`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "6.6`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "5.8`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "7.2`"}],
  SequenceForm[
  "Mean=", 6.4831903945111495`, "\n", "Standard Deviation=", 
   1.085451484023466, "\n", "Minimum=", 2.7, "\n", "Maximum=", 9.6, "\n", 
   "Median=", 6.6, "\n", "1st Quantile=", 5.8, "\n", "3rd Quantile=", 7.2],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.7833356691687565`*^9, 3.783531135018217*^9, {3.7841361944607105`*^9, 
   3.7841361999193945`*^9}, 3.7841366085914326`*^9, 3.7843893016879425`*^9},
 CellLabel->
  "During evaluation of \
In[36]:=",ExpressionUUID->"8307e914-fdd6-4a53-ab28-61799af76e11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BoxWhiskerChart", "[", 
  RowBox[{"file", "[", 
   RowBox[{"All", ",", "\"\<Total_Proteins\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.784137377792338*^9, 3.784137381106406*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"8ceb26b9-6475-4793-beb7-f0f08f92073e"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.5, 2.3550000000000004`}, {1.8921138686126808`, 9.945}}]}, 
   {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], 
      TagBox[
       TooltipBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          GraphicsGroupBox[{Antialiasing -> False, 
            
            PolygonBox[{{0.5, 7.2}, {0.8921138686126808, 7.2}, {
             0.8921138686126808, 5.8}, {0.5, 5.8}}], {}, {{}, {}}, {}, {
             GrayLevel[0], 
             GrayLevel[1], 
             LineBox[{{0.8921138686126808, 6.6}, {0.5, 6.6}}]}, {}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.6960569343063404, 5.8}, {0.6960569343063404, 
              2.7}}, {{0.6960569343063404, 7.2}, {0.6960569343063404, 
              9.6}}}]}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.7940854014595107, 2.7}, {0.5980284671531702, 
              2.7}}, {{0.7940854014595107, 9.6}, {0.5980284671531702, 
              9.6}}}]}, {}}]},
         ImageSizeCache->{{159.5857864376269, 
          213.4142135623731}, {-91.4142135623731, 85.4142135623731}}],
        StyleBox[
         TagBox[
          GridBox[{{
             StyleBox["\"max\"", Bold, StripOnInput -> False], "9.6`"}, {
             StyleBox["\"75%\"", Bold, StripOnInput -> False], "7.2`"}, {
             StyleBox["\"median\"", Bold, StripOnInput -> False], "6.6`"}, {
             StyleBox["\"25%\"", Bold, StripOnInput -> False], "5.8`"}, {
             StyleBox["\"min\"", Bold, StripOnInput -> False], "2.7`"}}, 
           GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
           AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}, "Rows" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}}, 
           GridBoxFrame -> {
            "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, BaseStyle -> 
           Directive[
             AbsoluteThickness[1], 
             Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            Style["max", Bold], 9.6}, {
            Style["75%", Bold], 7.2}, {
            Style["median", Bold], 6.6}, {
            Style["25%", Bold], 5.8}, {
            Style["min", Bold], 2.7}}, Dividers -> {{
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}, {
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, Frame -> 
          GrayLevel[0], BaseStyle -> Directive[
            AbsoluteThickness[1], 
            Dashing[{}]]], {}], 
        "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.48039430656936594`, 2.3550000000000004`},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
      0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0.6960569343063404, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
     0.8921138686126808, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
    Automatic}]], "Output",
 CellChangeTimes->{3.784137381537157*^9, 3.784389304907146*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"1c092b23-2712-451c-b0a8-adbccc8f160d"]
}, Open  ]],

Cell["\<\
The data ranges from 2.7-9.6. The mean is almost equal to median which \
indicates the  distribution is normal. Around 25% of people are noted to be \
having level between 7.2-9.6. The boxplot shows almost normal distribution of \
data.\
\>", "Text",
 CellChangeTimes->{{3.7841362101521287`*^9, 3.7841362752207713`*^9}, {
  3.784137385728759*^9, 3.784137399094572*^9}, {3.7843890792929688`*^9, 
  3.78438908090454*^9}},ExpressionUUID->"35688e78-aedd-4804-be9b-\
f785e779b3d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Albumin-", "Subsubsection",
 CellChangeTimes->{3.783335678899178*^9, 
  3.783335753412627*^9},ExpressionUUID->"95e09163-1e21-43cc-8f9c-\
105ccb15e8f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"statisticalSummary", "[", "\"\<Albumin\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.783335682364186*^9, 3.7833356885346537`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"6fdf06be-bd20-4ed8-b7c7-53309232d710"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "3.141852487135506`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "0.7955188059640256`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "0.9`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "5.5`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "3.1`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "2.6`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "3.8`"}],
  SequenceForm[
  "Mean=", 3.141852487135506, "\n", "Standard Deviation=", 0.7955188059640256,
    "\n", "Minimum=", 0.9, "\n", "Maximum=", 5.5, "\n", "Median=", 3.1, "\n", 
   "1st Quantile=", 2.6, "\n", "3rd Quantile=", 3.8],
  Editable->False]], "Print",
 CellChangeTimes->{3.7833356890883284`*^9, 3.783531140003377*^9, 
  3.784136279467847*^9, 3.78413661337169*^9, 3.784389308546229*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"90d59e4b-343f-4f04-a367-3405e98d2d07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BoxWhiskerChart", "[", 
  RowBox[{"file", "[", 
   RowBox[{"All", ",", "\"\<Albumin\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.784137410722481*^9, 3.784137414395373*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"1ac93663-053a-43d7-98df-7f97bdc373a5"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{-0.5, 0.67}, {1.8921138686126808`, 5.73}}]}, 
   {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], 
      TagBox[
       TooltipBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          GraphicsGroupBox[{Antialiasing -> False, 
            
            PolygonBox[{{0.5, 3.8}, {0.8921138686126808, 3.8}, {
             0.8921138686126808, 2.6}, {0.5, 2.6}}], {}, {{}, {}}, {}, {
             GrayLevel[0], 
             GrayLevel[1], 
             LineBox[{{0.8921138686126808, 3.1}, {0.5, 3.1}}]}, {}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.6960569343063404, 2.6}, {0.6960569343063404, 
              0.9}}, {{0.6960569343063404, 3.8}, {0.6960569343063404, 
              5.5}}}]}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.7940854014595107, 0.9}, {0.5980284671531702, 
              0.9}}, {{0.7940854014595107, 5.5}, {0.5980284671531702, 
              5.5}}}]}, {}}]},
         ImageSizeCache->{{155.5857864376269, 
          210.4142135623731}, {-91.4142135623731, 88.4142135623731}}],
        StyleBox[
         TagBox[
          GridBox[{{
             StyleBox["\"max\"", Bold, StripOnInput -> False], "5.5`"}, {
             StyleBox["\"75%\"", Bold, StripOnInput -> False], "3.8`"}, {
             StyleBox["\"median\"", Bold, StripOnInput -> False], "3.1`"}, {
             StyleBox["\"25%\"", Bold, StripOnInput -> False], "2.6`"}, {
             StyleBox["\"min\"", Bold, StripOnInput -> False], "0.9`"}}, 
           GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
           AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}, "Rows" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}}, 
           GridBoxFrame -> {
            "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, BaseStyle -> 
           Directive[
             AbsoluteThickness[1], 
             Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            Style["max", Bold], 5.5}, {
            Style["75%", Bold], 3.8}, {
            Style["median", Bold], 3.1}, {
            Style["25%", Bold], 2.6}, {
            Style["min", Bold], 0.9}}, Dividers -> {{
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}, {
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, Frame -> 
          GrayLevel[0], BaseStyle -> Directive[
            AbsoluteThickness[1], 
            Dashing[{}]]], {}], 
        "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.48039430656936594`, 0.67},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
      0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0.6960569343063404, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
     0.8921138686126808, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
    Automatic}]], "Output",
 CellChangeTimes->{3.7841374149860516`*^9, 3.7843893118613915`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"8ddf773c-c265-4f98-ad46-64f4f12fd99b"]
}, Open  ]],

Cell["\<\
The data ranges from 0.9-5.5. The mean is almost equal to median which \
indicates the  distribution is normal. A total of 25% of data is found to be \
having level between 3.8-5.5 and no cases of high variation is observed. The \
boxplot shows the median is a little closer to the 1st quantile and the data \
is almost normally distributed.\
\>", "Text",
 CellChangeTimes->{{3.7841362837234154`*^9, 3.784136366238252*^9}, {
  3.7841374186629243`*^9, 
  3.7841374730843287`*^9}},ExpressionUUID->"c8663e0a-b0e4-4c4d-a102-\
bee205b2ac88"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Albumin_and _Globulin _Ratio-", "Subsubsection",
 CellChangeTimes->{{3.7833357004272537`*^9, 3.7833357063199825`*^9}, 
   3.7833357560271215`*^9},ExpressionUUID->"2c033917-5bfb-4388-aaef-\
d3ca3a25aa6e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "statisticalSummary", "[", "\"\<Albumin_and_Globulin_Ratio\>\"", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7833357090753756`*^9, 3.7833357131851115`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"0a593e19-ee78-4e49-8c22-94bab8d56aca"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Mean=\"\>", "\[InvisibleSpace]", "0.94706346483705`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Standard Deviation=\"\>", "\[InvisibleSpace]", 
   "0.31849195950243286`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Minimum=\"\>", "\[InvisibleSpace]", "0.3`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"Maximum=\"\>", "\[InvisibleSpace]", "2.8`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", "\[InvisibleSpace]", "\<\"Median=\"\>",
    "\[InvisibleSpace]", "0.947`", "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"1st Quantile=\"\>", "\[InvisibleSpace]", "0.7`", 
   "\[InvisibleSpace]", "\<\"\\n\"\>", 
   "\[InvisibleSpace]", "\<\"3rd Quantile=\"\>", "\[InvisibleSpace]", "1.1`"}],
  SequenceForm[
  "Mean=", 0.94706346483705, "\n", "Standard Deviation=", 
   0.31849195950243286`, "\n", "Minimum=", 0.3, "\n", "Maximum=", 2.8, "\n", 
   "Median=", 0.947, "\n", "1st Quantile=", 0.7, "\n", "3rd Quantile=", 1.1],
  Editable->False]], "Print",
 CellChangeTimes->{3.7833357140416117`*^9, 3.783531144470794*^9, 
  3.7841363720429163`*^9, 3.784136617640237*^9, 3.784389315263079*^9},
 CellLabel->
  "During evaluation of \
In[40]:=",ExpressionUUID->"2cf2d6d0-3e4b-4bbb-827d-fed12397debd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BoxWhiskerChart", "[", 
  RowBox[{"file", "[", 
   RowBox[{"All", ",", "\"\<Albumin_and_Globulin_Ratio\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.784137487732813*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"96e52fb0-4b7c-4df7-93fe-377dd2b3740e"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], PointBox[{{-0.5, 0.175}, {1.8921138686126808`, 2.925}}]}, 
   {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], 
      TagBox[
       TooltipBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          GraphicsGroupBox[{Antialiasing -> False, 
            
            PolygonBox[{{0.5, 1.1}, {0.8921138686126808, 1.1}, {
             0.8921138686126808, 0.7}, {0.5, 0.7}}], {}, {{}, {}}, {}, {
             GrayLevel[0], 
             GrayLevel[1], 
             LineBox[{{0.8921138686126808, 0.947}, {0.5, 0.947}}]}, {}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.6960569343063404, 0.7}, {0.6960569343063404, 
              0.3}}, {{0.6960569343063404, 1.1}, {0.6960569343063404, 
              2.8}}}]}, {
             GrayLevel[0], 
             GrayLevel[0.5], 
             
             LineBox[{{{0.7940854014595107, 0.3}, {0.5980284671531702, 
              0.3}}, {{0.7940854014595107, 2.8}, {0.5980284671531702, 
              2.8}}}]}, {}}]},
         ImageSizeCache->{{161.5857864376269, 
          215.4142135623731}, {-90.4142135623731, 85.4142135623731}}],
        StyleBox[
         TagBox[
          GridBox[{{
             StyleBox["\"max\"", Bold, StripOnInput -> False], "2.8`"}, {
             StyleBox["\"75%\"", Bold, StripOnInput -> False], "1.1`"}, {
             StyleBox["\"median\"", Bold, StripOnInput -> False], "0.947`"}, {
             StyleBox["\"25%\"", Bold, StripOnInput -> False], "0.7`"}, {
             StyleBox["\"min\"", Bold, StripOnInput -> False], "0.3`"}}, 
           GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
           AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}, "Rows" -> {
               Directive[
                GrayLevel[0.3]], {
                Directive[
                 GrayLevel[0.3]]}, 
               Directive[
                GrayLevel[0.3]]}}, 
           GridBoxFrame -> {
            "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, BaseStyle -> 
           Directive[
             AbsoluteThickness[1], 
             Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
       Annotation[#, 
        Style[
         Grid[{{
            Style["max", Bold], 2.8}, {
            Style["75%", Bold], 1.1}, {
            Style["median", Bold], 0.947}, {
            Style["25%", Bold], 0.7}, {
            Style["min", Bold], 0.3}}, Dividers -> {{
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}, {
             Directive[
              GrayLevel[0.3]], {
              Directive[
               GrayLevel[0.3]]}, 
             Directive[
              GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, Frame -> 
          GrayLevel[0], BaseStyle -> Directive[
            AbsoluteThickness[1], 
            Dashing[{}]]], {}], 
        "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0.48039430656936594`, 0.175},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {{{0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{
      0.6960569343063404, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
      0.8921138686126808, 
       FormBox[
        TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{{0.6960569343063404, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {0.5, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
     0.8921138686126808, 
      FormBox[
       TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
    Automatic}]], "Output",
 CellChangeTimes->{3.784137489162964*^9, 3.7843893179464025`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"0da193a2-22d2-468d-83c8-11aaa242f3b4"]
}, Open  ]],

Cell["\<\
The data ranges from 0.3-2.8. The mean is equal to median and hence the data \
is normally distributed. No cases with high variation in data is observed. \
The same can be observed from the boxplot.\
\>", "Text",
 CellChangeTimes->{{3.78413637614157*^9, 3.784136461887721*^9}, {
  3.7841374930577283`*^9, 3.78413751388078*^9}, {3.7843891901250067`*^9, 
  3.784389211715559*^9}},ExpressionUUID->"dd39ac8c-cffc-4e32-b9ba-\
98a75111a7dc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Visualization", "Subchapter",
 CellChangeTimes->{{3.7833498941308827`*^9, 3.7833499002133293`*^9}, {
  3.783371097362648*^9, 
  3.7833710974720135`*^9}},ExpressionUUID->"7c249b8f-5ea7-4de3-804a-\
9282eda8f4bb"],

Cell[CellGroupData[{

Cell["Patients with and without liver disease", "Section",
 CellChangeTimes->{{3.7833499176819487`*^9, 
  3.7833499423236895`*^9}},ExpressionUUID->"36de3025-3293-44c5-ba9d-\
ee64227c3843"],

Cell["\<\
A histogram is plotted to have a visual representation of the number of cases \
with liver disease and non-liver disease cases.\
\>", "Text",
 CellChangeTimes->{{3.7841367581385365`*^9, 3.784136830829726*^9}, {
  3.7841375683409405`*^9, 
  3.7841375808747177`*^9}},ExpressionUUID->"3475a20a-8786-4634-bcd6-\
b3d4844836fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"file", "[", 
    RowBox[{"All", ",", "\"\<Dataset\>\""}], "]"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", 
       RowBox[{".25", ",", "Red"}], "]"}], ",", 
      RowBox[{"Opacity", "[", 
       RowBox[{".25", ",", "Blue"}], "]"}]}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Liver Disease\>\"", ",", "\"\<No Liver Disease\>\""}], 
     "}"}]}], ",", 
   RowBox[{"Axes", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7833499624229484`*^9, 3.7833500063238087`*^9}, 
   3.7841052772670865`*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"40bd974f-b70d-43f7-af81-34696a32b161"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.6719999999999999]]], 
       RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
        Directive[
         EdgeForm[
          Directive[
           Thickness[Small], 
           Opacity[0.6719999999999999]]], 
         RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
          TagBox[
           TooltipBox[
            TagBox[{
              Directive[
               RGBColor[1, 0, 0], 
               Opacity[0.25]], 
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{0.5, 0}, {1.5, 416.}, "RoundingRadius" -> 0]}]},
              StatusArea[#, 416]& , TagBoxNote -> "416"], 
            StyleBox["416", {}, StripOnInput -> False]], Annotation[#, 
            Style[416, {}], "Tooltip"]& ]}, {
          TagBox[
           TooltipBox[
            TagBox[{
              Directive[
               RGBColor[0, 0, 1], 
               Opacity[0.25]], 
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{1.5, 0}, {2.5, 167.}, "RoundingRadius" -> 0]}]},
              StatusArea[#, 167]& , TagBoxNote -> "167"], 
            StyleBox["167", {}, StripOnInput -> False]], Annotation[#, 
            Style[167, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}, {}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0.46, 0}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{0.5, 2.5}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Liver Disease\"", "\"No Liver Disease\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[1, 0, 0], 
                    Opacity[0.25]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0, 0, 1], 
                    Opacity[0.25]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Opacity", "[", "0.25`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Opacity", "[", "0.25`", "]"}]}], "]"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"Automatic", ",", "Automatic"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.78335000887516*^9, 3.7835311508861337`*^9, 
  3.7841099327534676`*^9, 3.7843893231491227`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"c2a71fea-3ed5-4b7c-af95-0a8eaa878090"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gender count", "Section",
 CellChangeTimes->{{3.7833500460330153`*^9, 
  3.7833500535031333`*^9}},ExpressionUUID->"169cdd07-2f01-4eae-a395-\
d7d0f39594cd"],

Cell["\<\
The categorical variable \
\[OpenCurlyDoubleQuote]Gender\[CloseCurlyDoubleQuote] is converted to \
indicate 0 as \[OpenCurlyDoubleQuote]Males\[CloseCurlyDoubleQuote] and 1 as \
\[OpenCurlyDoubleQuote]Females\[CloseCurlyDoubleQuote]. A histogram is \
plotted to represent number of male and female patients reported.\
\>", "Text",
 CellChangeTimes->{{3.7841375867675495`*^9, 
  3.784137716676793*^9}},ExpressionUUID->"811aa3c7-7ee0-4240-8b0d-\
1e767454f61b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gender", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"x", "==", "\"\<Male\>\""}], ",", "0", ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newfile", "=", 
   RowBox[{"file", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Gender\>\"", "\[Rule]", "gender"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"newfile", "[", 
    RowBox[{"All", ",", "\"\<Gender\>\""}], "]"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", 
       RowBox[{".5", ",", "Blue"}], "]"}], ",", 
      RowBox[{"Opacity", "[", 
       RowBox[{".35", ",", "Red"}], "]"}]}], "}"}]}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Male\>\"", ",", "\"\<Female\>\""}], "}"}]}], ",", 
   RowBox[{"Axes", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7833500628807645`*^9, 3.7833500881327066`*^9}, {
  3.7841052958088865`*^9, 3.7841053406935863`*^9}, {3.7841376041473827`*^9, 
  3.784137608413958*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"59909080-0434-4577-9040-3055eede558c"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{
      Directive[
       EdgeForm[
        Directive[
         Thickness[Small], 
         Opacity[0.6719999999999999]]], 
       RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
        Directive[
         EdgeForm[
          Directive[
           Thickness[Small], 
           Opacity[0.6719999999999999]]], 
         RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
          TagBox[
           TooltipBox[
            TagBox[{
              Directive[
               RGBColor[0, 0, 1], 
               Opacity[0.5]], 
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                
                RectangleBox[{-0.5, 0}, {0.5, 441.}, "RoundingRadius" -> 
                 0]}]}, StatusArea[#, 441]& , TagBoxNote -> "441"], 
            StyleBox["441", {}, StripOnInput -> False]], Annotation[#, 
            Style[441, {}], "Tooltip"]& ]}, {
          TagBox[
           TooltipBox[
            TagBox[{
              Directive[
               RGBColor[1, 0, 0], 
               Opacity[0.35]], 
              DynamicBox[{
                FEPrivate`If[
                 CurrentValue["MouseOver"], 
                 EdgeForm[{
                   GrayLevel[0.5], 
                   AbsoluteThickness[1.5], 
                   Opacity[0.66]}], {}, {}], 
                RectangleBox[{0.5, 0}, {1.5, 142.}, "RoundingRadius" -> 0]}]},
              StatusArea[#, 142]& , TagBoxNote -> "142"], 
            StyleBox["142", {}, StripOnInput -> False]], Annotation[#, 
            Style[142, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}, {}}}, {
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {-0.54, 0}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotRange -> {{-0.5, 1.5}, {All, All}}, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"Male\"", "\"Female\""}, "SwatchLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0, 0, 1], 
                    Opacity[0.5]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[1, 0, 0], 
                    Opacity[0.35]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Opacity", "[", "0.35`", "]"}]}], "]"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"{", 
                 RowBox[{"Automatic", ",", "Automatic"}], "}"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.7833500598695364`*^9, 3.783350089576352*^9}, 
   3.783531155818287*^9, {3.784105300295751*^9, 3.7841053105411816`*^9}, 
   3.7841053425130997`*^9, 3.784109942822563*^9, 3.7841377056191387`*^9, 
   3.7843893269801226`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"8fe2f7eb-ef80-472b-b71d-6edcc2791cd3"]
}, Open  ]],

Cell["\<\
The histogram shows that 441 cases are of male patients and 142 cases are \
reported for female patients.\
\>", "Text",
 CellChangeTimes->{{3.7841377206584964`*^9, 
  3.784137751122022*^9}},ExpressionUUID->"dc5937be-6839-4c37-8051-\
9b46d561c4ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Age factor", "Section",
 CellChangeTimes->{{3.7833501769462395`*^9, 
  3.783350179597559*^9}},ExpressionUUID->"f4229443-9764-4cba-8821-\
a1537d847b2e"],

Cell["\<\
The number of patients in each gender group classified as a liver patient or \
not is calculated and their average age is calculated. A histogram is plotted \
to view the relation of age to the disease. \
\>", "Text",
 CellChangeTimes->{{3.7841377780153265`*^9, 3.784137795832105*^9}, {
  3.7841379433467927`*^9, 
  3.7841380010740337`*^9}},ExpressionUUID->"e39c0842-cf02-4390-a5e3-\
828e4ba9e838"],

Cell[CellGroupData[{

Cell["Number of Males with Disease and their average Age", "Subsection",
 CellChangeTimes->{{3.7833510933618317`*^9, 3.783351108310052*^9}, {
  3.783351491284271*^9, 3.7833514972267466`*^9}, {3.7833515756709237`*^9, 
  3.7833515849725943`*^9}},ExpressionUUID->"b81eb4e2-c90f-4d83-9d34-\
6d8537c63af9"],

Cell["\<\
The average age of male patients reported as liver patients is 47.\
\>", "Text",
 CellChangeTimes->{{3.784137772391554*^9, 3.7841377729232717`*^9}, {
  3.784138018029997*^9, 
  3.784138036051681*^9}},ExpressionUUID->"04789e18-623a-4ea8-a7c3-\
37ea261163f5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"k", "=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{"newfile", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
        RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"newfile", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
         RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "/", "k"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7833504138908205`*^9, 3.7833505000189*^9}, {
  3.783350566844883*^9, 3.7833506186748314`*^9}, {3.783350760108488*^9, 
  3.783350782026947*^9}, {3.7833510178508587`*^9, 3.78335107893347*^9}, {
  3.783351364818815*^9, 3.7833514252595415`*^9}, {3.783351528058953*^9, 
  3.783351560914651*^9}, {3.7841377563789988`*^9, 3.784137761296209*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"18ae640d-c957-4191-ae06-e0a4a7f58a6c"],

Cell[BoxData["324"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, 
   3.7835311650339966`*^9, 3.7841099604426103`*^9, 3.7841377645060487`*^9, 
   3.784389331399028*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"124478c5-3197-4546-b332-2e4d79e24925"],

Cell[BoxData["46.95061728395062`"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, 
   3.7835311650339966`*^9, 3.7841099604426103`*^9, 3.7841377645060487`*^9, 
   3.7843893314070253`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"c95ad1a1-dfb0-45d1-bde7-4be516e2408d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Number of Males without Disease and their average Age", "Subsection",
 CellChangeTimes->{{3.7833514859495964`*^9, 3.783351488520939*^9}, {
  3.7833515919348354`*^9, 
  3.7833515955219283`*^9}},ExpressionUUID->"636ac158-e0af-4bc8-954b-\
70fa8e94c96e"],

Cell["\<\
The average age of male patients not reported as liver patients is 41.\
\>", "Text",
 CellChangeTimes->{{3.78413806153259*^9, 
  3.7841380691458263`*^9}},ExpressionUUID->"2ce0d749-1b55-4692-8093-\
7c011421b934"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "k", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"k", "=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{"newfile", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
        RowBox[{"#Dataset", "\[Equal]", "2"}]}], "&"}]}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"newfile", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
         RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "/", "k"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.783351603607854*^9, 3.783351616400652*^9}, {
  3.7841380490877533`*^9, 3.78413805352221*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"77900036-154e-4475-a300-b30484dd0120"],

Cell[BoxData["117"], "Output",
 CellChangeTimes->{{3.7833516087425776`*^9, 3.7833516169125137`*^9}, 
   3.783531169604375*^9, 3.7841099748353925`*^9, 3.784138054214799*^9, 
   3.7843893348381605`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"c3e34df4-2c38-4f41-bdbd-76a7d5ef8c76"],

Cell[BoxData["40.598290598290596`"], "Output",
 CellChangeTimes->{{3.7833516087425776`*^9, 3.7833516169125137`*^9}, 
   3.783531169604375*^9, 3.7841099748353925`*^9, 3.784138054214799*^9, 
   3.7843893348461585`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"6c1c6d5c-8f2b-4532-8d63-bdafaf31b6ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Number of Females with Disease and their average Age", "Subsection",
 CellChangeTimes->{{3.7833510933618317`*^9, 3.783351108310052*^9}, {
  3.783351491284271*^9, 3.7833514972267466`*^9}, {3.7833515756709237`*^9, 
  3.7833515849725943`*^9}, {3.7833516269455304`*^9, 
  3.783351628481118*^9}},ExpressionUUID->"8bbaea56-68a4-4453-9868-\
d66aca0ee34c"],

Cell["\<\
The average age of female patients reported as liver patients is 43.\
\>", "Text",
 CellChangeTimes->{{3.784138079520516*^9, 
  3.784138087675804*^9}},ExpressionUUID->"fa662605-3425-4571-be74-\
2d66e906b1ad"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "k", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"k", "=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{"newfile", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
        RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"newfile", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
         RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "/", "k"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7833504138908205`*^9, 3.7833505000189*^9}, {
  3.783350566844883*^9, 3.7833506186748314`*^9}, {3.783350760108488*^9, 
  3.783350782026947*^9}, {3.7833510178508587`*^9, 3.78335107893347*^9}, {
  3.783351364818815*^9, 3.7833514252595415`*^9}, {3.783351528058953*^9, 
  3.783351560914651*^9}, {3.7833516317083273`*^9, 3.7833516453568554`*^9}, {
  3.784138074949139*^9, 3.784138077546617*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ec2177f3-c0f4-4ed9-8357-eb2454bb5dbc"],

Cell[BoxData["92"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, 
   3.783351646452571*^9, 3.7835311742437134`*^9, 3.7841100077008*^9, 
   3.784138092200209*^9, 3.784389338109335*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"42be607e-e117-40ad-b4e7-38cabac6f7ce"],

Cell[BoxData["43.34782608695652`"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, 
   3.783351646452571*^9, 3.7835311742437134`*^9, 3.7841100077008*^9, 
   3.784138092200209*^9, 3.7843893381173334`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"7c145736-95b0-42f7-9974-55ed4dcbefee"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Number of Females without Disease and their average Age", "Subsection",
 CellChangeTimes->{{3.7833510933618317`*^9, 3.783351108310052*^9}, {
  3.783351491284271*^9, 3.7833514972267466`*^9}, {3.7833515756709237`*^9, 
  3.7833515849725943`*^9}, {3.7833516516272926`*^9, 
  3.7833516574818125`*^9}},ExpressionUUID->"9246f959-5bbf-409a-ba2d-\
8fc74040afff"],

Cell["\<\
The average age of female patients not reported as liver patients is 43.\
\>", "Text",
 CellChangeTimes->{{3.7841380963448644`*^9, 
  3.78413810594578*^9}},ExpressionUUID->"acb5293d-63e9-426d-b920-\
b52afe044457"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "k", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"k", "=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{"newfile", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#Gender", "\[Equal]", "1"}], "&&", " ", 
        RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"newfile", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
         RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], "/", "k"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7833504138908205`*^9, 3.7833505000189*^9}, {
   3.783350566844883*^9, 3.7833506186748314`*^9}, {3.783350760108488*^9, 
   3.783350782026947*^9}, {3.7833510178508587`*^9, 3.78335107893347*^9}, {
   3.783351364818815*^9, 3.7833514252595415`*^9}, {3.783351528058953*^9, 
   3.783351560914651*^9}, {3.7833516600171432`*^9, 3.7833516750725975`*^9}, 
   3.7841104761560926`*^9, {3.7841381120063257`*^9, 3.784138115340414*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"f4d1e162-9bf6-4da7-8811-a7620b37d4d9"],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, {
   3.7833516700945983`*^9, 3.7833516755844574`*^9}, 3.783531178392332*^9, 
   3.784110479568858*^9, {3.7841381086802015`*^9, 3.784138115975025*^9}, 
   3.7843893411405544`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"7aef594e-3bce-48d4-be58-5db7da796f01"],

Cell[BoxData["42.74`"], "Output",
 CellChangeTimes->{{3.7833515557919364`*^9, 3.7833515614065375`*^9}, {
   3.7833516700945983`*^9, 3.7833516755844574`*^9}, 3.783531178392332*^9, 
   3.784110479568858*^9, {3.7841381086802015`*^9, 3.784138115975025*^9}, 
   3.7843893411485496`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"c6e9e05f-8001-4367-a2ff-31dc5184cc1f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Histogram of Age as per Gender and Disease", "Subsection",
 CellChangeTimes->{{3.7833517007591496`*^9, 3.783351708602965*^9}, {
  3.7833520062786255`*^9, 3.7833520110054283`*^9}, {3.7833522512986927`*^9, 
  3.7833522642314243`*^9}},ExpressionUUID->"3f28aadc-c4b8-4646-8838-\
7f4277afdec5"],

Cell["\<\
The histogram is plotted to view which age group has more liver patients \
reported for each gender.\
\>", "Text",
 CellChangeTimes->{{3.7841381344832544`*^9, 
  3.7841381690994177`*^9}},ExpressionUUID->"4faa07b1-a3ed-4e3d-a1c4-\
2daf0867996c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Histogram", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"Axes", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"True", ",", "True"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Age\>\"", ",", "\"\<Count\>\""}], "}"}]}], ",", 
        RowBox[{
        "PlotLabel", "\[Rule]", "\"\<Age of Males with Liver Disease\>\""}], 
        ",", 
        RowBox[{"PlotTheme", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<BoldLabels\>\"", ",", "\"\<CoolColor\>\"", ",", 
           "\"\<Scientific\>\""}], " ", "}"}]}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      RowBox[{"Histogram", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"Axes", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"True", ",", "True"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Age\>\"", ",", "\"\<Count\>\""}], "}"}]}], ",", 
        RowBox[{
        "PlotLabel", "\[Rule]", 
         "\"\<Age of Males without Liver Disease\>\""}], ",", 
        RowBox[{"PlotTheme", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<BoldLabels\>\"", ",", "\"\<RoyalColor\>\"", ",", 
           "\"\<Scientific\>\""}], " ", "}"}]}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Histogram", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"Axes", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"True", ",", "True"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Age\>\"", ",", "\"\<Count\>\""}], "}"}]}], ",", 
        RowBox[{
        "PlotLabel", "\[Rule]", "\"\<Age of Females with Liver disease\>\""}],
         ",", 
        RowBox[{"PlotTheme", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<BoldLabels\>\"", ",", "\"\<VibrantColor\>\"", ",", 
           "\"\<Scientific\>\""}], " ", "}"}]}]}], "]"}], ",", 
      RowBox[{"Histogram", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"Axes", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"True", ",", "True"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Age\>\"", ",", "\"\<Count\>\""}], "}"}]}], ",", 
        RowBox[{
        "PlotLabel", "\[Rule]", 
         "\"\<Age of Females without Liver DIsease\>\""}], ",", " ", 
        RowBox[{"PlotTheme", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<BoldLabels\>\"", ",", "\"\<Scientific\>\""}], " ", 
          "}"}]}], ",", 
        RowBox[{"ChartStyle", "\[Rule]", 
         RowBox[{"Hue", "[", 
          RowBox[{
           RowBox[{"5", "/", "6"}], ",", "0.7"}], "]"}]}]}], "]"}]}], "}"}]}],
    "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352072349837*^9, 3.7833522300480633`*^9}, {
   3.7833562795605803`*^9, 3.78335628347285*^9}, 3.784105437917018*^9, {
   3.784105483486249*^9, 3.784105808223354*^9}, {3.784105884217019*^9, 
   3.7841060438966374`*^9}, {3.78410616753106*^9, 3.784106321040264*^9}, {
   3.7841063560394325`*^9, 3.784106498243518*^9}, {3.784106542656274*^9, 
   3.7841066365605464`*^9}, {3.7841066734112625`*^9, 3.784106675570704*^9}, {
   3.78410671936444*^9, 3.7841067468728333`*^9}, {3.78410678039279*^9, 
   3.784106816358322*^9}, {3.7841068486798573`*^9, 3.7841068584446354`*^9}, {
   3.784106890514962*^9, 3.7841068964494715`*^9}, {3.7841386062068987`*^9, 
   3.7841386165366693`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"49522a27-7741-4d09-bca6-8b7302a6c780"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{
        {RGBColor[0.4294736, 0.624316, 1.], EdgeForm[{Opacity[0.623], 
         Thickness[Small]}], {}, 
         {RGBColor[0.4294736, 0.624316, 1.], EdgeForm[{Opacity[0.623], 
          Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{10., 0}, {20., 16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.20162526439533, 
               92.36485741669911}, {-73.02128019479608, -33.79105940185417}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox[
            "16", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[16, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{20., 0}, {30., 24.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{91.86485741669911, 
               124.0280895690029}, {-92.38639059126703, -33.79105940185417}}],
             StatusArea[#, 24]& ,
             TagBoxNote->"24"],
            StyleBox[
            "24", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[24, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{30., 0}, {40., 72.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{123.5280895690029, 
               155.69132172130668`}, {-208.57705297009278`, \
-33.79105940185417}}],
             StatusArea[#, 72]& ,
             TagBoxNote->"72"],
            StyleBox[
            "72", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[72, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{40., 0}, {50., 66.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{155.19132172130668`, 
               187.35455387361046`}, {-194.05322017273954`, \
-33.79105940185417}}],
             StatusArea[#, 66]& ,
             TagBoxNote->"66"],
            StyleBox[
            "66", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[66, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{50., 0}, {60., 59.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{186.85455387361046`, 
               219.01778602591423`}, {-177.10874857582746`, \
-33.79105940185417}}],
             StatusArea[#, 59]& ,
             TagBoxNote->"59"],
            StyleBox[
            "59", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[59, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{60., 0}, {70., 56.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{218.51778602591423`, 
               250.681018178218}, {-169.84683217715087`, -33.79105940185417}}],
             StatusArea[#, 56]& ,
             TagBoxNote->"56"],
            StyleBox[
            "56", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[56, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{70., 0}, {80., 30.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{250.181018178218, 
               282.34425033052185`}, {-106.91022338862024`, \
-33.79105940185417}}],
             StatusArea[#, 30]& ,
             TagBoxNote->"30"],
            StyleBox[
            "30", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[30, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{90., 0}, {100., 1.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{313.5074824828256, 
               345.67071463512934`}, {-36.71169820141304, \
-33.79105940185417}}],
             StatusArea[#, 1]& ,
             TagBoxNote->"1"],
            StyleBox[
            "1", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[1, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{8.2, 0},
       Frame->True,
       FrameLabel->{{
          FormBox["\"Count\"", TraditionalForm], None}, {
          FormBox["\"Age\"", TraditionalForm], None}},
       FrameStyle->Automatic,
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{{0}, {0}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImageSize->Medium,
       LabelStyle->{FontFamily -> "Helvetica", FontWeight -> "Bold"},
       PlotLabel->FormBox[
        "\"Age of Males with Liver Disease\"", TraditionalForm],
       PlotRange->{{10., 100.}, {All, All}},
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {None, 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{
        {RGBColor[0.6539408, 0.45853600000000005`, 0.7838648], EdgeForm[{
         Opacity[0.63], Thickness[Small]}], {}, 
         {RGBColor[0.6539408, 0.45853600000000005`, 0.7838648], EdgeForm[{
          Opacity[0.63], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0., 0}, {10., 4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{64.29993398088959, 
               99.71688596953817}, {-62.764489897557525`, \
-33.79105940185419}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox[
            "4", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[4, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{10., 0}, {20., 9.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{99.21688596953817, 
               134.63383795818675`}, {-98.3562780171867, -33.7910594018542}}],
             StatusArea[#, 9]& ,
             TagBoxNote->"9"],
            StyleBox[
            "9", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[9, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{20., 0}, {30., 22.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{134.13383795818675`, 
               169.55078994683527`}, {-190.8949271282225, -33.7910594018542}}],
             StatusArea[#, 22]& ,
             TagBoxNote->"22"],
            StyleBox[
            "22", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[22, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{30., 0}, {40., 23.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{169.05078994683527`, 
               204.4677419354839}, {-198.0132847521483, -33.7910594018542}}],
             StatusArea[#, 23]& ,
             TagBoxNote->"23"],
            StyleBox[
            "23", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[23, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{40., 0}, {50., 19.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{203.9677419354839, 
               239.38469392413242`}, {-169.53985425644498`, \
-33.7910594018542}}],
             StatusArea[#, 19]& ,
             TagBoxNote->"19"],
            StyleBox[
            "19", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[19, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{50., 0}, {60., 14.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{238.88469392413242`, 
               274.30164591278094`}, {-133.94806613681584`, \
-33.7910594018542}}],
             StatusArea[#, 14]& ,
             TagBoxNote->"14"],
            StyleBox[
            "14", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[14, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{60., 0}, {70., 24.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{273.80164591278094`, 
               309.2185979014296}, {-205.13164237607418`, -33.7910594018542}}],
             StatusArea[#, 24]& ,
             TagBoxNote->"24"],
            StyleBox[
            "24", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[24, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{70., 0}, {80., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{308.7185979014296, 
               344.1355498900782}, {-48.527774649705854`, \
-33.79105940185419}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox[
            "2", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[2, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{-1.6, 0},
       Frame->True,
       FrameLabel->{{
          FormBox["\"Count\"", TraditionalForm], None}, {
          FormBox["\"Age\"", TraditionalForm], None}},
       FrameStyle->Automatic,
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{{0}, {0}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       LabelStyle->{FontFamily -> "Helvetica", FontWeight -> "Bold"},
       PlotLabel->FormBox[
        "\"Age of Males without Liver Disease\"", TraditionalForm],
       PlotRange->{{0., 80.}, {All, All}},
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {None, 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{
        {RGBColor[0.8324703999999999, 0.3609408, 0.2], EdgeForm[{Opacity[
         0.63], Thickness[Small]}], {}, 
         {RGBColor[0.8324703999999999, 0.3609408, 0.2], EdgeForm[{Opacity[
          0.63], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0., 0}, {10., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{61.483197250116845`, 
               97.60433342145859}, {-44.853846890838355`, -33.7910594018542}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox[
            "2", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[2, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{10., 0}, {20., 4.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{97.10433342145859, 
               133.22546959280032`}, {-55.41663437982251, -33.7910594018542}}],
             StatusArea[#, 4]& ,
             TagBoxNote->"4"],
            StyleBox[
            "4", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[4, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{20., 0}, {30., 11.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{132.72546959280032`, 
               168.8466057641421}, {-92.38639059126706, -33.7910594018542}}],
             StatusArea[#, 11]& ,
             TagBoxNote->"11"],
            StyleBox[
            "11", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[11, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{30., 0}, {40., 13.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{168.3466057641421, 
               204.46774193548384`}, {-102.94917808025122`, \
-33.7910594018542}}],
             StatusArea[#, 13]& ,
             TagBoxNote->"13"],
            StyleBox[
            "13", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[13, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{40., 0}, {50., 33.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{203.96774193548384`, 
               240.08887810682558`}, {-208.57705297009275`, \
-33.7910594018542}}],
             StatusArea[#, 33]& ,
             TagBoxNote->"33"],
            StyleBox[
            "33", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[33, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{50., 0}, {60., 18.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{239.58887810682558`, 
               275.71001427816736`}, {-129.35614680271158`, \
-33.7910594018542}}],
             StatusArea[#, 18]& ,
             TagBoxNote->"18"],
            StyleBox[
            "18", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[18, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{60., 0}, {70., 6.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{275.21001427816736`, 
               311.3311504495091}, {-65.97942186880667, -33.7910594018542}}],
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox[
            "6", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[6, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{70., 0}, {80., 5.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{310.8311504495091, 
               346.9522866208508}, {-60.69802812431459, -33.7910594018542}}],
             StatusArea[#, 5]& ,
             TagBoxNote->"5"],
            StyleBox[
            "5", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[5, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{-1.6, 0},
       Frame->True,
       FrameLabel->{{
          FormBox["\"Count\"", TraditionalForm], None}, {
          FormBox["\"Age\"", TraditionalForm], None}},
       FrameStyle->Automatic,
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{{0}, {0}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       LabelStyle->{FontFamily -> "Helvetica", FontWeight -> "Bold"},
       PlotLabel->FormBox[
        "\"Age of Females with Liver disease\"", TraditionalForm],
       PlotRange->{{0., 80.}, {All, All}},
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {None, 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{
        {Hue[
          NCache[
           Rational[5, 6], 0.8333333333333334], 0.7, 1], EdgeForm[{Opacity[
         0.651], Thickness[Small]}], {}, 
         {Hue[
           NCache[
            Rational[5, 6], 0.8333333333333334], 0.7, 1], EdgeForm[{Opacity[
          0.651], Thickness[Small]}], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{0., 0}, {20., 3.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{60.201625264395375`, 
               117.69544313854215`}, {-58.057331252068536`, \
-33.7910594018542}}],
             StatusArea[#, 3]& ,
             TagBoxNote->"3"],
            StyleBox[
            "3", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[3, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{20., 0}, {40., 22.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{117.19544313854215`, 
               174.68926101268903`}, {-208.5770529700927, -33.7910594018542}}],
             StatusArea[#, 22]& ,
             TagBoxNote->"22"],
            StyleBox[
            "22", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[22, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{40., 0}, {60., 16.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{174.18926101268903`, 
               231.6830788868358}, {-161.04450926966402`, -33.7910594018542}}],
             StatusArea[#, 16]& ,
             TagBoxNote->"16"],
            StyleBox[
            "16", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[16, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{60., 0}, {80., 7.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{231.1830788868358, 
               288.6768967609826}, {-89.745693719021, -33.7910594018542}}],
             StatusArea[#, 7]& ,
             TagBoxNote->"7"],
            StyleBox[
            "7", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[7, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               RectangleBox[{80., 0}, {100., 2.}, "RoundingRadius" -> 0]},
              
              ImageSizeCache->{{288.1768967609826, 
               345.67071463512934`}, {-50.13524063533043, -33.7910594018542}}],
             StatusArea[#, 2]& ,
             TagBoxNote->"2"],
            StyleBox[
            "2", {FontFamily -> "Helvetica", FontWeight -> "Bold"}, 
             StripOnInput -> False]],
           Annotation[#, 
            Style[2, {FontFamily -> "Helvetica", FontWeight -> "Bold"}], 
            "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{-2., 0},
       Frame->True,
       FrameLabel->{{
          FormBox["\"Count\"", TraditionalForm], None}, {
          FormBox["\"Age\"", TraditionalForm], None}},
       FrameStyle->Automatic,
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{{0}, {0}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       LabelStyle->{FontFamily -> "Helvetica", FontWeight -> "Bold"},
       PlotLabel->FormBox[
        "\"Age of Females without Liver DIsease\"", TraditionalForm],
       PlotRange->{{0., 100.}, {All, All}},
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {None, 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7841067478445835`*^9, {3.7841067934094863`*^9, 3.7841068169421415`*^9}, {
   3.784106851690355*^9, 3.7841068591964407`*^9}, {3.784106892930355*^9, 
   3.784106897373229*^9}, 3.7841104850973806`*^9, 3.7841386199474745`*^9, 
   3.7843893444757295`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"0efe5e5e-019a-4412-875e-4ecc4caa452b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843870409860306`*^9, 
  3.784387045283832*^9}},ExpressionUUID->"2637ed95-4a77-47d8-83d2-\
4b0161aabcdd"],

Cell["\<\
The average age suggests the male patients with increasing age has a tendency \
of being affected by liver disease. The average age for females are not \
conclusive as both the patient group is calculated to be having same average \
age. 
The histogram plot is a better representation of age being a factor in the \
patient being affected. For the male group it can be seen more cases are \
reported between age group 30-80 and very few cases in this age group is \
reported to be not having liver disease. In case of female patients 75 of \
liver disease cases are reported in the age group of 20-60 whereas 38 are \
reported to be not having liver disease in this age group. So it can be \
concluded that as age increases the probability of having liver disease \
increases in both male and female patients.\
\>", "Text",
 CellChangeTimes->{{3.784138174636209*^9, 3.7841384088878837`*^9}, {
  3.784138451418784*^9, 3.784138518436223*^9}, {3.7843870338793488`*^9, 
  3.7843870476691976`*^9}},ExpressionUUID->"2d533791-64ab-42be-afe0-\
f7c4ea8db745"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relation between Direct Bilirubin and Total Bilirubin", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 
  3.7833526251942315`*^9}},ExpressionUUID->"27b9ed02-aaf3-4a84-98e7-\
648b0df5dbf8"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Total Bilirubin\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Direct Bilirubin\
\[CloseCurlyDoubleQuote]. \
\>", "Text",
 CellChangeTimes->{{3.7841385349877048`*^9, 
  3.784138592124702*^9}},ExpressionUUID->"17729471-4a7c-45e9-96ae-\
cc717f98f00c"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{{3.7833526388667765`*^9, 
  3.78335264779252*^9}},ExpressionUUID->"23ca9b93-e588-46a4-aa1d-\
894b93b4a7e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Direct Bilirubin Level\>\"", ",", 
           "\"\<Total Bilirubin Level\>\""}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Direct Bilirubin Level\>\"", ",", 
           "\"\<Total Bilirubin Level\>\""}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Direct Bilirubin Level\>\"", ",", 
           "\"\<Total Bilirubin Level\>\""}], "}"}]}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Direct Bilirubin Level\>\"", ",", 
           "\"\<Total Bilirubin Level\>\""}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"4", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Direct Bilirubin Level\>\"", ",", 
           "\"\<Total Bilirubin Level\>\""}], "}"}]}]}], "]"}]}], "}"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
  3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7841070355616603`*^9, 
  3.7841070651421866`*^9}, {3.7841070983658147`*^9, 3.7841072213187203`*^9}, {
  3.7841072636324744`*^9, 3.784107415640194*^9}, {3.784107453988247*^9, 
  3.784107462386154*^9}, {3.7841386006982327`*^9, 3.784138652899352*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"ac52f590-0dcd-496a-984c-24f41567d464"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJydWMtOVEEQvSAgICMPCS8RGRhFIg9hCEYX3F7ozpWfYKJbf8Hf0N9gNTu3
JrpixW4SEpNJWDCBEAiEGKhz6qaqp7nEu+lUP6rrcep0961++vrxc3eWZe+6
suy6lW8i/Pl9/T0LX26+kVC/+Z6EH9+vv/1c5h2hzTA+jPl/c1l/mcv8Xzn7
RW7kMv8A807Q3xs6z2+pPu4r/V2B60Xf/SDj/bDnceB80Xel9tKvznI/9E4F
u25E7ZPxw5zxsHYcYL/ThH9tzLsHO48xryfQT8ZT2r2c66Stwq5N6DvH+v5o
vtg9Br3V4GX6wzjLeNPlt+ni7vNT+M9++k//mC+fzzJ8ULbjRfzpr7W3wKXX
R39on/efss1jkX+R+xC/CegfcHhjvTC+vZAnA/Mu68cjPMn6M+z7UPEo8kzk
T1l8OE6/iRfaXabP1sEy7JmF/evon0c/8fgc8muM18Tv3W3092g8mAdbtxc5
42zzNBAs3g6dnZeQJ9SOVH5vl/ddnLxcFm+vr6Xr6b/Ik4oX0VfV+vX58/Xh
68/W2SPoZR7G0S5FeLRxvMq9LG23440hkX9+hJ5l9G+rP5ZfWrnN6xzWrSTx
Z+V0vmS/BehZVX9lPc+vMfTPB8tTfdH50Xl/5r/teGsgkG+kP1N/GT/LD9Na
z5YPDlycj/R8sDwe85mXiQPijPYyb8yDtP58aUXnlbXnwvFI+471FNeH5bum
6vf868+XzuONqM5ov+WXTOMt4pmeH7fXb9of4s+fZ6n65X7ME/3y+PH8ZvOW
tlfmr0jevu1oHUr/K+RzNtD/FP9ZPiFuVxP4K85vmbeI/TdL73O2jgv/7X0h
jr+Pp8cT/fP85fHTud7icYurND6sHVnCf/pVCR7/Fhc9weuzdU4+HUR+Z5Wf
pZ3R+yX5oHP896P7kMVXcb/szJe+HtP3w9T+vr653p7vqXiWyTx3hxS/Ho8p
/rH7Vv7zPlF+ntn77ChwMRc8HxPvFrd70f3c67fjFfeeK5tfvFeISxkfd+fX
qdrJe4itz5MoHqxPGef7q+n4p6E48fGyOLmK8u/j43FRlj/mQ+SnyXh5Prb7
+PdBfH7a+Q23fzq/Xl/qfLD4qyhfMA4y/sDdj7qDjXtb64H5v2s9ejyRB2m/
5YNzd185VlxZXu+L8iHravCjLuPTGziPdvTeeTP+IWA97t27G9H9W/Yr3tsi
19Buafz8eZV6nzJ+0j+cuO97fJ8q30r7Ava/1fPB/jcgL49G/Mx3p7QLar/l
x4IPbbwHse8m1u8gDotYV0c/cbUenTe0g3kVvUvwawtxnoLM90uxv+cP8oaM
16J4pPjY8sOx+39EfsM7frcO/e+hfw7yGto52MX7VRVx2lB8W35cAh633fu2
V/9DcR/aR94lXlhHjL/0rzs88n4xpbgR/S/R/8a939ew77y+98vOL1u/J/k/
wszPUw==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Bilirubin Level\"", TraditionalForm], None}, {
          FormBox["\"Direct Bilirubin Level\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 8.7}, {0, 15.8}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJyNVEtKBDEQjQMN4+BWXAwuPMMcoHMGjyDo1pWH0ZvkCAO6cjW7gYaGhlnY
KGKjiHZXJU29pCYpaMKrTurz6nN1c399uzDGPPx/47mZ5LV+eR7lUCN+ehzF
sb6pzSR71g98bsN9+b8P9kj/FtkjfGoJr63Xk72fYJ/OLrKP//37u0k+gz/C
reJ/G2F/n84Fx3VuEaP/NHbA5479vXM+S7Z3YeneGeNLK/P6Vush+YrzO84f
3u84798QL737Cpj8fUAcxmI/pOs/8yv1ldXqofWjty/7rYF44/p4//i+rJ4Y
D/5H/uL7sr/aiE+P03zp/Z/OrwH7ON9xvY7nh3hgfyt1HuT85ex1YX5L64P2
0/11ko1P7o2qOB8N5/YRzofkfVD7IdeP2j4rnQfJWx/mO82ng77M8eVgX+v7
oSy+nL+5T0vnW76f9zXmi/H8AXExgN4=
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Bilirubin Level\"", TraditionalForm], None}, {
          FormBox["\"Direct Bilirubin Level\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 1.2}, {0, 2.7}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxTTMoPSmViYGCIAWIQPWsmCOy0TwODZ/YQ/kn7s2dA4I29MRhchvMh8jeh
9EcMeex8eQeI+ToOMPsg4o/h9qHajykPoV/iUI8pj8pHmAdx1xeofjYHVH8w
O2DX/xIq/xvKZ3SAmCMEpRmgtIADAxj8sIfQPA4w+yD62THMR1XP4QBzJ8R9
/+D+QQ0Pdag6awdC4Y8en7jCj5B+9PDFJY+uH2LPN6j/PmCoh4g/gMvD9KPz
0d0Hizfs7n+MFl+40wdqOMDSgSY0XM0diE1v6OmXNPUv4eFEXHpG8CH+VoO6
08wBu/0IPnr4wuRh8YA9Pvmh+VcBSotA07UqQfuI889HqHomqLk8UHNlcYS/
JkSdjzmO/IqePhH5H9XfjDj0c0LdIYXTfPT0jit9w8pL1PjdiWEfRL8Y1D5V
SPrbbO0AMxe1nFGAyhs4AACqHdD2
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Bilirubin Level\"", TraditionalForm], None}, {
          FormBox["\"Direct Bilirubin Level\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 3.1999999999999997`}, {0, 6.2}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQPWsmCJy0TwODZ/bGYPDZ/uwZEGBxQOdjV3/ZngEM
PtjD5CHq30D5O+HqYfIQ+qU9unm4+OjqcfGJc89JqLrHGO6D6UdXD+PD1EHo
bzjccxMejuT6B109/vDEDF+Y/3C5F1X9SyifyQFmHmr4YLoPPXzQ3QMJ/wc4
5dHDH8bHHn/EuwemHyL+kcj0hdt+AElhjnc=
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Bilirubin Level\"", TraditionalForm], None}, {
          FormBox["\"Direct Bilirubin Level\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 0.6}, {0, 1.4500000000000002`}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, 
   3.7835311925472116`*^9, {3.7841070845132833`*^9, 3.78410709997738*^9}, {
   3.7841071733588505`*^9, 3.784107182984418*^9}, {3.784107286522689*^9, 
   3.784107298191761*^9}, 3.7841073415908937`*^9, {3.7841074032352953`*^9, 
   3.784107418155548*^9}, {3.784107457663316*^9, 3.7841074639057426`*^9}, 
   3.784110061058348*^9, 3.7843893640187826`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"3e2c764a-05ce-4180-bd7e-a2d8fb82627d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.783352910835988*^9, 
  3.7833529177062683`*^9}},ExpressionUUID->"6907af44-b486-47b9-b4b0-\
afbeadcd14bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Correlation", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"file", "[", 
     RowBox[{"All", ",", "\"\<Total_Bilirubin\>\""}], "]"}], "//", "Normal"}],
    ",", 
   RowBox[{
    RowBox[{"file", "[", 
     RowBox[{"All", ",", "\"\<Direct_Bilirubin\>\""}], "]"}], "//", 
    "Normal"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"2ea159bf-34bc-413e-b16b-ab043fb0e7e1"],

Cell[BoxData["0.8746179301164135`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, 
   3.7835311979321218`*^9, 3.7841100745603275`*^9, 3.7843893692414627`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"f26777f6-105d-4d8c-9b48-4aed20079e0d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843870750690594`*^9, 
  3.7843870790190535`*^9}},ExpressionUUID->"82951269-61c8-4248-8357-\
76d5c415ac7c"],

Cell["\<\
The variables \[OpenCurlyDoubleQuote]Total Bilirubin\[CloseCurlyDoubleQuote] \
and \[OpenCurlyDoubleQuote]Direct Bilirubin\[CloseCurlyDoubleQuote] is \
observed to be having a direct linear relationship and the correlation \
coefficient is also observed to be very high. We could have removed one of \
the variables from the model due to this direct relation but it should not be \
removed. Both of them indicates jaundice in the patient but they indicate \
different types of jaundice. Also an increase in total bilirubin does not \
always indicate an increase in direct bilirubin. It can also increase due to \
increase in indirect bilirubin. So we will be keeping both the variables in \
the model.\
\>", "Text",
 CellChangeTimes->{{3.7841386750934825`*^9, 3.784138837573886*^9}, {
  3.7841388934996624`*^9, 3.7841389059314847`*^9}, {3.7841389948675175`*^9, 
  3.784139050635803*^9}, {3.784152128596956*^9, 3.784152138829625*^9}, {
  3.784152501719268*^9, 3.7841525021741776`*^9}, {3.784154118809821*^9, 
  3.784154178886635*^9}, {3.784319162333658*^9, 3.7843191634429555`*^9}, {
  3.784387069288741*^9, 
  3.7843870712102532`*^9}},ExpressionUUID->"a7ed29dc-356e-42a9-a22d-\
95200347dafa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Relation between Aspartate Aminotransferase and Alanine AminoTransferase\
\>", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 3.7833526251942315`*^9}, {
  3.7833532260579643`*^9, 3.7833532604914556`*^9}, {3.784127621246318*^9, 
  3.7841276220911727`*^9}},ExpressionUUID->"3278cb21-c0fd-440c-adb9-\
355b85a7574c"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Aspartate \
Aminotransferase\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Alanine \
Aminotransferase\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.784389397046446*^9, 
  3.7843894235357714`*^9}},ExpressionUUID->"900a7b5e-7e99-41fe-bbe3-\
97b69e739896"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{{3.7833526388667765`*^9, 
  3.78335264779252*^9}},ExpressionUUID->"ab9a136c-79db-4519-a7ff-\
2f31da7c10ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Asparate Aminotransferase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Asparate Aminotransferase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Asparate Aminotransferase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"7", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Asparate Aminotransferase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}]}], "}"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
   3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7833532887005687`*^9, 
   3.783353406690621*^9}, {3.783353456455768*^9, 3.7833534679728518`*^9}, {
   3.783353568311499*^9, 3.783353569679146*^9}, {3.7833536357888155`*^9, 
   3.783353635984765*^9}, {3.7833539313499126`*^9, 3.783353932929514*^9}, {
   3.784107616226238*^9, 3.784107692113915*^9}, {3.7841276286872463`*^9, 
   3.784127638632125*^9}, {3.784139054885384*^9, 3.7841390635134144`*^9}, 
   3.784139467502138*^9},
 CellLabel->"In[61]:=",ExpressionUUID->"2cc93d55-773d-4f0e-8186-59f15aa1a262"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1mM2OVEUUx0vjA8zS5bgxhpgJCqOCMtxuhi8VBkbRQRGvrSAI6viBQky0
1MQQjWYSY4xuvDu3JL7AfQSWLvsRfARj6verpI7dvTmpW1Wnzsf//OtUPzL7
cPvKgymlzQdS+k+W38WuyHPI88izyIPIx4vMZxg/235PB5DM5+fb9fk08y8i
j/J9s12/9wXzV5DPIZ9ATpBPsU+732D8AuP9Rf79XZE7Pywe731fZPd7kePr
6DmBHmT23JcZXwznH0PPNnou8x2/c8f4myJ37zA2jlPkT0Xe/g19V/nOOb37
sGOcof8C0rwdXTxOTyKPM6+cLh53O4wn7TmJvKVXkFvY8yrrzEPAQzqM1G/y
ZD6rFHfkfXg37D+EfBs7rzHW7xOtrHYozcekHc9v4Qd4Eh8jcb9/l/PuLJ5P
yHyDddcZv8n80639975lHjzd+xF9+Lv6DnrIwzn0d58E/6ZI62UdaV3gX0ZP
eqbIYcZ3cPvQn+j/g3Xg8OFfiry2V+Tdn4vc/xF2fsm+S4w/ZT/4GHrG4uYk
68F1lhfkF/lCfrH+p6wnb5O/WnvyW6zbXjK2Xol/7/yFxeO0gRSPh8NYHK+H
79TZ6vucS5469YtD+eR865d64jiJ22mR4lU/e3AzWrfGl7q2TtOSsThI+9r9
5i3ytfZUfGGXOMxbwQ/lqSVj6/d460e61No5ek8dCefKCxvtvHVXec44iivj
6z1m/mac91KR8w/Yrz3HWrv8nqm79Br7kd6D6kvy5Ea7Pnl/GufTi8eVL637
s+387q9Fyiu1nsTX1bDPfHhPeG9gX8bfHOq41gG8UuOiXa6Xr6h341F5TDy6
37qi7uY3i+y87+B/eazzPgJPw8dFjjfb75340X7tNv+hjtMaesxbjLu4W4ZH
17lP/zbDeu3TD/EpfvV7xjp4VR4d5S3jCy8M3EPird7PSuwZrX/xZRzWwnrq
svuqyP4230O8qr/GQX/N98EwLw94H4jXx8K89WLeiHtn/VwO89ohnjiv8hl5
9f6SB/PJsE895kl+9Bztkl/h/946s76m6J+G9eLSOBuHrdY++785+R3tf9hv
faTINxvt98qD5mNZvbruUSR5Md73b7Xf43sg1nXlD+1Zb+cr/oyXdsEDNS/W
hzwvX8V7yT5P/pwyNu7oH6m70TjHe0S8apd+eG9Nlozt+yLe7ZeR5m+0TzDu
8q/4MB7GCX3eV6vsz+Cv5jH2L7x3BvtocD+IK/sJ+jz73cw7zXu44oh4dPol
7sUf9lb+Nf7mhz659un2L11rl/2yfFf5zH4q4hc+yvJq6OtqniL/HWrX1T7b
7+bV88B9rWtx6jtHfpRH9F89sR/ownr5YF+wYy2sh49W4Odd3hk9+dvhHZM+
x17ukWy+jZN+Ybd4MP4rvnfC+6v2L6E/qn6gr+JZHtZ/+ULciPdQj8ON9hx5
znEP/n2Xrmo/9tT3un7TJ/j+m2fWW4/wfs2vvG/cz7TrBvD/v3tCPMQ6tp6w
y/eh/4f01qlxM//yrnrFu3GUX+0D3G9+vF/RLw474wVPmFdx7Tt3tE69R71/
7AvFt3zs+893Pf1nrdslfXyO7ydxRX2O8R3n+ejrfIfDEwPv1Dl14PvMPmjv
6yJXfM/S5/iu++cz9JCfEb3Wgfdzxb3+ySfsG97DH+qupx5H383GS/utE+tU
/HiPnGrna1y1z/jJT+Iw3FtZPUpxfqT7F5N4+KI=
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Asparate Aminotransferase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 403.}, {0, 259.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtlWtKA0EQhBdvIoiIiCRqNFGTbGKMj2jU4AMRUSL6SxB/+H+O4lHmCB4h
R1GZ+ga2SCAUvdPbj6ru2cXpx+R1oSiKr7//P6bfZplwW3ieMIyFpwnjrc53
hOs6H8qWX9ERbpm/8oQH2Yeyj2S3EpZvso/t/V1h0+LX7Tm4YrgmPBPuG+5Z
vobwTljOt8OB7PZ8u+gJW9XzcJHw5zPhN31fCuH7Rji2uH2Liw7UDT/ouiEU
71kn+ha/gXPFj/eWv2Xvwwt6kYe81GN5sOOT8l4LpzpH11q1npwXnplf9VuK
L+a3GMhGd697YPWjV1covcPIzhVn9i77xeqhf3SAN+1N5gl+lswfP+aWeaOf
vsWlH3gj/sj8GtVzeM9zVav6Rc1j3lP2Q/oF8i5b/W3ztz6ynvCPXszHqhAe
VA86kjfPq/Y49Ko291LeD+piDtDJ+s580U/T/NFZ92Xmm7jUzXvUQ371Ga9k
a/4C8aiXe5L5JC/50AUe6YP7GX5Ut/OT9ePeoX/t1+zZ/BQvPur5icVjz6gL
Pdkn+tecRr4Hfi93zL9r5+gAz9zz9aodJrL9+0Wf8Mn9Td2g73HPbPRtlL+E
5pFZ
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Asparate Aminotransferase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 115.}, {0, 93.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtlFsuQ1EUhk/MxIt4EKHVupTa7nWnKEKirvFCn0TjxQ4vHjuEMwRD2EPo
EAzBEJD9/Ts5K5o0X9a+rX+t9beDV53m7UCWZee/3z/GT8lFjsFhEw/BEViH
1cj8kfjh/9gdEC/B2UivWO9WYBmOGh3s97uR4Yb1OTgBp2CNcxfwGEpPg/iS
eAeqH+PsH6KXfd9ifxeqH+gNR5zTvupUfctFvWGPGPbfIvNn1h1kLve9yM+P
Yl1+A+r8JNyG00Wdqc6ayaN+q596p25ivVcxseYhH2m+JbOOjuQD5V2FzCf5
QfvSP2N0SYfqwGeaY9qXDvzrOvAOPWtwhXPqzzxUP5VXflOecnHd4S+/D6Vv
ESrvGbHtr+ZQNeu87/UOerzxV7qnOrbMPfK2r4nVJ/rs5E/5i/tpPpoHc031
Kb/6beuhzjR/fONPi/mcfn8Lkd+vkb0X8678UDOx6Ztfj/xSvdKxSSw/aN/8
XlL9J5EBvXnbnGc+3ffIPrpD0+jGZ/ofCE/koS+5/MM9R77Qcj/k6YR4
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Asparate Aminotransferase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 230.5}, {0, 158.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtkssKwkAMRQf/RBApRUTrW5TWoi5qXejCjTvRtb8wn64y5w5MsFAO6TS5
ucl0H+/rq+OcK77vj+GZVYF5oG/h+X/saljAIRzDE1yStydu4AIOYA/24cbU
L+HOnFem3iT14dboK099qN8M4t/fiFemf5s/gjWcp3mxztPU05ylT7/+QnyA
8idf29RPrGf961z+M0PNeQrx545G1/6fm1h52ktt+pFP6vnGfJdP9a15ao53
qP3Ll+6X9KSPbtyTdLhfXv7UN/rxXipP+mWMPzQtOKk=
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Asparate Aminotransferase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 108.}, {0, 79.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, {
   3.783353362738143*^9, 3.7833534081262536`*^9}, {3.783353461238553*^9, 
   3.783353469896366*^9}, 3.7833536378563056`*^9, 3.7833539356288347`*^9, 
   3.783531204987075*^9, 3.784107693685521*^9, 3.784139067178313*^9, 
   3.7841394700676765`*^9, 3.784389374804076*^9, 3.784389427942655*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"0c17ec7e-7c2a-40ef-bc36-354b4fb70aa3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.783352910835988*^9, 
  3.7833529177062683`*^9}},ExpressionUUID->"014ce13f-7a6a-4edb-b35e-\
c8d14420e06c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Aspartate_Aminotransferase\>\""}], "]"}], "//",
      "Normal"}], ",", 
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Alanine_Aminotransferase\>\""}], "]"}], "//", 
     "Normal"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}, {
  3.783353974157543*^9, 3.7833539958240914`*^9}, {3.784127644509721*^9, 
  3.784127645114375*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"eb4d0bcd-58f6-4c10-b0b1-0a056a657c9b"],

Cell[BoxData["0.7919656848536132`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, {
   3.7833539880420475`*^9, 3.7833539964559216`*^9}, 3.783371881497447*^9, 
   3.7835312176084843`*^9, 3.7841390735886345`*^9, 3.784389431325816*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"0d0dcac3-868f-4555-ae83-864af957b8b3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843870959865522`*^9, 
  3.7843870995665197`*^9}},ExpressionUUID->"8100133f-bd92-456d-8c8d-\
d82913b9dc1c"],

Cell["\<\
A linear relationship is observed between Aspartate Aminotransferase(AST) and \
Alanine Aminotransferase(ALT) which shows patients with high AST level also \
has a tendency of high ALT level. A high correlation coefficient  is obtained \
between them which shows us a possibility that one of the variables can be \
removed from the model. However, an increase in either of ALT or AST or both \
does not indicate the degree of liver damage. An increase might reflect a \
temporary insignificant liver damage as well as severe liver damage with long \
term consequences. Generally an increase of more than 3 times of normal value \
of AST and ALT signifies some degree of liver damage either temporary or \
permanent. Therefore we need to keep both the variables in the model.\
\>", "Text",
 CellChangeTimes->{{3.784139206316882*^9, 3.784139412879259*^9}, {
  3.7841394872685533`*^9, 3.7841395644145026`*^9}, {3.784152806250573*^9, 
  3.784152821485673*^9}, {3.7841542236959963`*^9, 3.7841543597467546`*^9}, {
  3.784318793036738*^9, 3.7843187972395906`*^9}, {3.784318875005913*^9, 
  3.7843190961380844`*^9}, {3.7843870915885363`*^9, 
  3.7843870924756527`*^9}},ExpressionUUID->"f2daa705-5d3f-4e6e-88aa-\
6776b37bfec2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Relation between Alkaline Phosphatase and Alanine AminoTransferase\
\>", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 3.7833526251942315`*^9}, {
  3.7833532260579643`*^9, 3.7833532604914556`*^9}, {3.783354051658202*^9, 
  3.7833540607719774`*^9}, {3.784127651620673*^9, 
  3.784127655395507*^9}},ExpressionUUID->"9be95d45-5e07-416a-a630-\
4a5ea783e17a"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Alkaline \
Phosphatase\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Alanine \
Aminotransferase\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.784389440579494*^9, 
  3.7843894614661927`*^9}},ExpressionUUID->"33a2264b-ab67-4295-92bc-\
c01e314174e8"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{{3.7833526388667765`*^9, 
  3.78335264779252*^9}},ExpressionUUID->"edc0e92a-68ac-4a0a-b905-\
b545d953e3c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Alkaline Phosphatase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Alkaline Phosphatase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Alkaline Phosphatase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"5", ",", "6"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Alkaline Phosphatase\>\"", ",", 
           "\"\<Alanine Aminotransferase\>\""}], "}"}]}]}], "]"}]}], "}"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
  3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7833532887005687`*^9, 
  3.783353406690621*^9}, {3.783353456455768*^9, 3.7833534679728518`*^9}, {
  3.783353568311499*^9, 3.783353569679146*^9}, {3.7833536357888155`*^9, 
  3.783353635984765*^9}, {3.7833539313499126`*^9, 3.783353932929514*^9}, {
  3.7833540814514527`*^9, 3.7833541135132647`*^9}, {3.7841077093096*^9, 
  3.7841077433569975`*^9}, {3.7841078266662474`*^9, 3.7841078498456926`*^9}, {
  3.784127664999997*^9, 3.784127690654794*^9}, {3.784139573659388*^9, 
  3.784139582633876*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"cbb27dec-74b8-44c4-9139-61c6e09974a9"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1mEtzVEUUx69+gixZjjvKsqyI+EANNmNE8Rmi6Cg+rsNDICCDz1BGbaMo
voeyXKgL70fI0uX9CFmyvB8hS5eW9u/XVd0M2Zyc26e7z/N/Ts9d08vrZ+5s
mmb1jqb5j/7/d/NaSP+sJdp9Dv9Cov1Z+HsSbc/BPwq9AL0/0dH7icZnEg2s
x2PwM+QfR35ayrcfsX4m0aWv4O9DXv0eTHQvwr+Z6HARfpn96DP5YTHfvIde
fyTav4s+R6GnoEfK++Nric6054lEl69wzlulHTGg71X2QfspcmN49N/8Hf48
68bnMvzLrBOPeILv3K9/a37vY/gn2a9948W88dX+Ze1dTbT9DP5FePV5NtHB
/cR3uIQ8+dPiH+NpPjQHuY/4dsSlX2f9EPLoE7i343zjt6u+z7NufhKP3Vjy
Pft78qlH/554hQ+gV8vzXI/EK25wr/F/G3njcajSh3zSX+bhXPsmyHk/tDHf
x3zXnw8kujQr7cv58HCi5lnEr/ox/MV35Pf9Vup7/Vf0hLcurP/Rh9z/Hfta
7jV/n0rU+onP8d16Bi+Mh/UfwCPzcXKj1Cf7d30x338Cj/979GxOLObjJjz5
GM6X/OD5+DsY9wOJZjwkH/Wf+ThssX4cKr4eXMxne8aJzr5F7p1Ez82xg3z5
e5t16j2K57fh8/l3c47+oN6XfmYf9bzzE7z5pX8eq/QjXoP5+fRiPuMZ+mS8
fwP5X5DDX/MvkR8jb7wOJxrMt4fgN0p9M/7g35H6Hyj171/ifvsD+izbn/Qf
dRnBD+uvfx05+wPnzW+U+vZfw9s/zadji/n2NDz+3r1Srg/0U+Mkrmhv63n0
+5wP2D+cKvUL4FgU/6esOw+Yr/TDedUvGnCysd7pk7k+jAf7rZ/mEdaxL1Cf
Hfp16LHVIU8+RfqdfdV6CsfL7+Jh9q/54P33QvUv/Sr7EzwRH3I+fsE68WnM
Z+wL10r5m9/z/ZVE9/+IPPm7Rz3GaaLGOzgfMM/o3zn3d+qlH+jPbRWv1vmA
/Ikn4bG/FY/BF/G0pe7aWSmf8Uu8rear0YVq3bkJ/aP+3c+68SAf/6H+m5VE
d+yLnJP9QbyC82UdL+qx3Ya3X1T9tMar7D/yR/wSDxryqaWujIP4nfFH/LDe
iI/zs/OV847zX7dV3jsjHtbHmnOm+OV59lf1OVrpT73m+nA+Avd8D2jfLn7N
+eN7YFrqn+dD8UB78G/2D/o14hH1k/Gb+aG1P61U9tiPnL/oPzvKj/lufnG+
759sp/Hg/Ea8PVLxzNfOcZmfwtt/lHf+Yz2+muhom/vp5znfDlf6iCdV/ei/
Efsbzr0lvuDb5jfs49w16qlj/wS+B2fyPP8p361n/D0HzwL37oFnDfk3Il8z
/lqf+hP/ReajUL2fJn/CI9fhT/Esqt9qaZd4lP2PP7tqnuyq/jmT9z1iv8bf
ef7mPucw8Xzm+5r3aMZT8ci5mPzI/UT9TpfygzzzWSveibf2L/BI/J0xpwTO
n1znfOyL6kHcevpPbz4zDwTl+T4y/r6/1J/5pcbDYVqeJ27ov13xA7xY0j7y
vWf+yPXue89+ulHyzjc9dvn+dL70vaPfzc/8/mN+NK6N/XfMedaf+Gg+0B/0
h/1ZPDIfajzOv5f4zj1Z7eP8W+YX8DjXPfnQ1/hq/2R/7pf2V/WhnpwvzNuR
733xl/t77POdav/xPWx+i7fid77P+VM7qa88P4i/zh/gQ7zNvNZah/YP8dH8
pH/6e81QzTH+zhDIxyXirr9G6BGQd27N/gX/B+NB/ba+R9DX+HTGnXNb6jHn
h/6yTonPyPcH+bPP97Pzr+8j32/V+7Ov+l/0dwbxUHzmvEb5lfAvAgpngQ==

           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Alkaline Phosphatase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 720.5}, {0, 259.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtlVtKnEEQhRtXkCWMEIJIkDEZJWa8NObioGJERFAU2vGehMSo40MQbUwW
4GMe/0cfZwm9lH8JLkFNf6ehmxHCyfHvrjpVdaod7v5cOxgyxvSe/j3j/x97
YuN/JiO684h+JWJ9GDFsRKz2OT8W0R7DF0EHtoh3BH8L6v6niP0/8KmIzV/w
DnkV/33ERjePX3+Fv0OPvo9Qh/hr8AKcJp70tNH7Az5R5LODediDzwzm7hpO
fY5++i8R7/9GrPh9/x/n6bdX/5hHg3NmHs78/OeIVudb+XfzhnO6P8t5cfpr
D/L41VmePyge9xvqP/Nq6D5+Crtw+lu7nMsPfh2+CY6DO7meF9LzgXjKR70e
v8i/gfN+mXo0b83zNNcf1I854uMHv8T3Ht+pP1zBmXvqr+rXPJi/kZ+ZR2Df
zMuITv5hv4LqQ29NPD9f5JMfy3lv5fnlv5RfXH6VHvxfq38LnJe+dqHvVVGf
4skf7F/aZ/Q7ceaV/DhKft2XHu0P9Rqd1z7/zvkD89V+JP/Jv5pPk/xFv7z8
y/tSSy/vmS/6aaRX76P8hR5/C2ffnPyI/1L96A3aj05xnnynei8/oq/wT6X6
8GOaD3oq8VXy6z77Zb+Tn37LH0F7eZnHS37CL07+YJ/S+8x+p/6xn3fqF/NJ
+8r95Bfq8dLLe2/3cx7Qn97TbTh+CoVfK+lFf/p7xftib3JuvqV4j1hhxak=

           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{94.5234375, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Alkaline Phosphatase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{100., 450.5}, {0, 93.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtlEtKA0EQhhtP4NJl3GUhEsVH4rNVBImgMQsVdDEmxkRF4wMxurGDLlRc
uFHiQpgj5AhzBI8wR8gRfNRXA9MYCH/+qemqv6v+ymClWa71GWN2f76/+PcJ
6lZ+5ARt1eOH8CHB6Ag+IVi6gJ/8z4Nr+BJ4IOjgtsbzccHMPnyYetV03KI3
4j2n+scEQ9U7jZ4P3t8S7D0QXxHsvMDXyI8+M0K+T+oQDy6JrwvGqg+9IXoc
cePdL9L86LXarxLn4SF9i/aIZwVz74LdR+ocg8V0fTMp2H8DL1BP46OCX+dw
Sz29j9/POeJ6f/Jl6mnuPL2mkq5nGiD9ivFJ4rcmnPlYLx5pvSnqqX76G9/C
ZwQDzz+h+gv/thx1mEuvTd5lUOc4T33VTz/iKzh+SeabFyzhN7fB8wq4KNi4
J77DeY0XvHzotUE6/1k7rSfpL/Nz6j/2Qf3rqG/ph/Yp1v1mPgNv8KLHmY85
BbOeXuon/tf7qD78mfh/VlD9r/UMutyCYL4j+Mqck/3AD2Etza3nT72f7m1J
+7FK3mfOEQ9UL/7NKN8WzD5Rl7kk+5BP3+frTrDb8vTgn4j9j9h7/X80uudl
OPsYbdpvd3GnJA==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Alkaline Phosphatase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 827.5}, {0, 158.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxtkk1qAkEUhAdP0oEgErJxQqKRQNpgNoFsXGQ9jr/RDLoKZGUfZY7iEXKE
Poo//dVANwpDWVPPeq9876bcjuetLMvy03PGy8ctbfhyF7D+C+g+r3NTUp+D
a7Ab0M/h/YB2Bv/g9z/wexv3b9Oviv39Cj7EbwO3yTwP6N/wQcCD/Ef0W8A7
4JT3X/SbxvMX6j9K+Bv+qn9G/4Urt/THpF7zav53dM3XC1jLhzxuAk/zozf5
O0meW3T5ke9/D39BX8X1roq5kf9rUs88B+n4OfUjv9/F+YzyPFHPHrR/o/1x
X3Xan/tzug/5cV8F96u8Rvtmn83/S3+/bPgRHeNS5A==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{86.17968750000001, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Alanine Aminotransferase\"", TraditionalForm], None}, {
          FormBox["\"Alkaline Phosphatase\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{90., 334.5}, {0, 79.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, {
   3.783353362738143*^9, 3.7833534081262536`*^9}, {3.783353461238553*^9, 
   3.783353469896366*^9}, 3.7833536378563056`*^9, 3.7833539356288347`*^9, {
   3.7833541157806826`*^9, 3.7833541205035086`*^9}, 3.783531224148737*^9, 
   3.7841078534288125`*^9, 3.7841395850904617`*^9, 3.784389465341219*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"ee97365c-1232-4639-af7d-7c7628fb6027"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.783352910835988*^9, 
  3.7833529177062683`*^9}},ExpressionUUID->"44603e8d-39c1-48e3-9e79-\
5748391bf33b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Alkaline_Phosphatase\>\""}], "]"}], "//", 
     "Normal"}], ",", 
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Alanine_Aminotransferase\>\""}], "]"}], "//", 
     "Normal"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}, {
  3.783353974157543*^9, 3.7833539958240914`*^9}, {3.7833541496383533`*^9, 
  3.7833541531894484`*^9}, {3.784127697282996*^9, 3.784127714653097*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"d7b2a6b5-d7de-4344-b602-03a4c71576d6"],

Cell[BoxData["0.1256799508676732`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, {
   3.7833539880420475`*^9, 3.7833539964559216`*^9}, 3.7833541541092215`*^9, 
   3.783371887235114*^9, 3.78353122871163*^9, 3.784139588976248*^9, 
   3.784389468764352*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"5f031258-001d-4bc2-89e2-6c1800b3044f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843871147442627`*^9, 
  3.784387117606411*^9}},ExpressionUUID->"9a5bb204-e65a-429c-9516-\
bc4f7db55e0c"],

Cell["\<\
There is no linear correlation observed between the two variables.\
\>", "Text",
 CellChangeTimes->{{3.7841395936355643`*^9, 3.784139633220043*^9}, {
  3.7843871096818094`*^9, 
  3.784387110584513*^9}},ExpressionUUID->"e1c0295a-77ad-45e1-8ed2-\
06327b02017f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relation between Total Proteins and Albumin", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 3.7833526251942315`*^9}, {
  3.7833532260579643`*^9, 3.7833532604914556`*^9}, {3.783354051658202*^9, 
  3.7833540607719774`*^9}, {3.7833543299277067`*^9, 
  3.7833543448159666`*^9}},ExpressionUUID->"2731bf0a-438f-4e9b-b046-\
4928d712f73d"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Total Proteins\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Albumin\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.7843894745189075`*^9, 
  3.784389496117482*^9}},ExpressionUUID->"33e46e0a-743e-44c4-bd19-\
9b40dfd6aff7"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{{3.7843871512412643`*^9, 
  3.784387162175618*^9}},ExpressionUUID->"db260ddd-1f5b-43d4-9004-\
4b818edb5153"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "9"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Total Proteins\>\"", ",", "\"\<Albumin\>\""}], "}"}]}],
         ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "9"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Total Proteins\>\"", ",", "\"\<Albumin\>\""}], 
          "}"}]}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "9"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Total Proteins\>\"", ",", "\"\<Albumin\>\""}], 
          "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"8", ",", "9"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<Total Proteins\>\"", ",", "\"\<Albumin\>\""}], 
          "}"}]}]}], "]"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
  3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7833532887005687`*^9, 
  3.783353406690621*^9}, {3.783353456455768*^9, 3.7833534679728518`*^9}, {
  3.783353568311499*^9, 3.783353569679146*^9}, {3.7833536357888155`*^9, 
  3.783353635984765*^9}, {3.7833539313499126`*^9, 3.783353932929514*^9}, {
  3.7833540814514527`*^9, 3.7833541135132647`*^9}, {3.7833541898745966`*^9, 
  3.783354263951825*^9}, {3.7841078678091516`*^9, 3.7841079389233127`*^9}, {
  3.7841396422705913`*^9, 3.784139649823643*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"79cf1023-b5ce-495c-b85f-66619b1996a9"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJyNWFtuE0EQ3DwdiIkfcZz1+rUmR+AA9gcn4AhI8Mt54ExwE74RKBFCSU9V
q2o3Cv4Z9UzPTE93dXWvdx+/fPh0XFXV+6Oqehzjtzl8+/r4e3UIeXX4/PR7
fXj39FuW8bKM6zKeFD3sn3T0Y/62jGdlXJd7Loperveftz78+P74O6V9uD/0
FmUd503K/J996M94vsuxb1Xmx0WeFfn3PvSuy7mDsm9p/oH9R2V/zfUYZ7Qf
9sLf6q/RAffFvnOeF+PD3vVjXBR7h7SnBLYj6/sqvj/GYUdW+6uyrynjaVmf
U46xLu94w/eG3hXtxXrMN7wP9sLfMd4UvWPao/G4IZ6AZ+Agzm3oL/Vn6iMe
cb7jf92JF+5zPAOfiu+l2TshXvw+4DD07/fIH9gL/Kl/l2V9XPZnPGJ+zvuA
f8XHDWXoK37nxCP8DTzDfuAP8YQ+8KByY/6eMb6KnzOep3hYEi/wN/jA3+9y
nFcb/uZ2X8qKv3Pji6m9f0y+g739593SXsfj/+XvinjG+5Cfyj8er4c98Ir8
cNn9ifPgv37+W9J+1Uc+zIyP0/8uI9/gT+AReEM8NH9mfJ/6A+8Fz//cq13g
d+Df34c83Fp9HNt7prwPeHV+C71hRwYfx/xf+kf5dmb4Tjn2bWiXxm9A/gu9
K3vXCfXxPud/PW9CPg/5kvbAf4if4ql9Jp7gs63Z35rseNqZPdsX8DctY9XB
a0w3ln+op8kXyCfljzPmu/cX3q+oPQ1l5fesn1jX9wzJJ7qe9VnxDPxsyBfA
N/yL9wIfGp/KeAR4v7M+pTVc3ZX98Hs3nloPXor3yvCW+oi/8mHyMfgZ+0Mf
+9M+7Ff8Ir+mrE8x33Ie/AA8Al+4D+u4T+0ZMV5afxxfyXfAg+Z3zfzV/Bzw
PMiONz9P8VV1ZOBH4+H1v7Z6Oe/0c8pvO/N/9le4X/uNhvUnxl3Rn3f8D/u8
vmh8Wp4X+o3hfk18e/+F85A/yCetF4nn/v0L4yPH98LsTX3gyesp7oM/kL/q
nxH5XvdvjP8b80/WK8XzgPu031kYPyYfOp6QR7H+HH8mHmEv8tH7Kf3eOWWc
YvzFfkHtc/7N+oj3xvrQ5Au+H/0G8B/r6Deyvni8PT/wvYD34j7g0e2P+ewP
9PtgSLzq94z3Wyv6CfHWfE2+AD6AJ7wn5Gvrl73+5X16Xm32o/9Ff3Zt+Gq5
7v6I9VvLlznPB37U/g3x7t+Xzi9aTxH/lt9j/etZ/z3+/d/fbxn/uHdHfeAB
8VG/5/8N4DPNV+eTivjR/nlr+Kppj+LL/9/I/3NgL/wZ88fWb5934oP4KT5W
lq/uz8Qb7PX+0L//YR9k7cfQzx9ZPOHvLfU1flmv+vPnnvzp/lF/duuh4qU2
Pm4sf9B/dL+f/D7Y5/1E//9Vl4d/bcspxw==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{2.5921875000000005`, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin\"", TraditionalForm], None}, {
          FormBox["\"Total Proteins\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{2.7, 9.6}, {0, 5.5}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1lV1OAlEMhUdERUTlH4QZGNbgAmbW4BJM9NUnF6Nr0u2YGI1RaL8zuQUn
IU3vbU/b096yuX+6e2hlWfb899vK15ftV9SPu69fZ7svr29334XrU79v+Xnh
5z2Xcz+/ljT7n+r9bfuN/fystnij2s7bbjcXvuEt3O7c9dJlX/lwb7g3ft5x
XPCu3G7i+qnf5y57fn/p8rMyvInyMTkO+TY69Zv/0Z5ucqb4ab1dx5mGeI2O
P3ybvlS/Ut6/qrT+rupP+V+KH/iGD85NflTUA7/oZt9R/txTH7rFoz896eRH
P8EzfRz4mYd+j9wuc7vc9aHbL0L/16HeOE+5eEzzw7/w+8E//s28ml+p/oCX
zlvhOv7wme3hW9y17E2ulA/xDHfg92XA34g3+GHu4Q/d7MoQb6H+odMv81+J
P+ph3tgX8AHf1Ef+9J367Xyo/qd4S+XDezV5rPdNPOYRf+7hi/yo33BXqp/9
EvcN/TzM51D9ZP+xD+Ab/Mg/85TuUd5XW/HZJ+k+jvzGeevo/bPfTc7EH/zG
fprfSXhPfekpX+vwXmI+s8BnEw++TH5XcZ+QL/sX/5T/UviH32suPLNfBPxm
Xpk/7tP8+b8oNE+/wgphTQ==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{3.6250000000000004`, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin\"", TraditionalForm], None}, {
          FormBox["\"Total Proteins\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{3.7, 8.5}, {0, 5.}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1VG1Og0AQXWujtVahaCillMIZegA4g7/9ZaJ/PY+eSe/iXxNjFOa9R3ah
m5DJzM7Xm3ls/fT68Dxzzj3+f5089mfXvvRn2br+FJCr9vOjOznkqjX/Cv5x
y3i7X5zQ18jnIDPIBfxS6HPkzRF3PfI3mUp/f+vOGnl+GuqsZ/kS3DvIBHHf
DXXGW92t+rc0FfqJELcN+i1gP4Oewv9S/TI/8fCe/rwnfu6D8zH/c9izAF8G
eRHML4JfqXmyf/O7Rf5S+yZekzH8hn2bvQ72QL5wH3vlM71CHfKl1h7Yn/nd
6J68MftB/VD3+89hvxL//Po7+U/jGfozOfDf8m00P7u/17x9vIyvYb/TPsgn
1ic+1pveV3TivlA9sx/Un8l9wJ9hPiY34i//Z3/fZYAnF199/sxG+zc/4v7F
/5UF/1Mh/NyDz/9kFM/+p/nK/PM2rEc++O/J8N7471+seO6X+IkvfA99Pi6l
k8/0s/ivhvP17YXw8T3hfLlf8ol8Jv4/5rXiZA==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{3.5171875000000004`, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin\"", TraditionalForm], None}, {
          FormBox["\"Total Proteins\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{3.6, 8.9}, {0, 5.5}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1Um0OwUAUXE3FR3xUUZRSjsABumdwBAl/nYczcR0/hZqZl6h4yWYys/tm
376368N5fwycc9v3KhEx9ddLGS1/+kTioTd/+P1WxsLvPtGnvqDeIU/oV6c+
oh7Sb0ps23nwgL4TOw9MiZ2/ftCbzB+Th+QZeWz5qg/5qj+iPicOiBnPaX9F
7BpHPTF5XsmfWH3wSa1fQJ0fst45sUHftfkhf8n9gfUfGFk/NC/5ql/gM5u3
3qv7xDUf1Jfavu4H9ui7tPeon+qHEPqjAGp+zuqD/iz0/mq/vu/fEOWf//xH
1af/qv/zPaeazUf+QM0z8i/7DgTH
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{4.4265625, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin\"", TraditionalForm], None}, {
          FormBox["\"Total Proteins\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{4.5, 9.2}, {0, 4.9}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, {
   3.783353362738143*^9, 3.7833534081262536`*^9}, {3.783353461238553*^9, 
   3.783353469896366*^9}, 3.7833536378563056`*^9, 3.7833539356288347`*^9, {
   3.7833541157806826`*^9, 3.7833541205035086`*^9}, 3.7833542656193914`*^9, 
   3.7835312343603897`*^9, 3.7841079405428925`*^9, 3.7841396520013757`*^9, 
   3.7843894999124928`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"ef243b47-e227-46f5-84c1-34feab09d088"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.784387178725485*^9, 
  3.7843871830232067`*^9}},ExpressionUUID->"6f2afb8f-ef18-4a70-ad66-\
fdcbb1ed693f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Total_Proteins\>\""}], "]"}], "//", "Normal"}],
     ",", 
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Albumin\>\""}], "]"}], "//", "Normal"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}, {
  3.783353974157543*^9, 3.7833539958240914`*^9}, {3.7833541496383533`*^9, 
  3.7833541531894484`*^9}, {3.783354273505388*^9, 3.7833543008429346`*^9}, {
  3.78413965800294*^9, 3.7841396589703836`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"6395c730-5b98-446c-80a7-36e04247aa38"],

Cell[BoxData["0.7840533353871918`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, {
   3.7833539880420475`*^9, 3.7833539964559216`*^9}, 3.7833541541092215`*^9, 
   3.7833543014147806`*^9, 3.7833718582342787`*^9, 3.7835312389477606`*^9, 
   3.784139659543051*^9, 3.7843895035715723`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"de8296ed-5044-4d64-bd1d-76f850b5c370"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.784387195376462*^9, 
  3.7843871980692515`*^9}},ExpressionUUID->"20ab2801-052f-4a25-8749-\
566a8e7c4afc"],

Cell["\<\
A linear relationship is observed between these two variables with a \
relatively higher correlation coefficient. There are many types of proteins \
found in the body apart from albumin and globulin. There is a possibility of \
removing one of the variables but both the variables will be kept in the \
model. This is because a decrease in Total Proteins can be due to decrease in \
amount of the other proteins in body and not always due to decrease in \
albumin level. \
\>", "Text",
 CellChangeTimes->{{3.784139669433406*^9, 3.7841397028995295`*^9}, {
  3.7841397777784185`*^9, 3.784139820872526*^9}, {3.784140076371584*^9, 
  3.7841401661791477`*^9}, {3.784154378983987*^9, 3.7841544681489506`*^9}, {
  3.784154748176186*^9, 3.784154781517823*^9}, {3.784154834076641*^9, 
  3.784154850403621*^9}, {3.7843192471700134`*^9, 3.784319248826146*^9}, {
  3.78438719049251*^9, 3.7843871913796263`*^9}, {3.7843897424672966`*^9, 
  3.7843897446747694`*^9}},ExpressionUUID->"93aa3701-c131-4619-b981-\
15cfe6c3c540"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relation between Albumin and Albumin and Globulin Ratio", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 3.7833526251942315`*^9}, {
  3.7833532260579643`*^9, 3.7833532604914556`*^9}, {3.783354051658202*^9, 
  3.7833540607719774`*^9}, {3.7833543519621367`*^9, 
  3.783354369761244*^9}},ExpressionUUID->"cdfa4bed-35d0-416c-a092-\
55f5b09ccdff"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Albumin\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]A/G Ratio\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.784389509514079*^9, 
  3.7843895240904236`*^9}},ExpressionUUID->"f00b5c61-699b-482b-a161-\
5e06d3c8ef82"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{
  3.784387208184575*^9},ExpressionUUID->"d626c319-c756-4dd1-86c3-\
075e59414a6d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin\>\"", ",", "\"\<Albumin and Globulin Ratio\>\""}], 
          "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin\>\"", ",", "\"\<Albumin and Globulin Ratio\>\""}], 
          "}"}]}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin\>\"", ",", "\"\<Albumin and Globulin Ratio\>\""}], 
          "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"9", ",", "10"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin\>\"", ",", "\"\<Albumin and Globulin Ratio\>\""}], 
          "}"}]}]}], "]"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
  3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7833532887005687`*^9, 
  3.783353406690621*^9}, {3.783353456455768*^9, 3.7833534679728518`*^9}, {
  3.783353568311499*^9, 3.783353569679146*^9}, {3.7833536357888155`*^9, 
  3.783353635984765*^9}, {3.7833539313499126`*^9, 3.783353932929514*^9}, {
  3.7833540814514527`*^9, 3.7833541135132647`*^9}, {3.7833541898745966`*^9, 
  3.783354263951825*^9}, {3.7833543874961805`*^9, 3.783354448566086*^9}, {
  3.7841079489007616`*^9, 3.784108007953868*^9}, {3.784140178014384*^9, 
  3.7841401856799536`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"15e5da50-3243-4fc5-ad95-c5c0bd1ce00f"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJyFWDtsE0EQvcS/sx3Hn0SUSHShpkZ3BVJoKEhNhQQtoYU6NTW0oaFJTR1a
aEAiUBA5MkqIYgIWSZTgKMLn2TereesVbqzx7s7O582bWd94+GTt0XySJHfm
kqT4fvWy+NTzrdW9Z8tbB9nj6aeRP18ufhlmt6afZp5MP7+dXMrl3NdMvrv5
h/fF5yTYL+sVt/8wk9/TXPYNdH1nc/12Y+co0CffZXd+T+8XPX23nrr9Q3f+
ImP98j0KZNHTcfb8cfJ5Bv/k91oucTnT+Nj75vKNo/tvr28MdB36Yb+NR53i
2c6fTrzfXD9156vk/yXZ09Z10bNA9ican5iM+IieBbVntpw4//fd+bKeh4z8
yncrRx7k3KLGD+uQcR/sR7xxv+yb1/uxbv1P3X7gr6vxRLzsfanqRz6g3+bv
UNfPVh682D79offZeKQUjzSwFzLwYv3z98n+cYb9sNfit0X46rh4nEfyMefq
axDkn2WL7xPFo8VDWfEP/EHGfhvPahBPu3+e1isUj5rKwAv8Zz5g/2P4lN/P
9T5bz5XAH8sXvXwChgki/gb8AXsnZDBhhONAH+zl/CK+sXqFDDzb/HP+qhSv
y8ye7+ZTel8+i8il/HUBl81+UO/Mfxafnt/fFeHZ/ql8LPp3A35gmeNp+d/j
2cbP+wdZ4r+bWZz2ld9tvL1+0dshvqq7+OwH/QX32X7TytemBnh+Hhbt4Wik
MvIn91yR/Ynjm77mg/Fj/epQPdSo/hapP5cC/7i+EB/gA3ETuUn1UA72Qz/s
wzrzGa/Pln19WHu8PuZfG5+E/EsD+WD8ZvTx3nEE78xfFeLzCukrB/Zzv+D9
XD/2PPf3NFr/8Bd4Al9wfC2/L2p+oQ/ngXfsF3lJ9aFebD56ZG+H9lfJ3//l
uxng3a63g3WeR+16j+qlHdQX5i30J2t/j/R3if/9/Iv77P627gd+sJ/xBL5D
flHf3E9tPGpB/7R8XQ7mE5uP//UfjqfnC84v9Ft8JORPO8C/5Xfm5wbF95rT
N468P1qU7yb190ZQ75Y/PZ5YH+rHzmd1so/nTZ7fmK8Y383ofjvPxO5Dv/oU
vB/4PPif42Pze6X9DvllPmRZzofzM/xrTAfUX8q/tn+kdN7jEfV4t3i+rl5E
5qky+QO9fbUP89rs+NUJnwuUL8brUOMt6+fu3s9qj7yvv0f6Y8jnPJ/IfHUa
8Af462axujLUfMp7yOPT9iM/bwHPot/3F3nfjjXfmO+AJ/gp8pLKHB/cZ3FZ
Iz4oBe9LxhPsxbr9P6ISmU/9e8Hiz/dH4J37Ne5jfpmd/7Cfsb5Y/+P5C/m3
eOrQ/JCo/5YvRxE+blJ8fD3xPG3x1Sc8+vuQL65/a+9I+6nlV/BtNZ+dH98/
bP4HkXhyPnw9z+aHDvEr5re+9l/4G/Pfxo/lxNXfN33fy3z/JfreifGLxQvq
4or+Hwrfw/ie/X4qUz+pR/sZ4/8fgDRuCA==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}, {
          FormBox["\"Albumin\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 5.5}, {0, 2.0999999999999996`}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJyNVT1MAlEMPhHhwOP4kdnEzd2ZvLfp4iCzk4mu4uDi7sysqy4uzMzMuriw
gkaFqARULhDUeHd9LWlfSHyJeem17/var7VsHBxXDxOO45yGf9F9FJ+C3orP
p4J7Vd/dRudNgT+h4X5WTnw8fVLJtq9q7yY+ry8vovNj4n/NPTD+NOEDbtLE
jwgf/I8KvmeIH/gKGu4h+WP6SmD8rsjX1zvds3Jje2rsFL2HOE/gTVW1uX7+
utez6sV8+fukeL9k7I5lIz/PL2vVD3o+WXqg3vA9UNgvtCFupjBfiY/6cz5f
9MMjG3HrrfHmfv2B9OX1uzoIva3xkPyIL/uB+XP8rIUn/ThH2G+Mh9sR81jS
XAff8H8J254nnF/O7wt9izocpnCigoXzyPs790t9wS5QfnA7NC8SH+N5P4uE
B9+L5Md4Xt+afpndjO53ByY+J97nLD6utyfwsd990o/zpS09kA/rw/rBLpv3
ExNfIj+f3z7lw/mWyY988j3mg3oh36L6uT4Z4fcIX+qJ/cR8cB/wfTL//5X8
XM+JqTcp6ksJPaS+nsjXJX6531E/7s+L+lYsff87nzIf1DNez90P6/cD8L7V
dS1aiB3aJ/F6bg7E70ef9EN+xOf7U86zK/aHa9XH83fF/ExVvA4abWue/gAi
+Md+
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{1.34375, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}, {
          FormBox["\"Albumin\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{1.4, 5.}, {0, 1.9}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1VD1PAkEQPfECBx5wKrE0scPaH7DbWVlIfZWJtvb21tT6D2ysrbXVRisa
ozF+RUIAhWAkRvdmZy77Fja5TObmzeeb3Y29w9Z+IQiC9P8z8iA7FX1zbU5X
BdmJNcm+ov+xPj0xZ6AIn4A9svZ3TydcAHok/iRDTXFf1FZ2lsCO+EgT7tPm
m1q/Jy8f2XOd5LfFPXj+XD/Pg/7XbX09qZfxFG/Bxu9YfAnmM1Vo5/hsb5xv
Px417hXzwf6EX7T6G/TXsfiivho10/bls9T7+nM2uN3pyTy5f8LXbD9j4dvl
J+cX+Sa5prlu5oP543hsJ4n7siL8Ud4qzHsZ8mE9NcGTfxnqjz089zt7fxPZ
b7f+rszP9S8CPvcnuQr7md8H7o/xzBfqLv91Lx/F/ZrDbwX2vQz3OwS+ErAn
UE9J8CQLmu8P8k/y17tPbj/M70T2H/1Z5/rHZr1HfW9fyT/vZ3Y+fE9CmFei
N0345gT4zd8rN1+sDTptD2Xebr1V8Oc67sR/3v7yfPl+8z6571asWxfrxx+7
ffUHMDA0Mw==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0.9296875000000001, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}, {
          FormBox["\"Albumin\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{1., 5.5}, {0, 1.8}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQPWsmCHA6QOiP9gxgwAHlv8TgG4MBv8PDKpF17g8/
2Z89AwI8DhB1H+wh6lgdIOJvoPpZ4Pw0MOBygJjzGcpnctgh1/o6cMczuHoI
/QLK53HoP/RVI6b/E4Z5EJrDoRrknKoPUD66vBCU/wfuvue/V3685PsOKi/g
AHHHN6i8INR9v6HuE4C7FyLPi+Y/mPlf4Pph4QlzHyqfB808Ybj9EHF2KP8Z
3DxY+ELkBeH2QcQF0PgcGOGPGj+caOYh7IPFD0w/TD4IHEEvoPJ8cP0w/xTa
cl1fXPAWHh6o4fcNqu4OVJ4Bqv8BVP4f1J7HaOH1Eof7hNDcz4+WvvjQ0jMP
XB4izojhP9TwEoCbDwDeXUr1
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{1.3453125, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}, {
          FormBox["\"Albumin\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{1.4, 4.9}, {0, 1.8}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, {
   3.783353362738143*^9, 3.7833534081262536`*^9}, {3.783353461238553*^9, 
   3.783353469896366*^9}, 3.7833536378563056`*^9, 3.7833539356288347`*^9, {
   3.7833541157806826`*^9, 3.7833541205035086`*^9}, 3.7833542656193914`*^9, 
   3.7833544516492777`*^9, 3.7835312452991133`*^9, 3.7841080091295385`*^9, 
   3.7841401872220917`*^9, 3.7843895332600985`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"c14b9f39-88ed-4875-811a-4892feae2ff5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.7843872207865868`*^9, 
  3.7843872244291644`*^9}},ExpressionUUID->"f83a70a0-eb50-4e3a-b49b-\
55ff30654cdc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Albumin\>\""}], "]"}], "//", "Normal"}], ",", 
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Albumin_and_Globulin_Ratio\>\""}], "]"}], "//",
      "Normal"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}, {
  3.783353974157543*^9, 3.7833539958240914`*^9}, {3.7833541496383533`*^9, 
  3.7833541531894484`*^9}, {3.783354273505388*^9, 3.7833543008429346`*^9}, {
  3.7833544584195724`*^9, 3.783354470956406*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"8ff51229-8902-409f-96ff-06476a7fa872"],

Cell[BoxData["0.6863209846926305`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, {
   3.7833539880420475`*^9, 3.7833539964559216`*^9}, 3.7833541541092215`*^9, 
   3.7833543014147806`*^9, 3.783354471756215*^9, 3.7833718493284235`*^9, 
   3.7835312502032995`*^9, 3.7841401909839144`*^9, 3.7843895294810514`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"8f921063-e67e-471a-bea7-b105edc59806"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.784387232460359*^9, 
  3.7843872348991475`*^9}},ExpressionUUID->"8b4e346d-026c-42e3-857b-\
e938d2fda163"],

Cell["\<\
A linear relationship is observed with a high correlation coefficient. A low \
A/G ratio may be due to an overproduction of globulin, underproduction of \
albumin, or loss of albumin making  both the variables important in the model.\
\>", "Text",
 CellChangeTimes->{{3.7841401956752205`*^9, 3.784140217921465*^9}, {
   3.784140258821024*^9, 3.7841403371172376`*^9}, {3.7841544774295487`*^9, 
   3.784154496100116*^9}, {3.7841545443154883`*^9, 3.7841545765083027`*^9}, {
   3.784154712339428*^9, 3.7841547426297283`*^9}, 3.7842340408105125`*^9, {
   3.784318719888626*^9, 3.78431873246587*^9}, {3.784387227993496*^9, 
   3.7843872288961654`*^9}},ExpressionUUID->"1e909174-c6f3-4c3d-bfe8-\
44e97390bb34"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Relation between Total Proteins and Albumin and Globulin Ratio\
\>", "Section",
 CellChangeTimes->{{3.783352614268992*^9, 3.7833526251942315`*^9}, {
  3.7833532260579643`*^9, 3.7833532604914556`*^9}, {3.783354051658202*^9, 
  3.7833540607719774`*^9}, {3.7833543519621367`*^9, 3.783354369761244*^9}, {
  3.783354503620376*^9, 
  3.7833545105048037`*^9}},ExpressionUUID->"e0b9ae5e-2224-4348-b540-\
7232043c1143"],

Cell["\<\
A scatter plot is plotted and correlation is calculated to view the \
relationship between the two variables \[OpenCurlyDoubleQuote]Total Proteins\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]A/G ratio\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.7843895408541937`*^9, 
  3.784389553946868*^9}},ExpressionUUID->"0dab747d-0c4a-440e-9121-\
478ab085eedf"],

Cell[CellGroupData[{

Cell["Scatter Plot to determine Relationship", "Subsection",
 CellChangeTimes->{
  3.784387245014434*^9},ExpressionUUID->"1e5083e0-915f-4f8f-b0d2-\
031b47d798d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsGrid", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"10", ",", "8"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin and Globulin Ratio\>\"", ",", 
           "\"\<Total Proteins\>\""}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "0"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"10", ",", "8"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Males without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin and Globulin Ratio\>\"", ",", 
           "\"\<Total Proteins\>\""}], "}"}]}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "1"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"10", ",", "8"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females with Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin and Globulin Ratio\>\"", ",", 
           "\"\<Total Proteins\>\""}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"newfile", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#Gender", "\[Equal]", "1"}], " ", "&&", " ", 
             RowBox[{"#Dataset", "\[Equal]", "2"}]}], " ", "&"}]}], "]"}], 
         "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"{", 
            RowBox[{"10", ",", "8"}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Females without Liver Disease\>\"", ",", 
           RowBox[{"FontSize", "\[Rule]", "16"}]}], "]"}]}], ",", 
        RowBox[{"LabelStyle", "\[Rule]", 
         RowBox[{"Directive", "[", "Bold", "]"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "True"}], ",", 
        RowBox[{"FrameLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Albumin and Globulin Ratio\>\"", ",", 
           "\"\<Total Proteins\>\""}], "}"}]}]}], "]"}]}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7833526508277535`*^9, 3.783352887710903*^9}, {
  3.7833530265016956`*^9, 3.783353073405528*^9}, {3.7833532887005687`*^9, 
  3.783353406690621*^9}, {3.783353456455768*^9, 3.7833534679728518`*^9}, {
  3.783353568311499*^9, 3.783353569679146*^9}, {3.7833536357888155`*^9, 
  3.783353635984765*^9}, {3.7833539313499126`*^9, 3.783353932929514*^9}, {
  3.7833540814514527`*^9, 3.7833541135132647`*^9}, {3.7833541898745966`*^9, 
  3.783354263951825*^9}, {3.7833543874961805`*^9, 3.783354448566086*^9}, {
  3.783354562428278*^9, 3.78335461525838*^9}, {3.7841080231780205`*^9, 
  3.784108082487003*^9}, {3.784140345032696*^9, 3.7841403523954477`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"00fa3654-fa1a-4668-82c0-0ff5d4be2dab"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.007333333333333334], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJyFWD1s01AQDggqhBBqi+M4juM4sMDMjOIBqSwMMDMhwQqsMHdmhrUsLMzM
sMICEoUBFFTEj1qgEbRK6UKc83dP912tZnk6+969+/nue+cMb965futoq9W6
fKTVqtZnK5/vR8++jVrzX14+iKonW7WclbJujy7Of73y8aPq96GW++XrV9Xv
7+j2/Jc36P8Yydop5flGLffL9bW7l06ub9b6HWdP9D7reWJ/rP6J/lZtr6v2
ZV2q909q/cjJovdnJHYyjU/kqBQ/dmv7Z+i8Xrm6ee15vrqh/sO+6CWaD7ET
qQx/782iX7u7o/lC/DjP+pPoe+jDf1m7mh/4wzLyg/jgD+JnWfz+qv5jv+il
Wl95H9fyXv0+ofx1VYa/8F+ep4Sfjp4vcpvwAf+Rr7bmE3jGebIvpfgStQ99
G09W7p6/8fDFznfFn/Wn5/Bs7WVO39Z/yZ1n9y8qntA/VgZepirDnuyP6/5C
vWOqX0T9EvILfYvfmPDfVpn9Rz2tP4nqH4yfyOnb96nGb/MZ+IDjZ1nWaW0v
If9jJ9vz2uUMDDNE/NP+sPjNyhkZzBjhl9aL7Vk8oD+3iS+a+9fyS0b1DPGy
PdRrTu/RruKV5ScVXNZCPi1fJI7/cB7q8bJKz4ufqi/2PxH/7lF9g2z5rE/x
cP7aGh/wI/n/RPVG/Mc137KeoPupTXzVq/3HeQPK9yLJy+X1uQN/Fa9b1fWw
OXH4tXw3Vj4Wvhk39EvkZGsvd/xj+znV+GRdpP7w/I9+sf01UT63+YyI3/v0
viD8Bn6R5wOnb+WE5CHx70DzA/zZ+JYdXr/tP528ufpL+cjyYZf4JyF+Swg/
HfIvcvWw/qSH7E9oPkmo3nHDfR763drLab4Af07d/ID62Pt2geydU1neF9S/
50i/cPx+WL0t3jOnb/looP5Cn+8ni9+C7MO/Dw6/sn+Z5i+ON+AX+LL6A3df
QB/1YrxZfLcb+H3b4R39aeMP+LXzhL8vgC+Wmf9tPTLnv/UvdvOGxcPQzUs8
X9p6oF/3a3no8m/n/YAH1Nf6U1C/ptQvfcJPj+aDPp3P/Ji4/dYf1i8c3zbp
M55wnui9bcBjqB/43vZDTvZSNz9aPgzzn9g5Ve//rv4yH56cD6i/NR/2/ljS
/dAHHmWNyyvV5+vKnvOX5xXmRznntM5rsHdwvX64/HC8kJFvxC/P3yn+5fv6
S8P9WTT2B74XZL7aaah3XF6o3p7f0nlIvocmlN+vhP8wb4n9MF/K9+2+1hvz
HfIj61TxYeWC8JDRvJfS/cXzrOcr+Mvfx+hfi1+e3ztUL643z085nRfuU/SP
9Y/7qXDvLZ5SOr+g/QFPYucszS9DjR94sPGeOeQ+CP1k+STM05Bxv9rz+H7i
fHRpXsnpPebthZL3c31QP4sPP08xv2A//LX5Teh+AH+MVUa8sA/Z1ntM9/9Y
6yf991HvK5nv37v5DvXg7+uD8XWsRH74/yFbv1T1UT/b/213ns1HyBfzFfD/
H4PKWi4=
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Proteins\"", TraditionalForm], None}, {
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       ImageSize->Medium,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 2.0999999999999996`}, {0, 9.6}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360, 222.49223594996212}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.009166666666666668], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx1VTtMAkEQJZYmSqJ87uCAo7O3JmynjYXUVibaioWNvTW1ttrYUFNTa2ND
Cxp/EYmoEAzBCDefzT5kE3MZZ2fezJu3Q3H/qHKwFIvFTqZ/s+9mdL7KF+ez
kzO3N7PTLceiE5jD6DyxnTLHpeXWZfW9THE5Q3ET9nt8v8f+uJH8lDfB9/uM
t87+hzLFeYCfMfT9YDs0EXxpqPXIfcrjm+3OaaK+9cN4nsYTXlJt8gem0sif
ve2+sH9F+6V89j79P7HAbmv/aEt9lD+t/Uu/xOcj15MCPlJcz1DjXTsL9cY1
v/Tv8p3UeUi82MJ3rTnY2KvdM/4q8O+Z4dTbHFjbxbPzkP5cPB/m4QO+9PvL
tuVb+nH7Ff2MGS9g/G++nwH+C3N6cvED4Nc3UzFNFTXU94Hxi/RKecK5/qU+
Nx/qx+YXfilPAd5THvQUAl+heR5f9+92epyvCPFYb6A23Qthvhm2XxfE54EP
O3/ZF9K/8E3fkdbv+kPA86C+rPrlvbrzD+b0KHjid/PlQA958Nv5iY18Sj2E
t6Z6lf0n+kK+XXukenLzpaBff45fVz92f+N+/39/pKE/yy/qU96Tu18KUA++
t8BE67nzCftwonhX1dlCbCtf0Xpu9HR+bv9peB9Z2J8h4IfwexYAv5kFeu2q
/qJ1UG9p/TIvuf8HmAO1kg==
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0.34609375000000003`, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Proteins\"", TraditionalForm], None}, {
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Males without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0.37, 1.9}, {0, 8.5}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -118.66252583997979}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}, {InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJx9VD1Pw0AMjZgZaIjSNE2Ty1ZmfkBuY2KgcyYkWNnZmTvDP2BhZoYVFphY
UBHiowJVaaFVEQxw8Ud0TstJlfVq+z3b50u6e9DbW3EcJ//7GXt9Zc57tlme
tnbKU2RgI31ybM44g7iQ/RCv0D/k/P9xQ/AHer88z8jvsx/+D2vxwPOB2Ef8
mIFOg/UkBj4X+Qao53I+YXseLaxvhHpK6LWQ/w75I1G/z36ql/ipH+9s6+HQ
u+f4xf2/8nxsvUBfTrt5/+KJ8cv36fhme8T51D/wxNjPTNQ/RP5YzFuJehTW
/4P+lO+P9oX8wNvhfMCK7w9sKuZR6ZPfzk84nrBdv9zPtui32m/qh/ab+iV+
sBHnA19TvAePMfVL/YE/FfsXcrzUJz17/nHND/ZTvE96X4nAHdFPyPcFcU2x
70rUF4v3SfMd8P7I+6f3AXad+4H8APGc4ykf7JrArp6Z9Z5W+XJfbf1giV5R
+x7Re9ww9N15zb9YL9QmOu9PlswzEd+fBOdxi/GrPG+ar11PVPueAP7i++2d
x0dvOwXv8y/sKFG8
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Proteins\"", TraditionalForm], None}, {
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females with Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0, 1.8}, {0, 8.9}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {192., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}], InsetBox[
      GraphicsBox[{{}, {{}, 
         {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          0.011000000000000001`], AbsoluteThickness[1.6], 
          PointBox[CompressedData["
1:eJxlUiFQAlEQvSEaATm4Ow4wmSU7fxuJIJnEjFa0YjaTtZosZrJZi8VikGEG
cBQGDqFg0Lu3u8x9dob582737dt9bK3TbZ1nHMc5+f/F791tHEvjJFEk4E9z
kURhDw97+cfGMDIvz3EEBN6C+QHh+zfjgmK8eaonseJ+RRqEN19ng7HW450a
1LnUf1oft/sR5729ftfxOL2F9pM8+IeMfxmXabJ9WL4258oHb8P8gOfbGuzt
67zAZe0PXGH8o1j8xFu1sGvt76k++lQZj3le3/K3pnqoCxXb/osfwod+zsIl
1ZN90/v51Er+oCnP5ylf9K9OD97uL2esH6p/4id475zPMv+D83IPI51P7k32
l/nEr7T+kXVvO79tP+Re0/VZa19X+0O/Qn+MbVDb
           "]]}, {}}, {}, {}, {}, {}},
       AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
       Axes->{True, True},
       AxesLabel->{None, None},
       AxesOrigin->{0.42890625000000004`, 0},
       DisplayFunction->Identity,
       Frame->{{True, True}, {True, True}},
       FrameLabel->{{
          FormBox["\"Total Proteins\"", TraditionalForm], None}, {
          FormBox["\"Albumin and Globulin Ratio\"", TraditionalForm], None}},
       FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
       GridLines->{None, None},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->All,
       LabelStyle->Directive[Bold],
       Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             (Identity[#]& )[
              Part[#, 1]], 
             (Identity[#]& )[
              Part[#, 2]]}& )}},
       PlotLabel->FormBox[
         StyleBox[
         "\"Females without Liver Disease\"", FontSize -> 16, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{0.45, 1.8}, {0, 9.2}},
       PlotRangeClipping->True,
       PlotRangePadding->{{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}},
       Ticks->{Automatic, Automatic}], {576., -355.98757751993935}, 
      ImageScaled[{0.5, 0.5}], {360., 222.4922359499621}]}}, {}},
  ContentSelectable->True,
  ImageSize->{780., 486.65010335991917`},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.7833527922719812`*^9, {3.7833528356840916`*^9, 3.783352855843013*^9}, 
   3.7833528919298267`*^9, 3.7833530432614794`*^9, 3.7833530746012235`*^9, {
   3.783353362738143*^9, 3.7833534081262536`*^9}, {3.783353461238553*^9, 
   3.783353469896366*^9}, 3.7833536378563056`*^9, 3.7833539356288347`*^9, {
   3.7833541157806826`*^9, 3.7833541205035086`*^9}, 3.7833542656193914`*^9, 
   3.7833544516492777`*^9, 3.783354617073923*^9, 3.7835312565366697`*^9, 
   3.7841080841066236`*^9, 3.78414035494598*^9, 3.784389557286021*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"17c9c3f2-a0fc-437a-8b42-f7729f195c07"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Correlation Test:", "Subsection",
 CellChangeTimes->{{3.7843872660627747`*^9, 
  3.784387272783566*^9}},ExpressionUUID->"fa03df1f-c9cd-4349-b872-\
e31c4a901928"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Correlation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Total_Proteins\>\""}], "]"}], "//", "Normal"}],
     ",", 
    RowBox[{
     RowBox[{"file", "[", 
      RowBox[{"All", ",", "\"\<Albumin_and_Globulin_Ratio\>\""}], "]"}], "//",
      "Normal"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.783352944283925*^9, 3.7833529531256895`*^9}, {
  3.783353974157543*^9, 3.7833539958240914`*^9}, {3.7833541496383533`*^9, 
  3.7833541531894484`*^9}, {3.783354273505388*^9, 3.7833543008429346`*^9}, {
  3.7833544584195724`*^9, 3.783354470956406*^9}, {3.783354631615474*^9, 
  3.783354636094366*^9}, {3.784140360342887*^9, 3.7841403626175833`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"3cf3614c-5c04-4e70-a638-cd98c41e380c"],

Cell[BoxData["0.2339035764110773`"], "Output",
 CellChangeTimes->{{3.7833529477630725`*^9, 3.7833529536775446`*^9}, {
   3.7833539880420475`*^9, 3.7833539964559216`*^9}, 3.7833541541092215`*^9, 
   3.7833543014147806`*^9, 3.783354471756215*^9, 3.783354636598226*^9, 
   3.783371818365219*^9, 3.783531261031087*^9, 3.784140363318175*^9, 
   3.784389560569209*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"1db754f0-5415-45df-b9e1-4a4440064a43"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843872808240633`*^9, 
  3.784387283416606*^9}},ExpressionUUID->"9e053ce3-c7bc-4367-a1e4-\
46cd8133b5b8"],

Cell["\<\
The scatterplot does not indicate any linear relationship and a very low \
correlation coefficient is obtained. \
\>", "Text",
 CellChangeTimes->{{3.7841403681743956`*^9, 3.7841404026895847`*^9}, {
   3.784140440501094*^9, 3.784140464034601*^9}, {3.7841405004336433`*^9, 
   3.784140640031472*^9}, 3.784234017752697*^9, {3.7843872759244733`*^9, 
   3.784387296133916*^9}},ExpressionUUID->"6549ecc0-0763-48a1-a3f1-\
101a423fa0f4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Section",
 CellChangeTimes->{{3.7843873035787477`*^9, 
  3.7843873064498925`*^9}},ExpressionUUID->"db02a446-fc3d-4ff0-9a7c-\
e9916eaf9bd9"],

Cell["\<\
All the scatter plots and correlation coefficients indicate a  direct \
relationship between the following features:
Direct Bilirubin & Total Bilirubin
Aspartate Aminotransferase & Alanine Aminotransferase
Total Proteins & Albumin
Albumin_and_Globulin_Ratio & Albumin

Hence we could have omitted a few variables from the model but each test is \
indicative of different degrees of effect on liver and hence each of the \
variable is important in classifying a patient as having liver disease or not.\
\>", "Text",
 CellChangeTimes->{
  3.784387310577989*^9, {3.784389793586429*^9, 
   3.7843897997848415`*^9}},ExpressionUUID->"147cfddf-0a7a-4c7c-b697-\
513ba9200297"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Machine Learning", "Chapter",
 CellFrame->{{0, 0}, {0, 2}},
 CellChangeTimes->{{3.7833695767377787`*^9, 
  3.7833695802589774`*^9}},ExpressionUUID->"b3344685-4f73-41ff-9373-\
dc0fd39b6040"],

Cell["\<\
In order to apply various classifier algorithms to the dataset, the \
categorical variable needs to be converted to indicator variables, the \
dataset needs to be arranged to define the associations and then divided to \
training and testing dataset. The classifier algorithms need to be trained \
using the training dataset and then tested using testing dataset. The various \
models will be compared against various measurements like accuracy, errors, \
prediction score,confusion matrix, etc. As the data can be classified to two \
classes (1-> Liver disease, 2-> Not liver disease), linear regression model \
cannot be used. Linear regression is more suitable for predicting an output \
that is of continuous value whereas classifier datasets are having outcomes \
of discrete nature. The regression line is a straight line predicting a real \
output which can range from negative infinity to positive infinity whereas \
classifier algorithms predict a probability range between 0 and 1.
The performance measurements against which the models will be compared are:
1) Accuracy
2) Precision
3) F-score
4) Confusion matrix\
\>", "Text",
 CellChangeTimes->{{3.7841479521291103`*^9, 3.7841479910951304`*^9}, {
  3.7841480399068565`*^9, 3.784148253261196*^9}, {3.784148325059092*^9, 
  3.7841483529013767`*^9}, {3.784148568362618*^9, 3.78414872538236*^9}, {
  3.7841488166740017`*^9, 3.7841488664425344`*^9}, {3.784148940277605*^9, 
  3.7841489596572886`*^9}},ExpressionUUID->"c06058ce-bce4-4c02-abb7-\
518207a100ab"],

Cell[CellGroupData[{

Cell["Handling categorical variable \[OpenCurlyDoubleQuote]Gender\
\[CloseCurlyDoubleQuote]", "Subchapter",
 CellChangeTimes->{{3.7833735739843884`*^9, 3.78337358179091*^9}, {
  3.783528549797532*^9, 3.7835285672725315`*^9}, {3.7841490353594923`*^9, 
  3.784149036734151*^9}, {3.7841504448908987`*^9, 
  3.7841504527965946`*^9}},ExpressionUUID->"ec222ebb-41ab-44fd-ae36-\
ce8c16ec551b"],

Cell["\<\
The categorical variable \
\[OpenCurlyDoubleQuote]Gender\[CloseCurlyDoubleQuote] is converted to \
indicator variables (Male and Female). This creates two new columns (Male and \
Female) where if a patient is male then the column Male has value 1 and the \
Female column has value as 0. Similarly for a female patient the Female \
column has 1 and Male column has 0.\
\>", "Text",
 CellChangeTimes->{{3.7841489696708174`*^9, 3.7841490528493605`*^9}, {
  3.784150464238908*^9, 
  3.78415057739144*^9}},ExpressionUUID->"828a1ef4-a378-4815-a7aa-\
df67ae68a8dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"fileprepX", ",", "fileprepY", ",", "fileprep"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"categoryMale", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"x", "\[Equal]", "\"\<Male\>\""}], ",", "1", ",", "0"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"malecol", "=", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"categoryMale", ",", 
      RowBox[{"file", "[", 
       RowBox[{"All", ",", "\"\<Gender\>\""}], "]"}]}], "]"}], "//", 
    "Normal"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filenew", "=", 
   RowBox[{
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Normal", "[", "file", "]"}], ",", 
        RowBox[{"Thread", "[", 
         RowBox[{"\"\<Male\>\"", "\[Rule]", "malecol"}], "]"}]}], "}"}]}], 
     "]"}], "//", "Dataset"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"categoryFemale", "[", "x_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"x", "\[Equal]", "\"\<Female\>\""}], ",", "1", ",", "0"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"femalecol", "=", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"categoryFemale", ",", 
      RowBox[{"file", "[", 
       RowBox[{"All", ",", "\"\<Gender\>\""}], "]"}]}], "]"}], "//", 
    "Normal"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filenew", "=", 
   RowBox[{
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Normal", "[", "filenew", "]"}], ",", 
        RowBox[{"Thread", "[", 
         RowBox[{"\"\<Female\>\"", "\[Rule]", "femalecol"}], "]"}]}], "}"}]}],
      "]"}], "//", "Dataset"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fileprepX", "=", 
   RowBox[{"filenew", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", 
       "9", ",", "10", ",", "12", ",", "13"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fileprepY", "=", 
   RowBox[{"filenew", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", "11", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fileprep", "=", 
   RowBox[{
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Normal", "[", "fileprepX", "]"}], ",", 
        RowBox[{"Normal", "[", "fileprepY", "]"}]}], "}"}]}], "]"}], "//", 
    "Dataset"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.783375114785384*^9, 3.7833751677516456`*^9}, {
   3.7833752621038904`*^9, 3.7833754222777953`*^9}, {3.7833755085397873`*^9, 
   3.7833756006219535`*^9}, 3.7833758023721175`*^9, {3.783376069021316*^9, 
   3.7833763149155235`*^9}, {3.7833763824287577`*^9, 3.783376410330781*^9}, {
   3.783520282070025*^9, 3.7835203447242193`*^9}, {3.7835204918209853`*^9, 
   3.7835205366223526`*^9}, {3.7835205721001887`*^9, 3.783520609103197*^9}, {
   3.7835206821822033`*^9, 3.783520724671934*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"6deccd1c-7d59-4042-bc78-282b0296941d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dividing dataset into test and training dataset", "Subchapter",
 CellChangeTimes->{{3.783369585488291*^9, 
  3.7833695984015207`*^9}},ExpressionUUID->"451f3f9d-befa-4f1c-9703-\
9195e06ab15e"],

Cell["\<\
The dataset is divided into 2 sets: training and test dataset. A random \
sampling of the dataset is done and 70% of data is put aside for training \
dataset and the rest are put into test dataset.\
\>", "Text",
 CellChangeTimes->{{3.7841490619630003`*^9, 3.7841491308136377`*^9}, {
  3.784149228607259*^9, 
  3.78414925468834*^9}},ExpressionUUID->"cc005961-3a4b-4acb-8fcf-\
fb4a638d188d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"filetrain", ",", "filetest"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SeedRandom", "[", "50", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rs", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "fileprep", "]"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"train", "=", 
   RowBox[{"rs", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", 
      RowBox[{"Round", "[", 
       RowBox[{
        RowBox[{"Length", "[", "fileprep", "]"}], "*", "0.7"}], "]"}]}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{"rs", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{
       RowBox[{"Round", "[", 
        RowBox[{
         RowBox[{"Length", "[", "fileprep", "]"}], "*", ".7"}], "]"}], "+", 
       "1"}], ";;"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filetrain", "=", 
   RowBox[{
    RowBox[{"fileprep", "[", 
     RowBox[{"[", "train", "]"}], "]"}], "//", "Dataset"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filetest", "=", 
   RowBox[{
    RowBox[{"fileprep", "[", 
     RowBox[{"[", "test", "]"}], "]"}], "//", "Dataset"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7833696057042294`*^9, 3.783369689478964*^9}, {
   3.783369748623952*^9, 3.783369750436995*^9}, {3.7833709559944525`*^9, 
   3.7833709682604747`*^9}, {3.783376320843099*^9, 3.7833763271554766`*^9}, {
   3.783376471186778*^9, 3.7833764762988214`*^9}, {3.7833765736765747`*^9, 
   3.7833766625755796`*^9}, {3.7835200264299936`*^9, 3.783520027929883*^9}, {
   3.7835206187554746`*^9, 3.783520630565802*^9}, 3.7835296842032022`*^9, {
   3.7835302126692286`*^9, 3.783530221355277*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"c0514da9-9e96-49a0-a584-d8314602ec80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Association defined for training and test data", "Subchapter",
 CellChangeTimes->{{3.783372482335615*^9, 3.7833724933602657`*^9}, {
  3.7835207336231537`*^9, 3.7835207638398237`*^9}, {3.783528525562434*^9, 
  3.783528529703063*^9}, {3.783528575540789*^9, 
  3.7835285800511775`*^9}},ExpressionUUID->"e141022e-463f-4ba3-99cc-\
806be17a7e68"],

Cell["\<\
Associations need to be defined for the dataset before it can be applied to \
classification models. The labelling of dataset that the variables are all \
input variables except the variable \[OpenCurlyDoubleQuote]Dataset\
\[CloseCurlyDoubleQuote] which classifies a patient as having liver disease \
or not is needed to be done. This association needs to be fed to the models \
so that it can understand what are the input variables and what output is \
expected for the inputs given. 
The association defined in this dataset is as below:
{Age,Gender,Total Bilirubin,Direct Bilirubin, Alkaline Phosphatase, Alanine \
Aminotransferase, Aspartate Aminotransferase, Total Proteins, Albumin. \
Albumin and Globulin Ratio} --> Dataset
The code \[OpenCurlyDoubleQuote]Flatten\[CloseCurlyDoubleQuote] helps to \
flatten out the association defined and lets the dataset know that all the \
input variables need to be merged together to give the output, i.e. \
\[OpenCurlyDoubleQuote]Dataset\[CloseCurlyDoubleQuote].

The association is defined for both training and test dataset:\
\>", "Text",
 CellChangeTimes->{{3.784149655199479*^9, 3.78414967017733*^9}, {
  3.7841497723420115`*^9, 3.784149789076937*^9}, {3.78414982626783*^9, 
  3.7841498718287244`*^9}, {3.7841499380868807`*^9, 3.7841501165584545`*^9}, {
  3.7841502643362994`*^9, 3.7841503436880627`*^9}, {3.784150392109971*^9, 
  3.784150435033865*^9}, {3.7841509019382467`*^9, 3.784150917982072*^9}, {
  3.784390014322708*^9, 
  3.7843900359572535`*^9}},ExpressionUUID->"90c512ac-f872-4cb8-964d-\
60d5b28b9a9e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainassoc", "=", 
   RowBox[{"filetrain", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Most", "@", "#"}], "\[Rule]", 
        RowBox[{"Last", "@", "#"}]}], "}"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingdata", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Normal", "@", "trainassoc"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testassoc", "=", 
   RowBox[{"filetest", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Most", "@", "#"}], "\[Rule]", 
        RowBox[{"Last", "@", "#"}]}], "}"}], "&"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testdata", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Normal", "@", "testassoc"}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7833725346965504`*^9, 3.7833725515875244`*^9}, {
   3.783372604761013*^9, 3.7833726905597043`*^9}, {3.783372881577815*^9, 
   3.7833729836962233`*^9}, {3.783373377843618*^9, 3.783373387615005*^9}, {
   3.7833752231752253`*^9, 3.7833752540645037`*^9}, {3.783375427856609*^9, 
   3.783375462024982*^9}, {3.7833765087771797`*^9, 3.7833765415969796`*^9}, {
   3.7833766691308193`*^9, 3.783376831856824*^9}, {3.783379480233111*^9, 
   3.783379580293697*^9}, 3.78351984874262*^9, {3.7835198977918396`*^9, 
   3.783519906956019*^9}, {3.7835199720049953`*^9, 3.7835199955869102`*^9}, {
   3.7835200457532806`*^9, 3.783520169258301*^9}, 3.78352055456536*^9, {
   3.78352077303983*^9, 3.7835210413045506`*^9}, {3.7835210968789177`*^9, 
   3.783521097847147*^9}, {3.783522147366985*^9, 3.7835221530734143`*^9}, 
   3.7835225132496758`*^9, {3.7835276777112207`*^9, 3.783527704759223*^9}, {
   3.783527735007806*^9, 3.7835278604560184`*^9}, 3.783527918725523*^9, {
   3.783528197894015*^9, 3.7835282469021215`*^9}, {3.783528279262839*^9, 
   3.7835283231316805`*^9}, 3.7835285213129*^9, {3.783528595483196*^9, 
   3.7835286580247784`*^9}, 3.784140664268591*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"4f4a999f-6108-4b18-a508-57d3e4407b0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Steps of Machine learning", "Subchapter",
 CellChangeTimes->{{3.7842263892894773`*^9, 
  3.784226406962267*^9}},ExpressionUUID->"1d81bae0-d871-4c0b-a162-\
36ff5ca3fc3f"],

Cell[TextData[{
 "1) The Training dataset is used to train the classifier model by mentioning \
the method(i.e. algorithm) to be applied.\n\n \t",
 StyleBox["Code",
  FontWeight->"Bold"],
 ": algotraining=Classify[training dataset,Method-><the classifier \
algorithm>]\n \t\n 2) A report is generated on the training done\n \n \t",
 StyleBox["Code",
  FontWeight->"Bold"],
 ": ClassifierInformation[algotraining]\n \t\n 3) The test dataset is applied \
to the training algorithm:\n \n \t",
 StyleBox["Code",
  FontWeight->"Bold"],
 ": algotesting = ClassifierMeasurements[algotraining, test dataset]\n \t\n \
4) The measurements against which the standard of the model will be measured \
are:\n \n\ta) Accuracy- It gives the proportion of data that has be \
classified correctly\n\tb) Recall - It measures the completeness of a \
classifier. It is calculated as below:\n\t\t\tRecall= ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     RowBox[{"No", ".", " ", "of"}], " ", "true", " ", "positive"}], 
    RowBox[{
     RowBox[{
      RowBox[{"No", ".", " ", "of"}], " ", "true", " ", "positives"}], " ", 
     "+", " ", 
     RowBox[{
      RowBox[{"No", ".", " ", "of"}], " ", "false", " ", "negatives"}]}]], 
   TraditionalForm]],ExpressionUUID->"aec3d8e1-839a-4155-9a6a-4d7531e3760f"],
 "  \n\tc) Precision- It measures the exactness of the classifier. The \
precision is calculated as below:\n\t\t\t Precision= ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     RowBox[{"No", ".", " ", "of"}], " ", "true", " ", "positives"}], 
    RowBox[{
     RowBox[{
      RowBox[{"No", ".", " ", "of"}], " ", "true", " ", "positives"}], " ", 
     "+", " ", 
     RowBox[{
      RowBox[{"No", ".", " ", "of"}], " ", "true", " ", "negatives"}]}]], 
   TraditionalForm]],ExpressionUUID->"b829c61e-a6c0-4500-bc10-41fce6807f72"],
 "\n\n\td) F-score - This gives the measure of balance between Precision and \
Recall. It is calculated as below:\n\t\t\tF-score = 2",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    FractionBox[
     RowBox[{"Precision", "*", " ", "Recall"}], 
     RowBox[{"Precision", "+", "Recall"}]]}], TraditionalForm]],
  ExpressionUUID->"b9cb486e-1546-4a75-81c4-89b3de7f1e50"],
 "\n\te) Error- It gives the proportion of data that has been classified \
incorrectly. It is calculated as:\n\t\t\tError =  1- Accuracy\n\tf) Confusion \
Matrix - This gives a visual representation of data classified correctly and \
incorrectly(i.e. the prediction results). The result of Confusion Function is \
plotted as a matrix in the \tConfusion Matrix.\n\t\n5) Observations are noted \
down after analysing the model and the classifier measurements."
}], "Text",
 CellChangeTimes->{{3.7842264131184034`*^9, 3.784226666336562*^9}, {
  3.7842266977596664`*^9, 3.78422679107158*^9}, {3.784303377148181*^9, 
  3.7843034093581643`*^9}, {3.784390069796709*^9, 
  3.7843900868044214`*^9}},ExpressionUUID->"68fb0df7-81a8-48e7-8aeb-\
c49e62ae6307"],

Cell[CellGroupData[{

Cell["Logistic Regression Model", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 
  3.7835301376715503`*^9}},ExpressionUUID->"5d691024-c62f-4b5b-9cd6-\
ff30fe9337a6"],

Cell["\<\
Logistic regression model is a special case of linear regression model where \
the outcome is categorical (1->Liver Disease, 2-> No liver disease). It \
predicts the probability of liver disease occurring or not by fitting the \
data to a logit(sigmoid) function.

1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{{3.7841507102041636`*^9, 3.78415075262286*^9}, {
  3.7841507866047297`*^9, 3.7841508445470614`*^9}, {3.7841509842507477`*^9, 
  3.7841509869224358`*^9}, {3.7841510301258574`*^9, 
  3.7841510911879435`*^9}},ExpressionUUID->"c60fa35c-c162-461d-bc5c-\
ffad289c5d87"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LRtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"058e891f-377f-4b08-8434-00a0532c0a5b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0228489, "MaxTrainingMemory" -> 191872, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 44, 19.3557982`9.039386022922509}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{0.025714632123708725`, -0.025714632123708725`, 
             0.1805289387702942, 0.15961380302906036`, 0.21761910617351532`, 
             0.19447320699691772`, 0.17069676518440247`, 0.1303686946630478, 
             
             0.0690249353647232, -0.07670795917510986, \
-0.04604071378707886}}], "Biases" -> RawArray["Real32",{0.6096142530441284}]],
          "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 11, 
           "$InputDimensions" -> {11}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 11., "Type" -> "NumericalVector"], 
         "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 100., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6166435213626122, 0.045946089109057175`], "Accuracy" -> 
         PlusMinus[0.6692188059568723, 0.07386154474606119], "EvaluationTime" -> 
         0.000015053658536585367`, "TestSize" -> 82, "TrainingSize" -> 326, 
         "TrainingTime" -> 0.0547961, "TrainingMemory" -> 150384, 
         "ModelMemory" -> 9088, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.6901774798503301, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6166435213626122, 0.0324887911780157]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6692188059568723, 0.05222799915885347]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           100., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 408], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 71764795416728]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5.461928498146167, 0.8775557503996703], "Accuracy" -> 
              PlusMinus[0.6261233183099137, 0.03429909757187313], 
              "EvaluationTime" -> 0.000012841708542713569`, "TestSize" -> 398,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0824805, 
              "TrainingMemory" -> 145488, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.07661911978595978, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.461928498146167, 0.6205256219768561]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6261233183099137, 0.024253124481650536`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012841708542713569`, "MeanCrossEntropy" -> 
             PlusMinus[5.461928498146167, 0.8775557503996703], "ModelMemory" -> 
             9088, "TrainingMemory" -> 145488, "TrainingTime" -> 0.41900094], 
           "Index" -> 1], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6919868549119311, 0.0043570975141618085`], 
              "Accuracy" -> 
              PlusMinus[0.6064582118413229, 0.03457388021315767], 
              "EvaluationTime" -> 0.000011527135678391961`, "TestSize" -> 398,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0203747, 
              "TrainingMemory" -> 65896, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6234112807936206, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6919868549119311, 0.0030809331985548636`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6064582118413229, 0.024447425150655188`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6911780387313434, 0.004816442906295645], "Accuracy" -> 
              PlusMinus[0.6221661873234661, 0.0366309032363266], 
              "EvaluationTime" -> 0.000013395689655172412`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.0241189, 
              "TrainingMemory" -> 78096, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6240570334549443, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6911780387313434, 0.0034057394402394934`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6221661873234661, 0.025901960079394784`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6884802407739594, 0.010597477690994603`], 
              "Accuracy" -> 
              PlusMinus[0.5969296493303664, 0.07679939398845588], 
              "EvaluationTime" -> 0.000010414634146341464`, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0227419, 
              "TrainingMemory" -> 150560, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6254500863965796, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6884802407739594, 0.007493548338775439]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5969296493303664, 0.054305372280254526`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010414634146341464`, "MeanCrossEntropy" -> 
             PlusMinus[0.6884802407739594, 0.010597477690994603`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150560, 
             "TrainingTime" -> 0.04883695521472393], "Index" -> 2], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6703968332816336, 0.006665096748700282], "Accuracy" -> 
              PlusMinus[0.6073986474892685, 0.03447609402281334], 
              "EvaluationTime" -> 0.000010885929648241206`, "TestSize" -> 398,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0296758, 
              "TrainingMemory" -> 70736, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6430199027872585, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6703968332816336, 0.004712935108270379]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6073986474892685, 0.024378279872356308`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6444013018377472, 0.00914113649649561], "Accuracy" -> 
              PlusMinus[0.6708894492023936, 0.035641823568941404`], 
              "EvaluationTime" -> 0.000014562643678160921`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.1292205, 
              "TrainingMemory" -> 178328, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6683935714404974, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6444013018377472, 0.006463759604423884]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6708894492023936, 0.02520257513945298]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6166435213626122, 0.045946089109057175`], 
              "Accuracy" -> 
              PlusMinus[0.6692188059568723, 0.07386154474606119], 
              "EvaluationTime" -> 0.000015053658536585367`, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0547961, 
              "TrainingMemory" -> 150384, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6901774798503301, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6166435213626122, 0.0324887911780157]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6692188059568723, 0.05222799915885347]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000015053658536585367`, "MeanCrossEntropy" -> 
             PlusMinus[0.6166435213626122, 0.045946089109057175`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150384, 
             "TrainingTime" -> 0.0982549680981595], "Index" -> 3], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6373074003292933, 0.13844386590400562`], "Accuracy" -> 
              PlusMinus[0.6451224204147037, 0.0750403221509861], 
              "EvaluationTime" -> 0.000018346341463414636`, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0740537, 
              "TrainingMemory" -> 150320, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6495310477291801, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6373074003292933, 0.09789459639440341]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018346341463414636`, "MeanCrossEntropy" -> 
             PlusMinus[0.6373074003292933, 0.13844386590400562`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150320, 
             "TrainingTime" -> 0.16673440429447853`], "Index" -> 4], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6373028467057199, 0.13844038892693758`], "Accuracy" -> 
              PlusMinus[0.6451224204147037, 0.0750403221509861], 
              "EvaluationTime" -> 9.35609756097561*^-6, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0578098, 
              "TrainingMemory" -> 150448, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6495361805571384, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6373028467057199, 0.09789213780034059]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.35609756097561*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6373028467057199, 0.13844038892693758`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150448, 
             "TrainingTime" -> 0.13016071533742332`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.795226041307951, 0.2835783163367354], "Accuracy" -> 
              PlusMinus[0.6287246399280201, 0.034236269868145285`], 
              "EvaluationTime" -> 0.000010873618090452263`, "TestSize" -> 398,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0558716, 
              "TrainingMemory" -> 76112, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.233233942232916, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.795226041307951, 0.20052015047916952`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6287246399280201, 0.024208698586298198`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6372585687095803, 0.13840621304014386`], "Accuracy" -> 
              PlusMinus[0.6451224204147037, 0.0750403221509861], 
              "EvaluationTime" -> 9.747560975609755*^-6, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0764891, 
              "TrainingMemory" -> 150384, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6495861094166203, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6372585687095803, 0.09786797179903567]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.747560975609755*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6372585687095803, 0.13840621304014386`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150384, 
             "TrainingTime" -> 0.15160028957055216`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6925402147506716, 0.003568458484478426], "Accuracy" -> 
              PlusMinus[0.6066298058196371, 0.03454964333776614], 
              "EvaluationTime" -> 9.332914572864322*^-6, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0198934, 
              "TrainingMemory" -> 65752, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6230555085112908, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6925402147506716, 0.0025232811927573652`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6066298058196371, 0.02443028709171106]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6924569281640778, 0.003808858500827336], "Accuracy" -> 
              PlusMinus[0.6220298379517702, 0.036623306231776905`], 
              "EvaluationTime" -> 0.000012134195402298852`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.0500882, 
              "TrainingMemory" -> 105632, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6230871499625487, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6924569281640778, 0.002693269674515036]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6220298379517702, 0.02589658818596099]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6917282030064611, 0.010543976840818967`], 
              "Accuracy" -> 
              PlusMinus[0.5848814565592821, 0.07711959627167222], 
              "EvaluationTime" -> 9.747560975609755*^-6, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0266994, 
              "TrainingMemory" -> 150320, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6225319002040468, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6917282030064611, 0.007455717524817001]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5848814565592821, 0.05453178948606821]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.747560975609755*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6917282030064611, 0.010543976840818967`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150320, 
             "TrainingTime" -> 0.053308600000000005`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6369735229899602, 0.043682851839821325`], 
              "Accuracy" -> 
              PlusMinus[0.6359351592208556, 0.03412714256103984], 
              "EvaluationTime" -> 9.057035175879397*^-6, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0556456, 
              "TrainingMemory" -> 75848, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6689312584260056, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6369735229899602, 0.03088844075750491]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6359351592208556, 0.02413153392743131]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6230438478011503, 0.12326881512895035`], "Accuracy" -> 
              PlusMinus[0.6330742276436193, 0.07555340898096463], 
              "EvaluationTime" -> 9.54390243902439*^-6, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.0865444, 
              "TrainingMemory" -> 150560, "ModelMemory" -> 9088, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6668785833045238, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6230438478011503, 0.08716421508651168]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6330742276436193, 0.05342432783220069]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.54390243902439*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6230438478011503, 0.12326881512895035`], 
             "ModelMemory" -> 9088, "TrainingMemory" -> 150560, 
             "TrainingTime" -> 0.16395883680981596`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["LogisticRegression"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 71760500449432]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843910635467429`17.33057099743014*^9, 
      "PreprocessorEvaluationTime" -> 0.0000114887623762376`2., 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.6118465, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.8000000000000002, 
          "ElapsedTimes" -> 0.9397587000000001, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.3956420999999999`, "ExperimentCounts" -> 7]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[71769090384024]], "ID" -> 71773385351320]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 4.4916271, "MaxTrainingMemory" -> 13481808, 
      "DataMemory" -> 806280, "FunctionMemory" -> 236472, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 44, 23.6667068`9.12671275689113}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7835301780360985`*^9, 3.7841102849968777`*^9, 
  3.784151014095372*^9, 3.784224850566497*^9, 3.784391063886655*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"077fe9da-af27-4219-ac7b-004ca1231754"]
}, Open  ]],

Cell["\<\
2) The ClassifierInformation function generates a report on the properties of \
the classifier( the algorithm used, accuracy reached, time taken to train the \
model, etc).\
\>", "Text",
 CellChangeTimes->{{3.7841511609167757`*^9, 3.7841512474928017`*^9}, {
  3.7841512868440847`*^9, 
  3.78415132580667*^9}},ExpressionUUID->"3b57d780-d8b3-4548-950d-\
bfd67ddde372"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "LRtraining", "]"}]], "Input",
 CellChangeTimes->{{3.783530260026061*^9, 3.783530261586171*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"4a470929-5296-46f3-9906-3be0d8cb88d0"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"LogisticRegression\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"L1Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "L2Regularization"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "OptimizationMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[48.00000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[1123000945], "Type" -> 
                    TypeSystem`Struct[{
                    "L1Regularization", "L2Regularization", 
                    "OptimizationMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[1123000945]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L1Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 961345901][{
                    Key["L1Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["L1Regularization"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"L2Regularization\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 961345901][{
                    Key["L2Regularization"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["100."], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"OptimizationMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 961345901][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["LBFGS", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 961345901][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    961345901]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    961345901][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "L1Regularization" -> 0, "L2Regularization" -> 100., 
                  "OptimizationMethod" -> "LBFGS"], 
                 
                 TypeSystem`Struct[{
                  "L1Regularization", "L2Regularization", 
                   "OptimizationMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 153489433125019]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "66.9218805956872273555`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "7.386154474606118292`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5214957164647500143`3.",
                   "\", \"", "0.8169418954489946483`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5214957164647500143`3., 
                  ", ", 0.8169418954489946483`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.6166435213626122458`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0459460891090571755`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5247513431444978949`3.",
                   "\", \"", "0.7085356995807265967`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5247513431444978949`3., 
                  ", ", 0.7085356995807265967`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "5.95`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "29.6`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"239.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"4.49`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4510271894387267}, {
                    4.0943445622221, -0.43943360744897597`}, {
                    5.786897381366708, -0.48346418320774776`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6217551642429306}, {
                    2.302585092994046, -0.3011426264137932}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4510271894387267}}, {{
                    4.0943445622221, -0.43943360744897597`}}, {{
                    5.786897381366708, -0.48346418320774776`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6217551642429306}}, {{
                    2.302585092994046, -0.3011426264137932}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5220708295051742}, {
                    2.302585092994046, -0.38469768927043513`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.45372065479852}, {
                    4.0943445622221, -0.42534780795867394`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{5.786897381366708, -0.5608961007424735}, {
                    5.786897381366708, -0.41159946917940377`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6450254290853682}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.639566971900105, -0.3011426264137932}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6450254290853682}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.639566971900105, -0.3011426264137932}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6359351592208556}, {
                    4.0943445622221, 0.6708894492023936}, {5.786897381366708, 
                    0.6692188059568723}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5590745410019947}, {
                    2.302585092994046, 0.7631221910650268}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6359351592208556}}, {{
                    4.0943445622221, 0.6708894492023936}}, {{
                    5.786897381366708, 0.6692188059568723}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5590745410019947}}, {{
                    2.302585092994046, 
                    0.7631221910650268}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5381885982073523}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5590745410019947, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5381885982073523}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5590745410019947, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.6978019321833615`}, {
                    2.302585092994046, 1.6978019321833615`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3681883193368969}, {
                    4.0943445622221, -0.3693578346658271}, {
                    5.786897381366708, -0.37326866017374777`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3998854534506684}, {
                    4.0943445622221, -0.43943360744897597`}, {
                    5.786897381366708, -0.48346418320774776`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.786897381366708, -0.45050316472665036`}, {
                    5.786897381366708, -0.45050316472665036`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.786897381366708, -0.45051030984977175`}, {
                    5.786897381366708, -0.45051030984977175`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.585130942317204}, {
                    5.786897381366708, -0.4505797894301543}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.36738897076462257`}, {
                    4.0943445622221, -0.36750924045199385`}, {
                    5.786897381366708, -0.3685621707407714}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4510271894387267}, {
                    5.786897381366708, -0.47313838096806876`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6417818851312962}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6046456340628095, 1.6978019321833615`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6417818851312962}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6046456340628095, 1.6978019321833615`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4510271894387267}, {
                    4.0943445622221, -0.43943360744897597`}, {
                    5.786897381366708, -0.48346418320774776`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6217551642429306}, {
                    2.302585092994046, -0.3011426264137932}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4510271894387267}}, {{
                    4.0943445622221, -0.43943360744897597`}}, {{
                    5.786897381366708, -0.48346418320774776`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6217551642429306}}, {{
                    2.302585092994046, -0.3011426264137932}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5220708295051742}, {
                    2.302585092994046, -0.38469768927043513`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.45372065479852}, {
                    4.0943445622221, -0.42534780795867394`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5608961007424735}, {
                    5.786897381366708, -0.41159946917940377`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6450254290853682}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.639566971900105, -0.3011426264137932}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6450254290853682}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.639566971900105, -0.3011426264137932}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6359351592208556}, {
                    4.0943445622221, 0.6708894492023936}, {5.786897381366708, 
                    0.6692188059568723}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5590745410019947}, {
                    2.302585092994046, 0.7631221910650268}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6359351592208556}}, {{
                    4.0943445622221, 0.6708894492023936}}, {{
                    5.786897381366708, 0.6692188059568723}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5590745410019947}}, {{
                    2.302585092994046, 
                    0.7631221910650268}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5381885982073523}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5590745410019947, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5381885982073523}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5590745410019947, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 1.6978019321833615`}, {
                    2.302585092994046, 1.6978019321833615`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3681883193368969}, {
                    4.0943445622221, -0.3693578346658271}, {
                    5.786897381366708, -0.37326866017374777`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3998854534506684}, {
                    4.0943445622221, -0.43943360744897597`}, {
                    5.786897381366708, -0.48346418320774776`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.786897381366708, -0.45050316472665036`}, {
                    5.786897381366708, -0.45050316472665036`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.786897381366708, -0.45051030984977175`}, {
                    5.786897381366708, -0.45051030984977175`}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.585130942317204}, {
                    5.786897381366708, -0.4505797894301543}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.36738897076462257`}, {
                    4.0943445622221, -0.36750924045199385`}, {
                    5.786897381366708, -0.3685621707407714}}]}, 
                    "LogisticRegression"], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4510271894387267}, {
                    5.786897381366708, -0.47313838096806876`}}]}, 
                    "LogisticRegression"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6417818851312962}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6046456340628095, 1.6978019321833615`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.6417818851312962}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6046456340628095, 1.6978019321833615`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.783530263171257*^9, 3.7841102940913568`*^9, 
  3.784151020766218*^9, 3.784224857222278*^9, 3.7843910691333323`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"f6b21ff2-ea91-46e6-ab61-c8197a2c0ead"]
}, Open  ]],

Cell["\<\
3) The trained classifier algorithm is then applied to the test dataset and \
the results are assessed. \
\>", "Text",
 CellChangeTimes->{{3.7841513326016445`*^9, 3.7841513329651117`*^9}, {
  3.7841515369070807`*^9, 
  3.7841515759539614`*^9}},ExpressionUUID->"9b099063-25a0-4eee-b1a9-\
f8015555511f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LRtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"LRtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"fcca53ea-22f3-4234-b182-c747a01e4a6e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7314285714285714279`4.080468980712039", "\[PlusMinus]", 
                    "0.0336001519159240536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0228489, "MaxTrainingMemory" -> 
                    191872, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 44, 19.3557982`9.039386022922509}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association[
             "Weights" -> 
              RawArray["Real32",{{
                0.025714632123708725`, -0.025714632123708725`, 
                0.1805289387702942, 0.15961380302906036`, 
                0.21761910617351532`, 0.19447320699691772`, 
                0.17069676518440247`, 0.1303686946630478, 
                0.0690249353647232, -0.07670795917510986, \
-0.04604071378707886}}], "Biases" -> RawArray["Real32",{0.6096142530441284}]],
             "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              11, "$InputDimensions" -> {11}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Weight" -> 11., "Type" -> "NumericalVector"], "Key" -> 
            "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> "Perfect", 
            "Missing" -> "Allowed"]], "Method" -> "LogisticRegression", 
         "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 100., "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.6166435213626122, 0.045946089109057175`], "Accuracy" -> 
            PlusMinus[0.6692188059568723, 0.07386154474606119], 
            "EvaluationTime" -> 0.000015053658536585367`, "TestSize" -> 82, 
            "TrainingSize" -> 326, "TrainingTime" -> 0.0547961, 
            "TrainingMemory" -> 150384, "ModelMemory" -> 9088, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.6901774798503301, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.6166435213626122, 0.0324887911780157]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6692188059568723, 0.05222799915885347]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 100., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 408], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 71764795416728]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[5.461928498146167, 0.8775557503996703], "Accuracy" -> 
                 PlusMinus[0.6261233183099137, 0.03429909757187313], 
                 "EvaluationTime" -> 0.000012841708542713569`, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.0824805, 
                 "TrainingMemory" -> 145488, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.07661911978595978, "MeanCrossEntropyHistory" -> {
                   PlusMinus[5.461928498146167, 0.6205256219768561]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6261233183099137, 0.024253124481650536`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000012841708542713569`, 
                "MeanCrossEntropy" -> 
                PlusMinus[5.461928498146167, 0.8775557503996703], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 145488, 
                "TrainingTime" -> 0.41900094], "Index" -> 1], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6919868549119311, 0.0043570975141618085`], 
                 "Accuracy" -> 
                 PlusMinus[0.6064582118413229, 0.03457388021315767], 
                 "EvaluationTime" -> 0.000011527135678391961`, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.0203747, 
                 "TrainingMemory" -> 65896, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6234112807936206,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6919868549119311, 0.0030809331985548636`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6064582118413229, 0.024447425150655188`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6911780387313434, 0.004816442906295645], 
                 "Accuracy" -> 
                 PlusMinus[0.6221661873234661, 0.0366309032363266], 
                 "EvaluationTime" -> 0.000013395689655172412`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.0241189, 
                 "TrainingMemory" -> 78096, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6240570334549443,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6911780387313434, 0.0034057394402394934`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6221661873234661, 0.025901960079394784`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6884802407739594, 0.010597477690994603`], 
                 "Accuracy" -> 
                 PlusMinus[0.5969296493303664, 0.07679939398845588], 
                 "EvaluationTime" -> 0.000010414634146341464`, "TestSize" -> 
                 82, "TrainingSize" -> 326, "TrainingTime" -> 0.0227419, 
                 "TrainingMemory" -> 150560, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6254500863965796,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6884802407739594, 0.007493548338775439]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5969296493303664, 0.054305372280254526`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000010414634146341464`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6884802407739594, 0.010597477690994603`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150560, 
                "TrainingTime" -> 0.04883695521472393], "Index" -> 2], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6703968332816336, 0.006665096748700282], 
                 "Accuracy" -> 
                 PlusMinus[0.6073986474892685, 0.03447609402281334], 
                 "EvaluationTime" -> 0.000010885929648241206`, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.0296758, 
                 "TrainingMemory" -> 70736, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6430199027872585,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6703968332816336, 0.004712935108270379]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6073986474892685, 0.024378279872356308`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6444013018377472, 0.00914113649649561], 
                 "Accuracy" -> 
                 PlusMinus[0.6708894492023936, 0.035641823568941404`], 
                 "EvaluationTime" -> 0.000014562643678160921`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1292205, 
                 "TrainingMemory" -> 178328, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6683935714404974,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6444013018377472, 0.006463759604423884]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6708894492023936, 0.02520257513945298]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6166435213626122, 0.045946089109057175`], 
                 "Accuracy" -> 
                 PlusMinus[0.6692188059568723, 0.07386154474606119], 
                 "EvaluationTime" -> 0.000015053658536585367`, "TestSize" -> 
                 82, "TrainingSize" -> 326, "TrainingTime" -> 0.0547961, 
                 "TrainingMemory" -> 150384, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6901774798503301,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6166435213626122, 0.0324887911780157]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6692188059568723, 0.05222799915885347]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000015053658536585367`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6166435213626122, 0.045946089109057175`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150384, 
                "TrainingTime" -> 0.0982549680981595], "Index" -> 3], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6373074003292933, 0.13844386590400562`], 
                 "Accuracy" -> 
                 PlusMinus[0.6451224204147037, 0.0750403221509861], 
                 "EvaluationTime" -> 0.000018346341463414636`, "TestSize" -> 
                 82, "TrainingSize" -> 326, "TrainingTime" -> 0.0740537, 
                 "TrainingMemory" -> 150320, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6495310477291801,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6373074003292933, 0.09789459639440341]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000018346341463414636`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6373074003292933, 0.13844386590400562`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150320, 
                "TrainingTime" -> 0.16673440429447853`], "Index" -> 4], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6373028467057199, 0.13844038892693758`], 
                 "Accuracy" -> 
                 PlusMinus[0.6451224204147037, 0.0750403221509861], 
                 "EvaluationTime" -> 9.35609756097561*^-6, "TestSize" -> 82, 
                 "TrainingSize" -> 326, "TrainingTime" -> 0.0578098, 
                 "TrainingMemory" -> 150448, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6495361805571384,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6373028467057199, 0.09789213780034059]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.35609756097561*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.6373028467057199, 0.13844038892693758`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150448, 
                "TrainingTime" -> 0.13016071533742332`], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.795226041307951, 0.2835783163367354], "Accuracy" -> 
                 PlusMinus[0.6287246399280201, 0.034236269868145285`], 
                 "EvaluationTime" -> 0.000010873618090452263`, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.0558716, 
                 "TrainingMemory" -> 76112, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.233233942232916, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.795226041307951, 0.20052015047916952`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6287246399280201, 0.024208698586298198`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6372585687095803, 0.13840621304014386`], 
                 "Accuracy" -> 
                 PlusMinus[0.6451224204147037, 0.0750403221509861], 
                 "EvaluationTime" -> 9.747560975609755*^-6, "TestSize" -> 82, 
                 "TrainingSize" -> 326, "TrainingTime" -> 0.0764891, 
                 "TrainingMemory" -> 150384, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6495861094166203,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6372585687095803, 0.09786797179903567]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.747560975609755*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.6372585687095803, 0.13840621304014386`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150384, 
                "TrainingTime" -> 0.15160028957055216`], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6925402147506716, 0.003568458484478426], 
                 "Accuracy" -> 
                 PlusMinus[0.6066298058196371, 0.03454964333776614], 
                 "EvaluationTime" -> 9.332914572864322*^-6, "TestSize" -> 398,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.0198934, 
                 "TrainingMemory" -> 65752, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6230555085112908,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6925402147506716, 0.0025232811927573652`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6066298058196371, 0.02443028709171106]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6924569281640778, 0.003808858500827336], 
                 "Accuracy" -> 
                 PlusMinus[0.6220298379517702, 0.036623306231776905`], 
                 "EvaluationTime" -> 0.000012134195402298852`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.0500882, 
                 "TrainingMemory" -> 105632, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6230871499625487,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6924569281640778, 0.002693269674515036]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6220298379517702, 0.02589658818596099]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6917282030064611, 0.010543976840818967`], 
                 "Accuracy" -> 
                 PlusMinus[0.5848814565592821, 0.07711959627167222], 
                 "EvaluationTime" -> 9.747560975609755*^-6, "TestSize" -> 82, 
                 "TrainingSize" -> 326, "TrainingTime" -> 0.0266994, 
                 "TrainingMemory" -> 150320, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6225319002040468,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6917282030064611, 0.007455717524817001]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5848814565592821, 0.05453178948606821]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.747560975609755*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.6917282030064611, 0.010543976840818967`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150320, 
                "TrainingTime" -> 0.053308600000000005`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6369735229899602, 0.043682851839821325`], 
                 "Accuracy" -> 
                 PlusMinus[0.6359351592208556, 0.03412714256103984], 
                 "EvaluationTime" -> 9.057035175879397*^-6, "TestSize" -> 398,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.0556456, 
                 "TrainingMemory" -> 75848, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6689312584260056,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6369735229899602, 0.03088844075750491]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6359351592208556, 0.02413153392743131]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6230438478011503, 0.12326881512895035`], 
                 "Accuracy" -> 
                 PlusMinus[0.6330742276436193, 0.07555340898096463], 
                 "EvaluationTime" -> 9.54390243902439*^-6, "TestSize" -> 82, 
                 "TrainingSize" -> 326, "TrainingTime" -> 0.0865444, 
                 "TrainingMemory" -> 150560, "ModelMemory" -> 9088, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6668785833045238,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6230438478011503, 0.08716421508651168]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6330742276436193, 0.05342432783220069]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.54390243902439*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.6230438478011503, 0.12326881512895035`], 
                "ModelMemory" -> 9088, "TrainingMemory" -> 150560, 
                "TrainingTime" -> 0.16395883680981596`], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 71760500449432]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843910635467429`17.33057099743014*^9, 
         "PreprocessorEvaluationTime" -> 0.0000114887623762376`2., 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
             "ElapsedTimes" -> 0.6118465, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8000000000000002, 
             "ElapsedTimes" -> 0.9397587000000001, "ExperimentCounts" -> 3], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.3956420999999999`, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[71769090384024]], "ID" -> 
            71773385351320]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.4916271, "MaxTrainingMemory" -> 
         13481808, "DataMemory" -> 806280, "FunctionMemory" -> 236472, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 44, 23.6667068`9.12671275689113}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
     1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
     2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJxllnk0FAobxodUlkqUUKlQsrYolAqpK3Unl1SIL6WIFmu0iFtJRbSiU5Ql
uZGIRCjPFCq51hHGGGbfGLMwKNHn+/v74z3vn+85z/t7zvPo+4Xs81ckEAjF
0/O/rX7/UWBFSDsOnmWK4kxGceyN8aWjASww4/wvSjcLwBkhbk+6z4W0e9GW
dY0c5KdO9t61qkeNurHwscYU5KGZwYVlXfj108BlQ60MTiucIm6GsGAcmKn+
c40AKnmP1yy73o3thkccal1luE+OK11hK4SGZQ7x3zQmeBdbfd2GqxEefPF8
ipEi6c85h5nj3e9hwVcxOSFQIF3X5RFKgj+jQ8dk26jdJNZPugvMNamoLBoz
n68shQo1oLBSUA5jgp12bf4M0qGc1sm6w2x4XqLPvKPLh1j1Vxmb2Q+qduTc
h2IR1JrcekfNv+PbwTw3xz9GMLhYM14hrB+q2otm3HYeQmf21P2kvF5omo3l
FrhIUG5tdvV0LRvNRykzB/J5IJk3zyl7SsflL3t9DwgHEXRgRqfp8R4kvbNT
nvCWYhY1RprmxkVqmS5TS40LZbfVN8iZPeAX7tIT2knRv73fb+gFDQZDRadO
fRCD7HivLEedCbtGv+UKAiGsJ5OCDvWyQOCdkT8p4qPCQMVbuZqCt+9+/0fv
tRS2sZOztx+jI9+oxf+0owgWTc9bOx36MD8vy9fMTowVTRGiqZRmuP/6mBz9
ZRwC8oRArZWJUg1eopJMgEhmm36hUgfMfaq1g5XlCDxo9jprhIoQU+tjz59K
YL3wvvuUfhdyM+oeWy4aBk32yq9LxMGm3xH71odw4Rbgo2L/g4KkC6t8aHel
CM2Va0TQ6Xgdq3WjOnEQPd9TxKUP+SAFlxGWSVjYMtT+pqWOgQWrFpx5RxyA
y4ODudxaLgqvLrzrks4BTyuIHa3DhcU/7XKdnVz02uquzc3kIHEDvyoQXIgZ
jfXJ26b1UWmIoRQK0a2zJ8XuLQvxqy7Y7Ovl40w+u6c0vwfCNwNRBrZStPg6
/1tzhQIBbfiSVZMUBLOdCytLeqGcZ+tduVuCtDDniQUr+kA+VFfv6SVG+Ihj
vaUCD+ye29+fHuFgiZ+5f8TBDqRmuzB3to3gpibRd+WOXnhmefvNjZbg09d9
S+tWseFyVNivdYiPuO6ly0vbm3C9e5xMMvgB+XkHmz0EMlyyOKeWQ44TfdnG
xNd0fFzhmHO3dRC0devLCffZmA2fjb50HphG0pol4gZ8NfMY0jWcQMkDzbGB
SQ4iigaiWYe5MH45ixtyhwHV/NOlpqkDeJWToWi+UAgvm/0P2sqYOOKv5ehD
pcC1JGWkI1MKBaWl+w9UsBE+VqBtUcHDRJfmWfpXFpJfxmS61fPRX6wawjbu
grZjw/ZtmsNYeWMbj9TIQtHhRnf5Rz5yuRtaPJ504KQNzWtHzgh2kcInV57s
gIx6iW5QN4LUx5/u7PCmIzCw46yfiwjVXbb0ftCR92TeVlrlIEbO9S9Xm/7X
ufSPyXGvhGAkplwbdabCtd0yzXxIAkdpqtb7PAoMpDO9jlVJYVa0yJsay0Tj
YnFDpqcQlDkNGUqa3XDVt7PMvCODnsjQibmcDtmw77+WL0SwLL+6R82Cjj21
+6lGKSJcHbNbNbyFijpVtV/EEQlOaajpbXrBxOwiB9v5K4VIzqzyNdKmYKVH
cqCFkgy3rDp11yqwcaTm78UK1/gonpkZvsW9BTHe1nq3Q8ehw6EX5wywkfSm
pF8vlgfD90z/6hoalm6KPzVaIAbpRF7PmQQeWPyRASsGG7VfySFlaERK5K6o
BaY/MRTcJSzeysaNZQGrZznwoT0nvj5+Px3+rlvr/vYUIdw5ga7WXA8l3beF
p/Mn4b9qg1OsCgMrcrnPpv4aRL9Mta7+RS86zLlFRXslUI1vZSV5ZmH0Zpgw
q0iN9IAUrXM3ngmfC398UncV4nKxbmj3vjasI6Sr3501Bqr7vWy1xdN6ut8I
J1KFaH6+uPy7fT/Ir/TyIkOGsO2IfvbnzTQUrgkMcp4ngbtIO7MrbNr/YYYC
JaoEV2dpPqe1fgG5q+AG0fcXNmraawiSWIj6qjoxoibAzl7Ok7NGDJgP27v/
MBrEJa8vWU2EPoj1JJZnIsRg6AUkjUf2IFGyZ7mTuxQcPjEhy52LGe0HWfNV
uCjWDorKftwJwkODpKnjwxA8i9+cymCCkRZXu7pXgLZHOhGJQf2Q6bGWhrkM
AV6jt5kRNPTFZF1LF4phNKqvKNdkYV3bvD9MMgVglOuIn0RwcV3RSi9GwAFx
rc6+0zvfo3R/2KMP8xVJrho+LaG5NHRfM/xq+1EM3pfYmEd1XRC8bjpwoEqG
c+Z3imtsaSBSljjR5kqwcUIr/ZxbG9amuPa9nD2G8OYhD9l3GuJC2m4ffSjG
rPctbZ4pXBhm23QGN3Cw5pKf855xOhZxbw9cDxzE+VSzbfnBdEQ7O5H814vw
KqHtn8PkNihf8UqgZ43iVvQ343OG3Xjfsumj1vXp+9p2DVnOvTCpPbIr9bwE
ciLvm3s3Gf6DKwrqjeSwT27TDc4ho29i3EGDKMfLrlaFix+6UHGy+O2fNTJE
3yNMfA5lw+HOD1vfmXyEO2U4ZjC7Ef/C+uGr5TLsJXQ5hZX0QG7vsfq4tRQn
K9dSTSI48KNaF1eLuIi91mkiSWSg64OCunv6ACor/lNY5PcWluMbtVXWK5Hm
RraZO+V9B51yXCwaH4as2LpmoScVmnnc35o8CaJKBVrpN3jY1CVLYzHZkDCO
TTuqG/PTQs9t8pYhRilL2DLIhOmLGkXrZgHmBK23TTRhwrldqPbjsxBFnUHc
wMcUFKTd1HlOkuLqRc7Ty3IyTK0Moj5rypEum//srQ0DN9s3lr2ZN4jkd+53
lr7uRFXkfBtPz2HUbb+ysb6vGeWNn9Vin48jPJ5Sr1nfjtgg9riDUA7D1Giz
KG825mQ3Djnp8THBHPgrdzpPKY0dqc3FUrx+VGR/QdSPlbc8Kk7wRJCy/O+m
NX+HgkNJ9O/+YWSsnTE1foGB256bJ5+UDmCnF1HLVIuNP2MTLNTP8KF+L0fZ
oYqB1schuWOHBjD30M7EJauoWDfeULnotwQBdrRdBrvZuJxewxOv5+MZV9+8
wP4j8j5JCVvvEUit1XmX8162w9TgYrb8lxx7Typ97TjMgnK3xRXFHQLs3Tlo
9z6oCiP15O2BKYqk8ogAxxmyXniHbkk4ZyHBfo+Z+SY20/3lwA7rQ1FDuOMW
iCBrJgwITTary4X/x4+cXEIW+zKglU5ck9Y5gApS5taCN3W4Zcabyzk9hZ/R
18uObmlF86e/qz+Kx/Bt1pmkm86dOD65t4GaOowfem3Ehmle2Kwtu29O8+K5
5uE23aVMHP9mlfuoW4hFcTnUICMO7pfTt7LteLgeuTDK6tcHPGzSV//nqQJp
w737F3SPNkB5TUm9VsQEJmJUVAc3sGG9+3jN+G4+EpYsX9aUTMFJh8WX1L9M
5/dfuUR1QjtIhIbZu2NHIUg46H9BvxM+DsTDAa+GsaGm6orS8Sa8vZzhK/T4
gY1uJ6NYu5mgVXWntmcI0edb/POygA7Kz/i08phB/BeAPE1v
     "], "CountMatrix" -> {{122, 6, 0}, {41, 6, 0}}, 
    "IndicesMatrix" -> {{{1, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 
       23, 24, 26, 27, 28, 30, 32, 33, 34, 39, 42, 43, 45, 46, 47, 48, 50, 51,
        52, 53, 54, 55, 56, 57, 59, 61, 63, 64, 65, 66, 67, 68, 71, 72, 73, 
       74, 76, 78, 79, 81, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
       100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 114, 120, 121, 
       122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 
       140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 
       158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 173, 
       175}, {3, 40, 49, 60, 109, 133}, {}}, {{2, 6, 14, 15, 19, 25, 29, 31, 
       35, 36, 37, 41, 44, 58, 62, 69, 70, 75, 77, 80, 82, 83, 85, 87, 89, 
       105, 115, 117, 118, 119, 127, 136, 139, 143, 144, 145, 157, 166, 169, 
       170, 174}, {8, 22, 38, 84, 103, 116}, {}}}, 
    "ExtendedClasses" -> {1, 2}, "Weights" -> 
    SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00010435828571428572`, "SingleEvaluationTime" -> 
    0.0062237500000000001`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783530267962484*^9, 3.7841103194295874`*^9, 
  3.784151125864934*^9, 3.784224861925072*^9, 3.7843910738001533`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"66dcead6-fca1-48f1-9947-6455e78125c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"LRtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\"", ",", 
     "\"\<Recall\>\""}], "}"}], "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.784151780532156*^9, 3.7841518049634595`*^9}, {3.784233094493338*^9, 
  3.784233108531312*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9a4a57c1-3122-41ba-8649-cf1a81ad5f1f"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.7314285714285714`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8384879725085911`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.2033898305084746`"}]}], 
      "\[RightAssociation]"}]},
    {"0.26857142857142857`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.7484662576687117`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.5`"}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "122"}], ",", 
          RowBox[{"2", "\[Rule]", "6"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "41"}], ",", 
          RowBox[{"2", "\[Rule]", "6"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.953125`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.1276595744680851`"}]}], 
      "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.7314285714285714, 
    Association[1 -> 0.8384879725085911, 2 -> 0.2033898305084746], 
    0.26857142857142857`, 
    Association[1 -> 0.7484662576687117, 2 -> 0.5], 
    Association[
    1 -> Association[1 -> 122, 2 -> 6, Indeterminate -> 0], 2 -> 
     Association[1 -> 41, 2 -> 6, Indeterminate -> 0]], 
    Association[1 -> 0.953125, 2 -> 0.1276595744680851]}],
  Editable->False]], "Output",
 CellChangeTimes->{
  3.7835302703326263`*^9, 3.784110324688274*^9, 3.7841511303866887`*^9, {
   3.784151785344324*^9, 3.7841518061726017`*^9}, 3.784224876111579*^9, {
   3.7842331026565166`*^9, 3.7842331090000167`*^9}, 3.784391076115585*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"b9d8e2c1-4e7c-4163-aab3-672e21669382"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LRtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"97a4c5eb-af4e-4ae5-8b20-1f09ea4451c9"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQMbV5o8uZP+3J7afFMgKS5w2n5GNvuzW40v7Zcq
Prfb3XDDPkN/4d6Wb6/sA9hLgeiBfSwYvLWXUZ7x4n3KU3v3iHeZLU/f2f/3
CzstrfzCfqH+C+5fTe/swbpDXtm/3/v9XvX7t/ZNnf+AKl7bv/LNr7o8+539
qazKZBbht1B3fLA/suzShOL5CL6Qz5fyTVHv4HyeDl+gkxD8tdPM3QwuvifI
h/kPAAObgtA=
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 
          7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBmJGIGZiQICNK02e3El/bk9tvimQFBc4bT8jm/3ZrcaX
9ksVn9vtbrhhn6G/cG/Lt1f2AeylQPTAPhYM3trLKM948T7lqb17xLvMlqfv
7P/7hZ2WVn5hv1D/Bfevpnf2YN0hr+zf7/1+r/r9W/umzn9AFa/tX/nmV12e
/c7+VFZlMovwW6g7PtgfWXZpQvF8BF/I50v5pqh3cD5Phy/QSQj+2mnmbgYX
3+PkAwAjiHoH
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.21142857142857144`, 0.7971014492753623}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7971014492753623`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.21142857142857144`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7971014492753623}], 
          Row[{"RejectionRate = ", 0.21142857142857144`}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.38285714285714284`, 0.8425925925925926}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8425925925925926`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.38285714285714284`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8425925925925926}], 
          Row[{"RejectionRate = ", 0.38285714285714284`}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.5142857142857142, 0.9176470588235294}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9176470588235294`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.5142857142857142`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9176470588235294}], 
          Row[{"RejectionRate = ", 0.5142857142857142}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.6685714285714286, 0.9655172413793104}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9655172413793104`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.6685714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9655172413793104}], 
          Row[{"RejectionRate = ", 0.6685714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.7542857142857143, 0.9534883720930233}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9534883720930233`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9534883720930233}], 
          Row[{"RejectionRate = ", 0.7542857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8228571428571428, 0.9354838709677419}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9354838709677419`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8228571428571428`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9354838709677419}], 
          Row[{"RejectionRate = ", 0.8228571428571428}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8685714285714285, 0.9565217391304348}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9565217391304348`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8685714285714285`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9565217391304348}], 
          Row[{"RejectionRate = ", 0.8685714285714285}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9085714285714286, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9085714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9085714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9257142857142857, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9257142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9257142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9485714285714286, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9485714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9485714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9657142857142857, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9657142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9657142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9942857142857143, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9942857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9942857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9942857142857143, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9942857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9942857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.718},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9942857142857143}, {0.7314285714285714, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.783530273228984*^9, 3.7841103401787252`*^9, 
  3.78415113391945*^9, 3.7843911384052563`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"3246e7ac-cdb7-4426-9605-f4fea2e7629f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LRtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"202a47c4-0ffa-4255-a954-5351f3276724"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8865302491309965, 0.6737884347243291, 
   0.23302919141998854`}, {0.9320480322325879, 0.8616713714698465, 
   0.6475801140331775}}, {{1., 0.42, 0.}, {0.9320480322325879, 
   0.8616713714698465, 0.6475801140331775}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["122", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "122", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7484662576687117`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.953125`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8384879725085909`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{122, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7484662576687117}], 
         Row[{"Recall = ", 0.953125}], 
         Row[{"FScore = ", 0.8384879725085909}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["41", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "41", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.25153374233128833`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.8723404255319149`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{41, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.25153374233128833`}], 
         Row[{"Row fraction = ", 0.8723404255319149}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.5`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.046875`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.5}], 
         Row[{"Row fraction = ", 0.046875}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "6", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.1276595744680851`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.2033898305084746`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{6, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.1276595744680851}], 
         Row[{"FScore = ", 0.2033898305084746}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.953125`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.953125}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.1276595744680851`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.1276595744680851}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "163", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7484662576687117`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{163, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7484662576687117}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "12", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{12, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["163", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["12", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.784391142344266*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"17c62b43-fdf7-44d6-9288-444fa528bfe7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.784387369479958*^9, 
  3.784387372821574*^9}},ExpressionUUID->"5a57c73b-96e7-4c7f-889d-\
a023f7a58931"],

Cell["\<\
1) The Classifier measurements show that 73.15% of the data is classified \
correctly and 26.8% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 122 data correctly predicted to be belonging to Dataset=1 and 6 data \
belonging to Dataset =1 has been incorrectly classified to be belonging to \
Dataset =2
\tb) 6  data correctly predicted to be belonging to Dataset=2 and 41 data \
belonging to Dataset =2 has been incorrectly classified to be belonging to \
Dataset =1
3) F-score of Dataset=1 is calculated as 0.838 and Dataset=2 is 0.20.\
\>", "Text",
 CellChangeTimes->{{3.7842258366243773`*^9, 3.7842260386052065`*^9}, {
  3.7842261972799735`*^9, 3.784226245884201*^9}, {3.7843873575429115`*^9, 
  3.7843873587088456`*^9}, {3.7843911785874166`*^9, 3.7843912282477417`*^9}, {
  3.784391263266882*^9, 
  3.784391264994446*^9}},ExpressionUUID->"aae6c014-a947-41b5-9c80-\
3b6c7abdd191"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gaussian Naive Bayes Classifier", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 3.7835301376715503`*^9}, {
  3.7835303005967283`*^9, 
  3.783530329439905*^9}},ExpressionUUID->"2b5f5f08-5d95-42df-85cc-\
29577b009279"],

Cell["\<\
Bayes\[CloseCurlyQuote] Theorem finds the probability of an event occurring \
given the probability of another event that has already occurred.
The Gaussian Naive Bayes Classifier is a collection of classification \
algorithms based on Bayes\[CloseCurlyQuote] Theorem. The principle of this \
algorithm is that every pair of feature being classified is independent of \
each other.\
\>", "Text",
 CellChangeTimes->{{3.7842268820644994`*^9, 3.7842269225093937`*^9}, {
  3.7842269692633424`*^9, 
  3.784227033991784*^9}},ExpressionUUID->"d8f0a96f-2acc-455d-b589-\
94134c78cf85"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{{3.7842270613644423`*^9, 
  3.7842270745220823`*^9}},ExpressionUUID->"d60bdd1c-9fb0-49c6-a29e-\
923978c574ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GNBtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NaiveBayes\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}, {
   3.7835303328549466`*^9, 3.7835303614108124`*^9}, 3.7835303919480543`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"7f7c9c0a-d468-4158-bd81-a87437b0fd46"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NominalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0297614, "MaxTrainingMemory" -> 165440, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 47, 49.5013011`9.447191469659206}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]], 
           MachineLearning`MLProcessor["DiscretizeNumericalVector", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Boundaries" -> CompressedData["
1:eJy1z31QEnYcx3FCpxla+RBNJUmxsiw7rZ16WT9wcupqV3GWs/VgutxMZ5mc
0pzlQ7lSR62hmfmQWPmQuZjpUpMvKgYYTVEZKiBJakFh4hOlVvOum3/sruuv
/njf67/P3ccx7BjtCBaDweDmWjrXDCOWvWZoBj7ksOX9M4371OhTOfRe+FRO
v/+BPmSClpR0OcuYR1jin5UyYQB7LH38L80YbNJSahSNzyG30iNmS81TaA1z
4en9VTBRPq21cOsCV1/3RUtKLqA7DmlvhvF30c/JTFYBUYK+9r4fmeKtRIrL
s75GVcPI0tpeQoURRBLkb/T7YRxxjSvjh44bUHYSPbBGZEQOwf2mvheggOaq
WNvo0D5IwKjvUqN7591Ao+0iMnrmVZc0P3+VJpt3u3+JU+VVKRz1mZjwgk6w
Cs9gZra2A4mlu4bzeQDWnzv7DrZwwHj3y/3XTnQi7Ahx10HPWSQ3oVBOhqwi
73x3aOlIcD/85xH1BOvhKsVH/an1vG35eC9cLHMoTG+SwY3MaqfvLkhBFDkY
+lr/CBymPOOOrW2FnfGvuIrmfDg3msy4BH3oBCU741n4O0R16ksvxdiSbxYu
ruQP6qDQvJRI8XoCg9yeF9igATjNYRysJTyGisNerjfPKiE49PQVlaQPCqw4
EcW6Hvi2X8P9gv8PXGxZy87f0w018oSrZfslwPjjirg8tRkIcXuVOH0kandr
THvg0oTqC4vtMt48RrNS3dCNBVNIM1C8pF3qQBaNMB+yM2XQZSq1Me2QAko6
0qdo7YbKscmiPxu6IDDnFomyqAtqcT4aPKYTnFLEVS8mO4DnnOqR6NcBvyde
NHAtHwF1d6cFXiMEw2ob5x95fNiGD7k0W9IArO1aQYKwDPxSGFsPeDQiuBP1
Vrx3AK3gbM8zkjiTh5eKuf1G3eCvFjh+1t0Jm1qOLaabdcKTWzr0S6wEWKyo
2LzeDqAmadi3KR0Qet+J6D3yN5AO2Q2dZYpheuVRbvjrNmCd5RxgGgsg2KWc
JL/OB1esUKYn10PRE/mKorxy2LAywMukpR6pPeUix3g5ktvGILpwA5mK37gq
ToXj8ZtkY+RkA5j38K97rB+d27HB/ZqohVJF+O2AOwPAdKcR6tKU8Nbx+6KF
bRKoDRw9H0q5BwIzkfthcwG6br5PtjBcgjYTqEF1BCVSL8t9tjlqEFUUWKyx
CNCivL2zkn7MODpl56n/6uUkepifPrmHY0I2q109kzFlwhNGUKjWlw2QTty2
vvC0HkwfJ2RNqrSwICWOV8VTg2mJ+i4+TAkGUbW3lX/bvMnC+F5STxlafjyC
mUN/gJZPbVH1MOTIch97S7V8CFnV3TSdntYhsyxp5EqLcZTVIGtvIRjQjugx
2x2NpmS2sThOb4fhRagCjdfFTkF8G/vSI6YezKMMFPU3GghKpTXSXFTzrjsQ
rWvaKpi3lJWLvqwA9H9fMlJzsHQ5Coq44FZ/6imyF46cqyseRWbK7OllZyZR
BjnGPPAknvwvCRYNAg==
              "], "Version" -> {11.3, 0}, "ID" -> 7308917455309454366, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 11.]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 11.]], 
             "Index" -> {
               Association[1 -> 1, 4 -> 2], 
               Association[1 -> 1, 12 -> 2], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 4 -> 3, 6 -> 4, 8 -> 5, 9 -> 6, 10 -> 7, 11 -> 
                8, 12 -> 9, 13 -> 10, 14 -> 11, 15 -> 12], 
               Association[
               1 -> 1, 2 -> 2, 7 -> 3, 8 -> 4, 9 -> 5, 10 -> 6, 11 -> 7, 12 -> 
                8, 13 -> 9, 14 -> 10, 15 -> 11], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 8 -> 7, 9 -> 8,
                 10 -> 9, 11 -> 10, 12 -> 11, 13 -> 12, 14 -> 13, 15 -> 14], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 6 -> 5, 8 -> 6, 11 -> 7, 12 -> 
                8, 13 -> 9, 14 -> 10, 15 -> 11]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5168226093250809328, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 11.]]]]}, 
         "Invertibility" -> "Approximate", "Missing" -> "Imputed"]]], 
    "Output" -> Association[
     "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "ClassNumber" -> 2, "ClassPriors" -> 
      Association[1 -> 0.7103658536585367, 2 -> 0.28963414634146345`], 
      "LogProbabilities" -> {{{-1.4944341205044698`, -1.2096506052426172`}, \
{-0.2540868170818807, -0.354251434724677}}, {{-0.2540868170818807, \
-0.354251434724677}, {-1.4944341205044698`, -1.2096506052426172`}}, \
{{-2.80758981192315, -1.9054109242416766`}, {-3.0484924092791235`, \
-2.46431336058342}, {-2.674177360720118, -2.597607082380918}, \
{-2.674177360720118, -3.442373295846342}, {-3.0484924092791235`, \
-2.241502643354493}, {-2.5024585818258602`, -2.3467152190756635`}, \
{-2.402441912382277, -2.1463135215976497`}, {-3.1436815310359667`, \
-8.862908295118627}, {-2.5564868448399025`, -2.7514409556159496`}, \
{-2.5024585818258602`, -3.442373295846342}, {-3.0484924092791235`, \
-2.7514409556159496`}, {-2.2689898376241455`, -2.933319151728733}, \
{-3.0484924092791235`, -2.933319151728733}, {-2.9615819251917634`, \
-2.7514409556159496`}, {-2.5024585818258602`, -4.532174954832297}}, \
{{-2.6739692225155993`, -2.059125606519469}, {-2.2280567998524297`, \
-1.409201590395126}, {-2.1888617109704596`, -1.8362594861960801`}, \
{-2.5563018138466838`, -2.2411698092692105`}, {-2.4510338094059083`, \
-2.2411698092692105`}, {-3.0481897916342056`, -2.3463454649579365`}, \
{-3.0481897916342056`, -2.9326544790555427`}, {-2.4510338094059083`, \
-3.4412677125385924`}, {-2.5563018138466838`, -2.9326544790555427`}, \
{-2.4510338094059083`, -3.843974198207677}, {-2.2688510354863696`, \
-8.639764743804419}, {-2.3113804780766, -8.639764743804419}}, \
{{-2.450958117773582, -2.058999526963102}, {-1.3697535064217257`, \
-0.7163836062696644}, {-2.738337480975284, -2.346177440089861}, \
{-3.2483563277713343`, -3.8432231655024545`}, {-2.961178414644576, \
-3.1545906652970355`}, {-2.5022036098713936`, -1.9050649932514587`}, \
{-3.1431974453433473`, -3.8432231655024545`}, {-2.450958117773582, \
-3.440765578458245}, {-2.2687879499739365`, -3.8432231655024545`}, \
{-2.3557305109431694`, -8.552753366814787}, {-2.3557305109431694`, \
-8.552753366814787}}, {{-2.881624596387009, -2.241502643354493}, \
{-2.9615819251917634`, -2.241502643354493}, {-2.80758981192315, \
-1.9794457087055353`}, {-3.4997859700623914`, -2.933319151728733}, \
{-3.366492248264894, -1.9054109242416766`}, {-2.5564868448399025`, \
-2.597607082380918}, {-3.1436815310359667`, -2.597607082380918}, \
{-2.881624596387009, -2.46431336058342}, {-2.5564868448399025`, \
-3.155798030369752}, {-2.4512003511666394`, -3.8456284583037035`}, \
{-2.402441912382277, -3.442373295846342}, {-2.6136017188953664`, \
-3.442373295846342}, {-2.5024585818258602`, -3.155798030369752}, \
{-2.5024585818258602`, -3.155798030369752}, {-2.3115253111567284`, \
-8.862908295118627}}, {{-3.2488941067571373`, -1.9054109242416766`}, \
{-2.9615819251917634`, -2.3467152190756635`}, {-2.80758981192315, \
-2.1463135215976497`}, {-3.0484924092791235`, -3.442373295846342}, \
{-2.674177360720118, -2.241502643354493}, {-3.1436815310359667`, \
-2.241502643354493}, {-3.1436815310359667`, -2.933319151728733}, \
{-2.80758981192315, -2.241502643354493}, {-2.4512003511666394`, \
-3.442373295846342}, {-2.7386603741004656`, -2.7514409556159496`}, \
{-2.5024585818258602`, -3.442373295846342}, {-2.5564868448399025`, \
-2.7514409556159496`}, {-2.6136017188953664`, -3.442373295846342}, \
{-2.3559507388799736`, -4.532174954832297}, {-2.2281900532339316`, \
-8.862908295118627}}, {{-3.0484924092791235`, -2.0594030375102896`}, \
{-2.7386603741004656`, -2.7514409556159496`}, {-3.1436815310359667`, \
-1.7719984730386444`}, {-3.2488941067571373`, -2.3467152190756635`}, \
{-2.9615819251917634`, -2.933319151728733}, {-2.7386603741004656`, \
-2.933319151728733}, {-2.80758981192315, -2.46431336058342}, \
{-2.881624596387009, -2.3467152190756635`}, {-2.5564868448399025`, \
-3.155798030369752}, {-2.9615819251917634`, -2.597607082380918}, \
{-2.402441912382277, -3.8456284583037035`}, {-2.674177360720118, \
-2.597607082380918}, {-2.5024585818258602`, -3.8456284583037035`}, \
{-2.4512003511666394`, -3.8456284583037035`}, {-2.151268497991473, \
-8.862908295118627}}, {{-2.5564868448399025`, -2.7514409556159496`}, \
{-2.7386603741004656`, -2.597607082380918}, {-2.881624596387009, \
-2.46431336058342}, {-2.80758981192315, -2.7514409556159496`}, \
{-2.80758981192315, -3.442373295846342}, {-2.674177360720118, \
-2.7514409556159496`}, {-2.674177360720118, -2.933319151728733}, \
{-2.881624596387009, -2.1463135215976497`}, {-2.9615819251917634`, \
-3.442373295846342}, {-2.3559507388799736`, -2.46431336058342}, \
{-2.4512003511666394`, -3.155798030369752}, {-3.2488941067571373`, \
-2.46431336058342}, {-2.5564868448399025`, -2.933319151728733}, \
{-2.7386603741004656`, -2.597607082380918}, {-2.6136017188953664`, \
-2.597607082380918}}, {{-2.2689501779045345`, -3.1555607542979307`}, \
{-3.14358642427856, -2.751282589949295}, {-2.61354574195785, \
-3.44205729015561}, {-2.2281519790272983`, -2.9331292001658107`}, \
{-3.0484059377498207`, -3.845155533253508}, {-2.188953231585542, \
-2.0593237636587283`}, {-2.451152764976143, -2.2414075365970865`}, \
{-2.961502651340202, -3.1555607542979307`}, {-2.61354574195785, \
-2.751282589949295}, {-2.807521851747787, -2.3466095610904634`}, \
{-2.8815514140531917`, -2.3466095610904634`}, {-2.451152764976143, \
-2.3466095610904634`}, {-2.8815514140531917`, -2.46419451810898}, \
{-3.14358642427856, -2.5974712958371557`}}, {{-2.188803474939811, \
-3.440765578458245}, {-2.5022036098713936`, -3.440765578458245}, \
{-2.3557305109431694`, -2.9323525010976383`}, {-2.0796764764865077`, \
-2.1458733807454737`}, {-2.3113146517921406`, -2.346177440089861}, \
{-1.5352124935716875`, -1.5000323175824655`}, {-2.6738746285600823`, \
-2.1458733807454737`}, {-3.2483563277713343`, -1.9050649932514587`}, \
{-3.499094885031431, -2.5969159973499574`}, {-2.8812520875356165`, \
-3.1545906652970355`}, {-2.556217720166274, -2.7506349914377255`}}}, 
      "FeatureNumber" -> 11, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NominalVector", "Weight" -> 11.]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NominalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 11.]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2], 
               Association[1 -> 1, 2 -> 2], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14], 
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5156590427180248755, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NominalVector", "Weight" -> 11.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NominalVector", "Weight" -> 11.],
              "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
             "Perfect", "Missing" -> "Allowed"]]}, "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> "NaiveBayes", 
      "Options" -> 
      Association[
       "SmoothingParameter" -> 
        Association["Value" -> 0.2, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[1.1602308041304017`, 0.43294941520026253`], "Accuracy" -> 
         PlusMinus[0.6451224204147037, 0.0750403221509861], "EvaluationTime" -> 
         0.00006778536585365854, "TestSize" -> 82, "TrainingSize" -> 326, 
         "TrainingTime" -> 0.1656495, "TrainingMemory" -> 193184, 
         "ModelMemory" -> 34472, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.34642548855551136`, "MeanCrossEntropyHistory" -> {
           PlusMinus[1.1602308041304017`, 0.3061414673988557]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6451224204147037, 0.053061520655385365`]}, 
         "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType}]}], 
        Association["ID" -> 97925441216872]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3513549647322294`, 0.2582143330206576], "Accuracy" -> 
              PlusMinus[0.6126643925415233, 0.0327446200644934], 
              "EvaluationTime" -> 0.00004635025, "TestSize" -> 1000, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.016279674999999997`, 
              "TrainingMemory" -> 55077., "ModelMemory" -> 
              24647.999999999996`, "ExperimentCount" -> 7, "ModelUtility" -> 
              0.17974692165257608`, "MeanCrossEntropyHistory" -> {
                PlusMinus[3.071361332148744, 0.4687945464335825], 
                PlusMinus[2.4395630679534817`, 0.4519336455274383], 
                PlusMinus[2.609230744827191, 0.2707320745836584], 
                PlusMinus[2.319081033176375, 0.2986796045267255], 
                PlusMinus[1.7098905950908578`, 0.2401903721602958], 
                PlusMinus[2.257214428421174, 0.3688955858552475], 
                PlusMinus[3.552026304389758, 0.49269884094964705`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5697540682615891, 0.04958202899129229], 
                PlusMinus[0.6885659494497083, 0.04654190122088216], 
                PlusMinus[0.5361099124900776, 0.03499533202189083], 
                PlusMinus[0.625417700885745, 0.03423736956986187], 
                PlusMinus[0.7073095088085589, 0.03199792772751514], 
                PlusMinus[0.579655058360599, 0.04944392451438267], 
                PlusMinus[0.5004471375685197, 0.04999756037223271]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9879485801152654`, 0.23257588770364698`], 
              "Accuracy" -> 
              PlusMinus[0.6836447875213876, 0.022377044929216872`], 
              "EvaluationTime" -> 0.0000883907222222222, "TestSize" -> 1000, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.01867008333333333, 
              "TrainingMemory" -> 67052., "ModelMemory" -> 33789.33333333333, 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.2123068173724622, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.70272914750161, 0.4766962560057276], 
                PlusMinus[2.1940520875616265`, 0.2975770707743552], 
                PlusMinus[2.2663428287244494`, 0.3068785027923229], 
                PlusMinus[1.497449217351601, 0.22604141307558184`], 
                PlusMinus[2.0655165264429733`, 0.2574091205941749]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6291600088556487, 0.04844795485259669], 
                PlusMinus[0.6589949198210067, 0.03364549780758627], 
                PlusMinus[0.6589949198210067, 0.03364549780758627], 
                PlusMinus[0.7233807574187693, 0.031650884259576295`], 
                PlusMinus[0.7023699622399942, 0.02628746475611133]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1602308041304017`, 0.43294941520026253`], 
              "Accuracy" -> PlusMinus[0.6451224204147037, 0.0750403221509861],
               "EvaluationTime" -> 0.00006778536585365854, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.1656495, 
              "TrainingMemory" -> 193184, "ModelMemory" -> 34472, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.34642548855551136`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1602308041304017`, 0.3061414673988557]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006778536585365854, "MeanCrossEntropy" -> 
             PlusMinus[1.1602308041304017`, 0.43294941520026253`], 
             "ModelMemory" -> 34472, "TrainingMemory" -> 193184, 
             "TrainingTime" -> 0.22359561365030672`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Real], 1], 1]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 97921146249576]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843912716167858`17.33057102130814*^9, 
      "PreprocessorEvaluationTime" -> 8.4195296523517`3.*^-6, 
      "PreprocessorMemory" -> 101520, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.32000000000000006`, 
          "ElapsedTimes" -> 0.5198487, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.44791330000000007`, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.7558201, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[97929736184168]], "ID" -> 97934031151464]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.2547526, "MaxTrainingMemory" -> 703440, 
      "DataMemory" -> 806280, "FunctionMemory" -> 223016, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 47, 51.6487583`9.465634735060855}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7835303952341733`*^9, 3.7842270792441893`*^9, 
  3.7843912717247577`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"839c0caf-b9c7-4948-96b8-e093075c1a24"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{{3.7842270992907476`*^9, 
  3.7842271080713835`*^9}},ExpressionUUID->"0552187f-b5f4-4fce-98be-\
06d9295a742d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "GNBtraining", "]"}]], "Input",
 CellChangeTimes->{{3.7835303646449585`*^9, 3.783530366748584*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"6bdb00fd-3e1e-499e-90de-b5e8252f350e"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"NaiveBayes\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 1, "Length" -> 1, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 1], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[172.8], 
                    TypeSystem`PackageScope`AtomShape[60]]], 1, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[167168908], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 1], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[167168908]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["SmoothingParameter", 
                    Style[
                    "SmoothingParameter", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1407171194][{
                    Key["SmoothingParameter"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1407171194][
                    GeneralUtilities`Slice[
                    Key["SmoothingParameter"]]], "Mouse"], 
                    ImageSize -> {{172.8, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.2"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1407171194][
                    GeneralUtilities`Slice[
                    Key["SmoothingParameter"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1407171194][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1407171194]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1407171194][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1407171194][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association["SmoothingParameter" -> 0.2], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Atom[Real], 1], 
                 Association["ID" -> 37173128814956]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "64.5122420414703725555`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "7.5040322150986105143`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.4950417761127314797`3.",
                   "\", \"", "0.7952030647166759003`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.4950417761127314797`3., 
                  ", ", 0.7952030647166759003`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.1602308041304016939`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.4329494152002625329`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.2943319737298766281`3.",
                   "\", \"", "2.0261296345309265376`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.2943319737298766281`3., 
                  ", ", 2.0261296345309265376`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.`",RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "11.2`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"225.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.25`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8549917427343795}, {
                    4.0943445622221, 0.6871032427667076}, {5.786897381366708, 
                    0.14861895440448403`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6726701859404249}, {
                    2.302585092994046, 0.3309405111984386}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8549917427343795}}, {{
                    4.0943445622221, 0.6871032427667076}}, {{
                    5.786897381366708, 0.14861895440448403`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6726701859404249}}, {{
                    2.302585092994046, 
                    0.3309405111984386}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.7386656326598298}, {
                    2.302585092994046, 0.9591851876992498}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.5626811947210626}, {
                    4.0943445622221, 0.7977434147475913}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.31844182141051414`}, {
                    5.786897381366708, 
                    0.4657321565632807}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6126643925415233}, {
                    4.0943445622221, 0.6836447875213876}, {5.786897381366708, 
                    0.6451224204147037}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5697039896011563}, {
                    2.302585092994046, 0.7351972710498279}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6126643925415233}}, {{
                    4.0943445622221, 0.6836447875213876}}, {{
                    5.786897381366708, 0.6451224204147037}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5697039896011563}}, {{
                    2.302585092994046, 
                    0.7351972710498279}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5493215470033163}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5697039896011563, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5493215470033163}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5697039896011563, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8549917427343795}, {
                    4.0943445622221, 0.6871032427667076}, {5.786897381366708, 
                    0.14861895440448403`}}]}, 
                    "NaiveBayes"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8549917427343795}, {
                    4.0943445622221, 0.6871032427667076}, {5.786897381366708, 
                    0.14861895440448403`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6726701859404249}, {
                    2.302585092994046, 0.3309405111984386}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.8549917427343795}}, {{
                    4.0943445622221, 0.6871032427667076}}, {{
                    5.786897381366708, 0.14861895440448403`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6726701859404249}}, {{
                    2.302585092994046, 
                    0.3309405111984386}}}]}, {}}}, {}, {}, {}, {}}}, {{{}, \
{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.7386656326598298}, {
                    2.302585092994046, 0.9591851876992498}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, 0.5626811947210626}, {
                    4.0943445622221, 0.7977434147475913}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.31844182141051414`}, {
                    5.786897381366708, 
                    0.4657321565632807}}]}}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6126643925415233}, {
                    4.0943445622221, 0.6836447875213876}, {5.786897381366708, 
                    0.6451224204147037}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5697039896011563}, {
                    2.302585092994046, 0.7351972710498279}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6126643925415233}}, {{
                    4.0943445622221, 0.6836447875213876}}, {{
                    5.786897381366708, 0.6451224204147037}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5697039896011563}}, {{
                    2.302585092994046, 
                    0.7351972710498279}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5493215470033163}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5697039896011563, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5493215470033163}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5697039896011563, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8549917427343795}, {
                    4.0943445622221, 0.6871032427667076}, {5.786897381366708, 
                    0.14861895440448403`}}]}, 
                    "NaiveBayes"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.09734996170312066}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.10937602171948983`, 0.8549917427343795}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7835304002223077`*^9, 3.784227113977192*^9, 
  3.784391277011424*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"31fed5f4-0ea0-4b33-8497-37d572fff36e"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{{3.78422712382189*^9, 
  3.7842271506341767`*^9}},ExpressionUUID->"48c69ae7-4b38-4f37-bcb3-\
6cc72cc68667"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GNBtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"GNBtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}, {
  3.7835303694210825`*^9, 3.783530375046824*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"ea3aa04a-272c-4708-bf5b-e4fb3f751077"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`4.051758454027686", "\[PlusMinus]", 
                    "0.0340385177358706811`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NominalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0297614, "MaxTrainingMemory" -> 
                    165440, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 47, 49.5013011`9.447191469659206}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]], 
              MachineLearning`MLProcessor["DiscretizeNumericalVector", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Forbidden", 
                "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Boundaries" -> CompressedData["
1:eJy1z31QEnYcx3FCpxla+RBNJUmxsiw7rZ16WT9wcupqV3GWs/VgutxMZ5mc
0pzlQ7lSR62hmfmQWPmQuZjpUpMvKgYYTVEZKiBJakFh4hOlVvOum3/sruuv
/njf67/P3ccx7BjtCBaDweDmWjrXDCOWvWZoBj7ksOX9M4371OhTOfRe+FRO
v/+BPmSClpR0OcuYR1jin5UyYQB7LH38L80YbNJSahSNzyG30iNmS81TaA1z
4en9VTBRPq21cOsCV1/3RUtKLqA7DmlvhvF30c/JTFYBUYK+9r4fmeKtRIrL
s75GVcPI0tpeQoURRBLkb/T7YRxxjSvjh44bUHYSPbBGZEQOwf2mvheggOaq
WNvo0D5IwKjvUqN7591Ao+0iMnrmVZc0P3+VJpt3u3+JU+VVKRz1mZjwgk6w
Cs9gZra2A4mlu4bzeQDWnzv7DrZwwHj3y/3XTnQi7Ahx10HPWSQ3oVBOhqwi
73x3aOlIcD/85xH1BOvhKsVH/an1vG35eC9cLHMoTG+SwY3MaqfvLkhBFDkY
+lr/CBymPOOOrW2FnfGvuIrmfDg3msy4BH3oBCU741n4O0R16ksvxdiSbxYu
ruQP6qDQvJRI8XoCg9yeF9igATjNYRysJTyGisNerjfPKiE49PQVlaQPCqw4
EcW6Hvi2X8P9gv8PXGxZy87f0w018oSrZfslwPjjirg8tRkIcXuVOH0kandr
THvg0oTqC4vtMt48RrNS3dCNBVNIM1C8pF3qQBaNMB+yM2XQZSq1Me2QAko6
0qdo7YbKscmiPxu6IDDnFomyqAtqcT4aPKYTnFLEVS8mO4DnnOqR6NcBvyde
NHAtHwF1d6cFXiMEw2ob5x95fNiGD7k0W9IArO1aQYKwDPxSGFsPeDQiuBP1
Vrx3AK3gbM8zkjiTh5eKuf1G3eCvFjh+1t0Jm1qOLaabdcKTWzr0S6wEWKyo
2LzeDqAmadi3KR0Qet+J6D3yN5AO2Q2dZYpheuVRbvjrNmCd5RxgGgsg2KWc
JL/OB1esUKYn10PRE/mKorxy2LAywMukpR6pPeUix3g5ktvGILpwA5mK37gq
ToXj8ZtkY+RkA5j38K97rB+d27HB/ZqohVJF+O2AOwPAdKcR6tKU8Nbx+6KF
bRKoDRw9H0q5BwIzkfthcwG6br5PtjBcgjYTqEF1BCVSL8t9tjlqEFUUWKyx
CNCivL2zkn7MODpl56n/6uUkepifPrmHY0I2q109kzFlwhNGUKjWlw2QTty2
vvC0HkwfJ2RNqrSwICWOV8VTg2mJ+i4+TAkGUbW3lX/bvMnC+F5STxlafjyC
mUN/gJZPbVH1MOTIch97S7V8CFnV3TSdntYhsyxp5EqLcZTVIGtvIRjQjugx
2x2NpmS2sThOb4fhRagCjdfFTkF8G/vSI6YezKMMFPU3GghKpTXSXFTzrjsQ
rWvaKpi3lJWLvqwA9H9fMlJzsHQ5Coq44FZ/6imyF46cqyseRWbK7OllZyZR
BjnGPPAknvwvCRYNAg==
                 "], "Version" -> {11.3, 0}, "ID" -> 7308917455309454366, 
                "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 11.]]]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 11.]], 
                "Index" -> {
                  Association[1 -> 1, 4 -> 2], 
                  Association[1 -> 1, 12 -> 2], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 4 -> 3, 6 -> 4, 8 -> 5, 9 -> 6, 10 -> 7, 11 -> 
                   8, 12 -> 9, 13 -> 10, 14 -> 11, 15 -> 12], 
                  Association[
                  1 -> 1, 2 -> 2, 7 -> 3, 8 -> 4, 9 -> 5, 10 -> 6, 11 -> 7, 
                   12 -> 8, 13 -> 9, 14 -> 10, 15 -> 11], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 8 -> 7, 9 -> 
                   8, 10 -> 9, 11 -> 10, 12 -> 11, 13 -> 12, 14 -> 13, 15 -> 
                   14], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 6 -> 5, 8 -> 6, 11 -> 7, 12 -> 
                   8, 13 -> 9, 14 -> 10, 15 -> 11]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 5168226093250809328, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 11.]]]]},
             "Invertibility" -> "Approximate", "Missing" -> "Imputed"]]], 
       "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "ClassNumber" -> 2, "ClassPriors" -> 
         Association[1 -> 0.7103658536585367, 2 -> 0.28963414634146345`], 
         "LogProbabilities" -> {{{-1.4944341205044698`, \
-1.2096506052426172`}, {-0.2540868170818807, -0.354251434724677}}, \
{{-0.2540868170818807, -0.354251434724677}, {-1.4944341205044698`, \
-1.2096506052426172`}}, {{-2.80758981192315, -1.9054109242416766`}, \
{-3.0484924092791235`, -2.46431336058342}, {-2.674177360720118, \
-2.597607082380918}, {-2.674177360720118, -3.442373295846342}, \
{-3.0484924092791235`, -2.241502643354493}, {-2.5024585818258602`, \
-2.3467152190756635`}, {-2.402441912382277, -2.1463135215976497`}, \
{-3.1436815310359667`, -8.862908295118627}, {-2.5564868448399025`, \
-2.7514409556159496`}, {-2.5024585818258602`, -3.442373295846342}, \
{-3.0484924092791235`, -2.7514409556159496`}, {-2.2689898376241455`, \
-2.933319151728733}, {-3.0484924092791235`, -2.933319151728733}, \
{-2.9615819251917634`, -2.7514409556159496`}, {-2.5024585818258602`, \
-4.532174954832297}}, {{-2.6739692225155993`, -2.059125606519469}, \
{-2.2280567998524297`, -1.409201590395126}, {-2.1888617109704596`, \
-1.8362594861960801`}, {-2.5563018138466838`, -2.2411698092692105`}, \
{-2.4510338094059083`, -2.2411698092692105`}, {-3.0481897916342056`, \
-2.3463454649579365`}, {-3.0481897916342056`, -2.9326544790555427`}, \
{-2.4510338094059083`, -3.4412677125385924`}, {-2.5563018138466838`, \
-2.9326544790555427`}, {-2.4510338094059083`, -3.843974198207677}, \
{-2.2688510354863696`, -8.639764743804419}, {-2.3113804780766, \
-8.639764743804419}}, {{-2.450958117773582, -2.058999526963102}, \
{-1.3697535064217257`, -0.7163836062696644}, {-2.738337480975284, \
-2.346177440089861}, {-3.2483563277713343`, -3.8432231655024545`}, \
{-2.961178414644576, -3.1545906652970355`}, {-2.5022036098713936`, \
-1.9050649932514587`}, {-3.1431974453433473`, -3.8432231655024545`}, \
{-2.450958117773582, -3.440765578458245}, {-2.2687879499739365`, \
-3.8432231655024545`}, {-2.3557305109431694`, -8.552753366814787}, \
{-2.3557305109431694`, -8.552753366814787}}, {{-2.881624596387009, \
-2.241502643354493}, {-2.9615819251917634`, -2.241502643354493}, \
{-2.80758981192315, -1.9794457087055353`}, {-3.4997859700623914`, \
-2.933319151728733}, {-3.366492248264894, -1.9054109242416766`}, \
{-2.5564868448399025`, -2.597607082380918}, {-3.1436815310359667`, \
-2.597607082380918}, {-2.881624596387009, -2.46431336058342}, \
{-2.5564868448399025`, -3.155798030369752}, {-2.4512003511666394`, \
-3.8456284583037035`}, {-2.402441912382277, -3.442373295846342}, \
{-2.6136017188953664`, -3.442373295846342}, {-2.5024585818258602`, \
-3.155798030369752}, {-2.5024585818258602`, -3.155798030369752}, \
{-2.3115253111567284`, -8.862908295118627}}, {{-3.2488941067571373`, \
-1.9054109242416766`}, {-2.9615819251917634`, -2.3467152190756635`}, \
{-2.80758981192315, -2.1463135215976497`}, {-3.0484924092791235`, \
-3.442373295846342}, {-2.674177360720118, -2.241502643354493}, \
{-3.1436815310359667`, -2.241502643354493}, {-3.1436815310359667`, \
-2.933319151728733}, {-2.80758981192315, -2.241502643354493}, \
{-2.4512003511666394`, -3.442373295846342}, {-2.7386603741004656`, \
-2.7514409556159496`}, {-2.5024585818258602`, -3.442373295846342}, \
{-2.5564868448399025`, -2.7514409556159496`}, {-2.6136017188953664`, \
-3.442373295846342}, {-2.3559507388799736`, -4.532174954832297}, \
{-2.2281900532339316`, -8.862908295118627}}, {{-3.0484924092791235`, \
-2.0594030375102896`}, {-2.7386603741004656`, -2.7514409556159496`}, \
{-3.1436815310359667`, -1.7719984730386444`}, {-3.2488941067571373`, \
-2.3467152190756635`}, {-2.9615819251917634`, -2.933319151728733}, \
{-2.7386603741004656`, -2.933319151728733}, {-2.80758981192315, \
-2.46431336058342}, {-2.881624596387009, -2.3467152190756635`}, \
{-2.5564868448399025`, -3.155798030369752}, {-2.9615819251917634`, \
-2.597607082380918}, {-2.402441912382277, -3.8456284583037035`}, \
{-2.674177360720118, -2.597607082380918}, {-2.5024585818258602`, \
-3.8456284583037035`}, {-2.4512003511666394`, -3.8456284583037035`}, \
{-2.151268497991473, -8.862908295118627}}, {{-2.5564868448399025`, \
-2.7514409556159496`}, {-2.7386603741004656`, -2.597607082380918}, \
{-2.881624596387009, -2.46431336058342}, {-2.80758981192315, \
-2.7514409556159496`}, {-2.80758981192315, -3.442373295846342}, \
{-2.674177360720118, -2.7514409556159496`}, {-2.674177360720118, \
-2.933319151728733}, {-2.881624596387009, -2.1463135215976497`}, \
{-2.9615819251917634`, -3.442373295846342}, {-2.3559507388799736`, \
-2.46431336058342}, {-2.4512003511666394`, -3.155798030369752}, \
{-3.2488941067571373`, -2.46431336058342}, {-2.5564868448399025`, \
-2.933319151728733}, {-2.7386603741004656`, -2.597607082380918}, \
{-2.6136017188953664`, -2.597607082380918}}, {{-2.2689501779045345`, \
-3.1555607542979307`}, {-3.14358642427856, -2.751282589949295}, \
{-2.61354574195785, -3.44205729015561}, {-2.2281519790272983`, \
-2.9331292001658107`}, {-3.0484059377498207`, -3.845155533253508}, \
{-2.188953231585542, -2.0593237636587283`}, {-2.451152764976143, \
-2.2414075365970865`}, {-2.961502651340202, -3.1555607542979307`}, \
{-2.61354574195785, -2.751282589949295}, {-2.807521851747787, \
-2.3466095610904634`}, {-2.8815514140531917`, -2.3466095610904634`}, \
{-2.451152764976143, -2.3466095610904634`}, {-2.8815514140531917`, \
-2.46419451810898}, {-3.14358642427856, -2.5974712958371557`}}, \
{{-2.188803474939811, -3.440765578458245}, {-2.5022036098713936`, \
-3.440765578458245}, {-2.3557305109431694`, -2.9323525010976383`}, \
{-2.0796764764865077`, -2.1458733807454737`}, {-2.3113146517921406`, \
-2.346177440089861}, {-1.5352124935716875`, -1.5000323175824655`}, \
{-2.6738746285600823`, -2.1458733807454737`}, {-3.2483563277713343`, \
-1.9050649932514587`}, {-3.499094885031431, -2.5969159973499574`}, \
{-2.8812520875356165`, -3.1545906652970355`}, {-2.556217720166274, \
-2.7506349914377255`}}}, "FeatureNumber" -> 11, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NominalVector", "Weight" -> 11.]], 
            "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NominalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 11.]], 
                "Index" -> {
                  Association[1 -> 1, 2 -> 2], 
                  Association[1 -> 1, 2 -> 2], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14], 
                  Association[
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 5156590427180248755, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NominalVector", "Weight" -> 11.]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NominalVector", "Weight" -> 11.], "Key" -> 
                "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
                "Perfect", "Missing" -> "Allowed"]]}, "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> "NaiveBayes", 
         "Options" -> 
         Association[
          "SmoothingParameter" -> 
           Association["Value" -> 0.2, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[1.1602308041304017`, 0.43294941520026253`], "Accuracy" -> 
            PlusMinus[0.6451224204147037, 0.0750403221509861], 
            "EvaluationTime" -> 0.00006778536585365854, "TestSize" -> 82, 
            "TrainingSize" -> 326, "TrainingTime" -> 0.1656495, 
            "TrainingMemory" -> 193184, "ModelMemory" -> 34472, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.34642548855551136`, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[1.1602308041304017`, 0.3061414673988557]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6451224204147037, 0.053061520655385365`]}, 
            "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType}]}], 
           Association["ID" -> 97925441216872]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.3513549647322294`, 0.2582143330206576], 
                 "Accuracy" -> 
                 PlusMinus[0.6126643925415233, 0.0327446200644934], 
                 "EvaluationTime" -> 0.00004635025, "TestSize" -> 1000, 
                 "TrainingSize" -> 10, "TrainingTime" -> 
                 0.016279674999999997`, "TrainingMemory" -> 55077., 
                 "ModelMemory" -> 24647.999999999996`, "ExperimentCount" -> 7,
                  "ModelUtility" -> 0.17974692165257608`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[3.071361332148744, 0.4687945464335825], 
                   PlusMinus[2.4395630679534817`, 0.4519336455274383], 
                   PlusMinus[2.609230744827191, 0.2707320745836584], 
                   PlusMinus[2.319081033176375, 0.2986796045267255], 
                   PlusMinus[1.7098905950908578`, 0.2401903721602958], 
                   PlusMinus[2.257214428421174, 0.3688955858552475], 
                   PlusMinus[3.552026304389758, 0.49269884094964705`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5697540682615891, 0.04958202899129229], 
                   PlusMinus[0.6885659494497083, 0.04654190122088216], 
                   PlusMinus[0.5361099124900776, 0.03499533202189083], 
                   PlusMinus[0.625417700885745, 0.03423736956986187], 
                   PlusMinus[0.7073095088085589, 0.03199792772751514], 
                   PlusMinus[0.579655058360599, 0.04944392451438267], 
                   PlusMinus[0.5004471375685197, 0.04999756037223271]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.9879485801152654`, 0.23257588770364698`], 
                 "Accuracy" -> 
                 PlusMinus[0.6836447875213876, 0.022377044929216872`], 
                 "EvaluationTime" -> 0.0000883907222222222, "TestSize" -> 
                 1000, "TrainingSize" -> 60, "TrainingTime" -> 
                 0.01867008333333333, "TrainingMemory" -> 67052., 
                 "ModelMemory" -> 33789.33333333333, "ExperimentCount" -> 5, 
                 "ModelUtility" -> 0.2123068173724622, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.70272914750161, 0.4766962560057276], 
                   PlusMinus[2.1940520875616265`, 0.2975770707743552], 
                   PlusMinus[2.2663428287244494`, 0.3068785027923229], 
                   PlusMinus[1.497449217351601, 0.22604141307558184`], 
                   PlusMinus[2.0655165264429733`, 0.2574091205941749]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6291600088556487, 0.04844795485259669], 
                   PlusMinus[0.6589949198210067, 0.03364549780758627], 
                   PlusMinus[0.6589949198210067, 0.03364549780758627], 
                   PlusMinus[0.7233807574187693, 0.031650884259576295`], 
                   PlusMinus[0.7023699622399942, 0.02628746475611133]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.1602308041304017`, 0.43294941520026253`], 
                 "Accuracy" -> 
                 PlusMinus[0.6451224204147037, 0.0750403221509861], 
                 "EvaluationTime" -> 0.00006778536585365854, "TestSize" -> 82,
                  "TrainingSize" -> 326, "TrainingTime" -> 0.1656495, 
                 "TrainingMemory" -> 193184, "ModelMemory" -> 34472, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.34642548855551136`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1602308041304017`, 0.3061414673988557]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006778536585365854, "MeanCrossEntropy" -> 
                PlusMinus[1.1602308041304017`, 0.43294941520026253`], 
                "ModelMemory" -> 34472, "TrainingMemory" -> 193184, 
                "TrainingTime" -> 0.22359561365030672`], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Atom[Real], 1], 1]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 97921146249576]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843912716167858`17.33057102130814*^9, 
         "PreprocessorEvaluationTime" -> 8.4195296523517`3.*^-6, 
         "PreprocessorMemory" -> 101520, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.32000000000000006`, 
             "ElapsedTimes" -> 0.5198487, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.44791330000000007`, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
             0.7558201, "ExperimentCounts" -> 1]}, 
           TypeSystem`Vector[
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[97929736184168]], "ID" -> 
            97934031151464]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 2.2547526, "MaxTrainingMemory" -> 
         703440, "DataMemory" -> 806280, "FunctionMemory" -> 223016, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 47, 51.6487583`9.465634735060855}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2,
      1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 
     2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
     2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 
     1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
     1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 
     1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
     1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJxdU3k01PsbRhjZIrsSRpIkJvuWnauyJRQqa5ayjFRyVQyVFCoTFRFZQySh
8H0/RZaUy2AwCdkp+x5jrvv78/ee85z3r2c573kfaffAE14sTExMxVv4bxN4
6Yx13/aa6+KiQlnnNFBI8MtYk+sMyDzV3vPKuBYo+V29Bsd+AiWb84Tzwi94
XG6lfrVqHaNE2jDyBWXRZVGPT86YBASdOSTPq4BHDlMVmpypveCga087YTcL
Xn8kutM3TsMT34YMRpMYIpXRPlzQ4UJEbJ6p0yoDZukMBmPFrKas+Rh7NFEP
1fvoFQqhFCyP2/1AoZci0navv1nuwoupuUQw2rpV0cjDI5eD+wqA6ecmvT0C
hzQmtvgiUTVn6W2L0t+10bHIxoWT9dvR51GT58HULJjD1pvAhxMZsJ/iYNZ8
Cbddg64e9fHG1pzM7bB5ZcQj/pKsZ10OyudVA7j6tiHjm8ejR7pJmP/Om3HZ
8UpIUNOUuUyHBQWZHOpvzK6C1xfzq9l/fAN278b2Tok1eIoEhvtISxjpvOZE
ZZIsek91jX//cROaODx4VvXqILtr+SLHU02oyLmCOxwnibp8cV+4MxhQNShe
6SNUCy/L64PF2bchx6iNINXJSggw3IgmKCxApV8rKYFOBb2wUCOphk+w2rvi
R+xjgOnMhBo5PhuKpGPnjEjbEXA469pFr8O156Xnpo2aoObj1j0SEmq8igLv
XnbSRizDvRFLacNgJGFwB0cZA47vYpWR0zcwnGDMr8EFJWT41Gnlk70LWCnf
yA8niqHq2HPqzXqfYfV+kOQY1ya4xhouCW8bAaaVO171nmPgTvgrX03nGgwv
ZF3YOCuIAoTGuC9MvIbzPXy5GaXsqGjecSHsGz96/j7AgMYZA5zFjW3PBOhg
OyLrEPemHpqTRe+5vOFGYVO4sbqPqeDbiXFxhhXCjWrTIz32OKQez87RZbwM
wmW5YeXHKfDKwkhG41khjI16cwha4hBTEi+r5lcOxNonY0pOyQXJxgdWJ7Su
YNxU/4tkK2X0yP+F0ZkbP8CCfPJwzs8ZUG8nps182Acb23APfthKIx3xX9OM
q02Aq+PP5T2/DrsaD3z2cmBHPsEzKb3KJfBVm0dk7VcQZubVGuBMVkY9ttwV
m4lEkIpMfY5vFULVoJd3cWUZiCFOU+VebWBqchr3ZDQE25GXo3/srDLKz6/g
fTwaAGylMTMbdsLoQRMPXchiFPhu+/ndFhgFoyRHzy/6C9AQfGKHII0KZlOL
+cytzthycuAHrlACGpdS17unMweubfQjTTk0cBZPW65O2oZO8B6ib5OpAFLp
Rqy7pTBymQqppokFgn6Sk1PnxTZARNWAqrllGDb73Rtzhh3dqDQP/SNdAhIn
+ayvS83Ahx4noTbPPnhtTmXhcjsMCZeLRr44SyFuJZuszlMILBaFvGVWmZBc
QZ10lYIEmMwW57Co4dG50MzYuIoA2NUcIiXktOXbafIyPngWitk067Y79AJL
UaM4VXoaTHQj3E9k9sNu1RAVWw0utHMsjK/fMQPMUmPSCwvvApVjNjEjlh/l
B97ZZ02ph8fTFpkJmxtwuIkuQsHPAacZt7U4jQYHFxU6XS+9gJ8nG95BBhfC
jVbAyDNvkPh8zdrGWwR9C7bOvX2cCrUJlMgriQswxMVua6jwE2QoL96oSf0G
PJZ/1SW7C/IEx2NR8zysUm7HtM1lgmcO+/GMW5xIVSnoomMdEzKZ9vx8thmB
f8s6Y81toIZq8Hgit0cdke4UbJaObEcpQSP3K6OyAHU0Cb70WoSPi1c9L/3p
ANffi7zmMwJIvP+1wF/7wmGD8d/8U615ZnLgq40hkqYPqq5ysSGpQPIjO/xb
0Dao9nFquA9lzf1H7wjzI69xj/TDBQSsO7l/TNBaBQ3tL4hs6UFQzm48MFmz
lStaZdVotAq0y39X7TnAgpb+pz9fPTixny/nrgFilivWX8W9gYEvi8ri82zI
PDr0tEDjG2zlIV67PkoBiV+KdOhr7wSHRs0Y6F0AsqckJerQGISYnsU3qo3A
rcavQXfTw0H9mMSafp8AujmQLe/jSYEXZDtmBmEZ5qa37Fyu1txYnSKOn9JB
5y1G3zFzLMMpgc3Id6kUMFK0wWnxLAP73/2mhY8pcM+MUMTJMwIFnipH+Z3G
YIjldqBm7RAMPXHdMdM8DmErU2ER3evw7aubecebRpgt/mBKe+4Kf5w3/V1a
RJGr0dCoh2wjbAiZ3GU7uAGHHplXH8/6DgfduoIf1M7CsZhNY9cIMRDbqYOn
XsMjnaaHzb4xOFT3JYL7VG0BLDOaf98yHQSHcTO265mTsGdzK/8O/RrRPY2D
5Z16aPOv/GdlcfxA1PXZ5NaSQWnxaZlt4Q+g4q1YhfJ9PkQjN1sNebdAAbhf
Ivauwg3yVwFyXAjGBVHlSe7KyCgkvqMjIAIO5KwUH7EVQLsq3e7pOg7D9wi5
NRx+HB4otySc7mVFbMdjigWfvQWmJsWH+372gkHosFmP6ixwCP9g+JfzYanG
/js0kCrSoSdHt/7wACm2rORsEVGkKpnI16GUCXGM6e73XZxIzDWr+X1sGEQE
KPsdUxBEbs65oftLT2LLGpm0sloCSpRPVBykyYKk29vcFS9pxKa1j82QtA09
/fKo0NmtAtQzZDOb3aSgXEVh/u6aNBI14Bae3T8HgzsvvXT5RoN3d+cCzOW2
I/sCNY3++Bwg+hI+szb0gehz68VTrdPgTFtlSHiM1PxWTbT3e6yO7O71WSle
IMCuobR8k6tSyFFSQ6lHxARs+Rmxr5IkUHuev/u0y1av+5QG0mmxoPY3occ1
+gwWpTh0sc2HgLSo5rLF2jsQsbVEe72XDPLooXzG9ia4VWS5YJO9DjE7BztJ
t13BAfk509tFkUjDBJFUwgSt9z3G6t/tRaG635ZqW1uAwaFCnSxYBYL96MBY
iRnMkAvyDotLoJ7A/M+9pGsY1Ufih7GCMhr87qvASnmKnVfB2ZNjFdFbubgj
2//phqmihOBN+XmY1yo5XpG8DE0fJUT397dB3uGsM00za2Dywe/SE8JXID34
rVKyzxVz657VqbYloGQXG7yzyiLsfih/HW/RCVc8J/CYXT0U6450J9vQodR6
kde+YhAeFfkKs/BPwpGzWMtekUFIK3h+QaJ/EsKEU0QUWVvhUM1usynJVTCp
7QpazIvC6lO7lnDXlNA9ywHiYLgNxoG3kxmlE1DFXrKwUyormnpnqdOpXwYP
nybJcnDFY/ITyUq/0g+hVcNRdpO4YSzkZnPsKp8cqjYupghnfIInlkvP8jcY
oGXYeaWZrwG8Q3ar1lM34P//R5XvvJzClxXYsQjeXN6tkKfNksqTpAf2n2IU
5Fr3oMeGlksT5mewvQpes/1+BET+dq/jRfgLzGs+/OQ5HkWkxjHyNn5nPazs
I+qk/U2HhsT2nMrTLGhGKSpRUqsKxg36JQJSVsB977wtX1orINLrilzaJSxC
10kw+IIyovLGOQv+cMTGLKgX9NMJ6GObbjbOgw0pFLf8oluVwnRISsrRLV54
1LMV3S0dR7yM9WVWNSzMXqgnB6+Czsb8TJ9WfoWxCM8GeUgdRMG8J1WlHM5h
pISs9MjTBORuWfxnf/QgDO7CLffYTkJdSWeSPTMNmF8oMHfcn4N/AUyt6UI=

     "], "CountMatrix" -> {{101, 27, 0}, {22, 25, 0}}, 
    "IndicesMatrix" -> {{{1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 
       21, 23, 27, 28, 30, 32, 33, 34, 43, 45, 46, 47, 48, 50, 51, 53, 54, 57,
        61, 64, 65, 66, 67, 71, 72, 74, 76, 78, 79, 81, 88, 90, 91, 92, 93, 
       94, 96, 97, 98, 101, 102, 104, 106, 107, 109, 110, 111, 112, 113, 114, 
       120, 121, 122, 123, 124, 126, 129, 130, 131, 132, 134, 137, 138, 140, 
       141, 142, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 
       162, 163, 164, 167, 168, 171, 172, 173, 175}, {24, 26, 39, 40, 42, 49, 
       52, 55, 56, 59, 60, 63, 68, 73, 86, 95, 99, 100, 108, 125, 128, 133, 
       135, 147, 154, 160, 165}, {}}, {{6, 31, 35, 36, 37, 41, 75, 77, 85, 87,
        89, 105, 115, 116, 118, 119, 136, 139, 143, 157, 170, 174}, {2, 8, 14,
        15, 19, 22, 25, 29, 38, 44, 58, 62, 69, 70, 80, 82, 83, 84, 103, 117, 
       127, 144, 145, 166, 169}, {}}}, "ExtendedClasses" -> {1, 2}, "Weights" -> 
    SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0001658, "SingleEvaluationTime" -> 
    0.0083056750000000002`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7835304041630483`*^9, 3.7842271531964927`*^9, 
  3.784391281606247*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"2673b7ac-8c61-478d-beeb-db0cb29bd87c"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{{3.784227157649337*^9, 
  3.7842271739777217`*^9}},ExpressionUUID->"9df97496-1bf6-49af-87cf-\
e842c998d46f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GNBtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.7835303769467516`*^9, 3.783530378869636*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"4726db06-2efc-44cd-8d1e-c19cb6f89f9b"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.72`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8047808764940239`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.5050505050505051`"}]}], 
      "\[RightAssociation]"}]},
    {"0.28`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8211382113821138`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.4807692307692308`"}]}], 
      "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "101"}], ",", 
          RowBox[{"2", "\[Rule]", "27"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "22"}], ",", 
          RowBox[{"2", "\[Rule]", "25"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.72, 
    Association[1 -> 0.8047808764940239, 2 -> 0.5050505050505051], 0.28, 
    Association[1 -> 0.8211382113821138, 2 -> 0.4807692307692308], 
    Association[
    1 -> Association[1 -> 101, 2 -> 27, Indeterminate -> 0], 2 -> 
     Association[1 -> 22, 2 -> 25, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{3.783530410835772*^9, 3.784227176149414*^9, 
  3.784391285529258*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"84c7b413-4f91-4b2f-95ff-520f159ea9f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GNBtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}, {
  3.7835303807395887`*^9, 3.783530382503577*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"1e7733f3-aef3-49ba-a3f8-114c500448d7"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQNc1xcX2HI9t6c2v1pknfvDqiX2LyrnPQci+wcn
syqTWTbbO1VzvlXd8tze50v5pqh7O+xTzjuEWG16bj9JxROIDtlLv9jS6Cf9
wl4s/qNo/Mej9g8+tjPL1b+w/+8Xdlpa+YQ9u9DaDZYTXtizHVl2aULxefuS
i67isSUv7V3r1Vc/7b1oH6s3/fTTopf2uvk9CYv2X7b3au38rrz8pf3GlSZP
7qRft1eeX9qs+eml/VLF53a7G27Y6y/c2/JN6JW9KVBWXOC2veQ+QVa1ua+g
5t+3P8iqV9DI/cb+TeAOudbXD+1/chaG1Tkh+DD/AgAp4I0H
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
           7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQAWJGIGZiQACu64sLbLme21ObXy2yzv1h1RL7F5XzngOR
/YOTWZXJLJvtnao536pueW7v86V8U9S9HfYp5x1CrDY9t5+k4glEh+ylX2xp
9JN+YS8W/1E0/uNR+wcf25nl6l/Y//cLOy2tfMKeXWjtBssJL+zZjiy7NKH4
vH3JRVfx2JKX9q716quf9l60j9Wbfvpp0Ut73fyehEX7L9t7tXZ+V17+0n7j
SpMnd9Kv2yvPL23W/PTSfqnic7vdDTfs9Rfubfkm9MreFCgrLnDbXnKfIKva
3FdQ8+/bH2TVK2jkfmP/JnCHXOvrh/Y/OQvD6pze2AMAl7yFBA==
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.72}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.72`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.72}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.04, 0.7380952380952381}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7380952380952381`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.04`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7380952380952381}], 
          Row[{"RejectionRate = ", 0.04}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.07428571428571429, 0.7407407407407407}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7407407407407407`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.07428571428571429`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7407407407407407}], 
          Row[{"RejectionRate = ", 0.07428571428571429}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.09714285714285714, 0.740506329113924}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.740506329113924`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.09714285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.740506329113924}], 
          Row[{"RejectionRate = ", 0.09714285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.14285714285714285`, 0.7533333333333333}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7533333333333333`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.14285714285714285`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7533333333333333}], 
          Row[{"RejectionRate = ", 0.14285714285714285`}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.17142857142857143`, 0.7655172413793103}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7655172413793103`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.17142857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7655172413793103}], 
          Row[{"RejectionRate = ", 0.17142857142857143`}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.18857142857142858`, 0.7676056338028169}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7676056338028169`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.18857142857142858`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7676056338028169}], 
          Row[{"RejectionRate = ", 0.18857142857142858`}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.24571428571428572`, 0.7954545454545454}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.7954545454545454`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.24571428571428572`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7954545454545454}], 
          Row[{"RejectionRate = ", 0.24571428571428572`}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.2742857142857143, 0.7952755905511811}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7952755905511811`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.2742857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7952755905511811}], 
          Row[{"RejectionRate = ", 0.2742857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.30857142857142855`, 0.8016528925619835}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8016528925619835`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.30857142857142855`"}, 
             "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8016528925619835}], 
          Row[{"RejectionRate = ", 0.30857142857142855`}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.3657142857142857, 0.8108108108108109}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8108108108108109`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.3657142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8108108108108109}], 
          Row[{"RejectionRate = ", 0.3657142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.38285714285714284`, 0.8148148148148148}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8148148148148148`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.38285714285714284`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8148148148148148}], 
          Row[{"RejectionRate = ", 0.38285714285714284`}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.4228571428571429, 0.8316831683168316}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8316831683168316`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.4228571428571429`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8316831683168316}], 
          Row[{"RejectionRate = ", 0.4228571428571429}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.49142857142857144`, 0.8764044943820225}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8764044943820225`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.49142857142857144`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8764044943820225}], 
          Row[{"RejectionRate = ", 0.49142857142857144`}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.56, 0.8831168831168831}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8831168831168831`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.56`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9746794344808964`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8831168831168831}], 
          Row[{"RejectionRate = ", 0.56}], 
          Row[{IndeterminateThreshold, " = ", 0.9746794344808964}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.7118441558441557},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.56}, {0.72, 0.8831168831168831}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.783530414349509*^9, 3.7842271807116156`*^9, 
  3.7843912981181*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"40e97e2b-ab1e-4a4f-95d7-db7317944df3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GNBtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}, {
  3.7835303841525993`*^9, 3.783530385796688*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"96c31848-6a7a-406f-9fde-f4a9f3d2e7ce"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.926405133382791, 0.8403483080693313, 0.5921169879443478}, {
   0.906822770895143, 0.7625301754241274, 0.4075454489826649}}, {{1., 0.42, 
   0.}, {0.8853697853307254, 0.6687135810983441, 0.22304917011883657`}}}, {{0,
    0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["101", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "101", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.8211382113821138`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.7890625`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8047808764940239`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{101, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.8211382113821138}], 
         Row[{"Recall = ", 0.7890625}], 
         Row[{"FScore = ", 0.8047808764940239}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["22", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "22", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.17886178861788618`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.46808510638297873`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{22, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.17886178861788618`}], 
         Row[{"Row fraction = ", 0.46808510638297873`}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.5192307692307693`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.2109375`"}, "RowDefault"]}},
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{27, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.5192307692307693}], 
         Row[{"Row fraction = ", 0.2109375}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["25", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "25", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.4807692307692308`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.5319148936170213`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.505050505050505`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{25, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.4807692307692308}], 
         Row[{"Recall = ", 0.5319148936170213}], 
         Row[{"FScore = ", 0.505050505050505}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.7890625`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.7890625}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.5319148936170213`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.5319148936170213}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "123", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.8211382113821138`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{123, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.8211382113821138}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "52", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.4807692307692308`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{52, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.4807692307692308}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["123", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["52", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.783530417322803*^9, 3.784227183868821*^9, 
  3.78439130117352*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"379e1161-6981-4efc-a0dc-45dedd5b0516"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843873994486322`*^9, 
  3.7843874025962086`*^9}},ExpressionUUID->"6a31a530-cc6a-4630-a021-\
8bf09bf9b1d6"],

Cell["\<\
1) The Classifier measurements show that 72% of the data is classified \
correctly and 28% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 101 data correctly predicted to be belonging to Dataset=1 and 27 data \
belonging to Dataset =1 has been incorrectly classified to be belonging to \
Dataset =2
\tb) 25  data correctly predicted to be belonging to Dataset=2 and 22 data \
belonging to Dataset =2 has been incorrectly classified to be belonging to \
Dataset =1
3) F-score of Dataset=1 is calculated as 0.80 and Dataset=2 is 0.50.\
\>", "Text",
 CellChangeTimes->{{3.7842271992427697`*^9, 3.78422727963595*^9}, {
  3.7843873938533773`*^9, 3.7843873943704243`*^9}, {3.78439135993565*^9, 
  3.7843913904118195`*^9}},ExpressionUUID->"e0edacc1-1a42-4ad4-a72c-\
fd9cc621be40"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decision Tree", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 3.7835301376715503`*^9}, {
  3.7835306270743504`*^9, 
  3.783530638184452*^9}},ExpressionUUID->"8780b74b-a027-4940-b249-\
62b1178100e1"],

Cell["\<\
This classifier algorithm uses a decision tree to go from an observation to \
the conclusion about the item\[CloseCurlyQuote]s target value. 
A Decision Tree consists of :
\t\ta) Nodes : Test for the value of a certain attribute.
\t\tb) Edges/ Branch : Correspond to the outcome of a test and connect to the \
next node or leaf.
\t\tc) Leaf nodes : Terminal nodes that predict the outcome (represent class \
labels or class distribution).
There are two main types of Decision Trees:
\t\ta) Classification Trees.
\t\tb) Regression Trees.
In this case the Classification trees will be used as the output is not \
continuous but discrete in nature (1 or 2).
\
\>", "Text",
 CellChangeTimes->{{3.784227391822399*^9, 3.7842274728220387`*^9}, {
  3.784227519288975*^9, 
  3.7842275718241863`*^9}},ExpressionUUID->"676efcef-837a-4c6b-b00e-\
2c1c4094fea5"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{
  3.7842276368960915`*^9},ExpressionUUID->"528ef26b-9fb8-4058-a9ca-\
393ff72de5e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DTtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<DecisionTree\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}, {
  3.7835305460943036`*^9, 3.783530655128754*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"ac94bd47-9a19-42f1-9488-5f153b9fc28f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0287869, "MaxTrainingMemory" -> 165184, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 49, 56.6341379`9.505653130368422}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
           6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 
           8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
           10, 10, 11, 11}], "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5AZDMTiL+/vb29c
v58pfj4Y315pu/9iiuz+/IKZ+0D4aH6g3fxJrvYpwYvt9ZJO7/t94PC+4/J7
wHhK3RYw/j1r7r7E7W37vr3M2xf7wHBfrN5DMPace37f4lyffUJT6ve+aBbb
HyUjuH9NGcd+B1+2/fL8zPs3P2XYPzfs3T7xuIf7dgld2Of38iwYXz+3cd+a
BNV9iaXL9sr9lN9rVjLTQTFz8b7oxQv2nRefDca1xyaB8Y/ejH0PymL36aT+
25u3ZulezQXT9rFzTwXjww8m7qvb1rdvo3nrPu+Khn3L5eP23VoQAsbfrszY
f9I/e/9J2Tf7XAP69nFrb7XNdAiyP7U50z6iar39iZry/Wv+h4FxGavY/kkW
QfsmnpllV6bVYc+cOcNe7tkO+zUqJ8H44ldr+zSLFfYApMy7fQ==
          "], "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVjmlTDQAARY+QQvZtRCRlKZKoZKlHqSTLe78gM6VPzDxmjP+EiCxZyhKK
7EKRrBVClrTg9Ppw75k758tN3HcwWBkFHIqJVLD8SCAcLj8aio2MkgOHK/ZX
hDOyqkZ9KJJRZvDLLaTz3Gf+cAMf/eAZTzubn64niddm0eRt1/HH927mkROp
94pv7PSpTxzHEvr97SbuesPrdtvlWN6axy1j+WIKCUxgyAAN3rPFIiaRz0rq
3Eo8U6j2hH2OZwcPrPGUq4lmY+TZduJYxieXs4f56H0Xk8Mdj3vMs9Zaygom
89Vep5LLoCW8M5M5zOWhraaRyAUbLSaGnXz3myEWkkwB7bY5gzFc86pByjjv
OVdx0kVks5TLzqLZQh474BouedEXzuSm25jHLlJZwF+H/exeXvnS3fQ4jQ7/
+8/prGUEZy2w4A==
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{2, 2}, {1, 4}, {2, 1}, {8, 1}, {2, 
           2}, {74, 1}, {1, 2}, {2, 4}, {6, 1}, {1, 7}, {2, 2}, {5, 1}, {22, 
           1}, {2, 8}, {1, 8}, {9, 1}, {1, 2}, {17, 1}, {4, 1}, {5, 1}, {12, 
           1}, {1, 2}, {2, 1}, {6, 1}, {2, 3}, {3, 1}, {1, 3}, {1, 3}, {1, 
           6}, {4, 1}, {1, 4}, {2, 1}, {1, 5}, {3, 1}, {27, 1}, {2, 2}, {4, 
           1}, {1, 2}, {1, 5}, {4, 2}, {2, 1}, {1, 3}, {1, 3}, {2, 1}, {5, 
           1}, {1, 3}, {5, 1}, {1, 5}, {1, 6}, {2, 2}, {1, 9}, {5, 1}, {2, 
           1}, {2, 3}, {5, 1}, {1, 2}, {3, 1}, {4, 1}, {3, 1}, {20, 1}, {2, 
           2}, {1, 3}, {4, 2}, {1, 5}, {9, 1}, {1, 2}, {3, 1}, {1, 3}, {2, 
           1}, {1, 6}, {4, 1}, {4, 1}, {1, 2}, {2, 2}, {8, 1}, {1, 6}, {2, 
           1}, {1, 9}, {2, 1}, {3, 1}, {1, 3}, {2, 1}, {1, 4}, {2, 1}}], 
         "RootIndex" -> 25, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6748683201088603, 0.022503040922444043`], "Accuracy" -> 
         PlusMinus[0.667631842730663, 0.01839878688296141], "EvaluationTime" -> 
         0.000018067150753768845`, "TestSize" -> 2092, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.03129314285714286, "TrainingMemory" -> 
         234489.14285714284`, "ModelMemory" -> 5616., "ExperimentCount" -> 6, 
         "ModelUtility" -> 0.6357900598096875, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6272522715492331, 0.031831739247253736`], 
           PlusMinus[0.6997758014879755, 0.045149274755347316`], 
           PlusMinus[0.6466295267266227, 0.030006776344157753`], 
           PlusMinus[0.7315434978212891, 0.030592737659395547`], 
           PlusMinus[0.6517632582913534, 0.048976932320657335`], 
           PlusMinus[0.7090487337126279, 0.0474007539801626]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6824636233023149, 0.023433688669487116`], 
           PlusMinus[0.6985655219164417, 0.0230643270175169], 
           PlusMinus[0.6802615338297066, 0.023448826266348314`], 
           PlusMinus[0.5931205511329665, 0.024624707729288743`], 
           PlusMinus[0.6700499206989993, 0.03332685471030716], 
           PlusMinus[0.6768409498370311, 0.027062948536858]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 408], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 172305684849126]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6748683201088603, 0.022503040922444043`], 
              "Accuracy" -> PlusMinus[0.667631842730663, 0.01839878688296141],
               "EvaluationTime" -> 0.000018067150753768845`, "TestSize" -> 
              2092, "TrainingSize" -> 10, "TrainingTime" -> 
              0.03129314285714286, "TrainingMemory" -> 234489.14285714284`, 
              "ModelMemory" -> 5616., "ExperimentCount" -> 6, "ModelUtility" -> 
              0.6357900598096875, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6272522715492331, 0.031831739247253736`], 
                PlusMinus[0.6997758014879755, 0.045149274755347316`], 
                PlusMinus[0.6466295267266227, 0.030006776344157753`], 
                PlusMinus[0.7315434978212891, 0.030592737659395547`], 
                PlusMinus[0.6517632582913534, 0.048976932320657335`], 
                PlusMinus[0.7090487337126279, 0.0474007539801626]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6824636233023149, 0.023433688669487116`], 
                PlusMinus[0.6985655219164417, 0.0230643270175169], 
                PlusMinus[0.6802615338297066, 0.023448826266348314`], 
                PlusMinus[0.5931205511329665, 0.024624707729288743`], 
                PlusMinus[0.6700499206989993, 0.03332685471030716], 
                PlusMinus[0.6768409498370311, 0.027062948536858]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8449927586218582, 0.0791729791352276], "Accuracy" -> 
              PlusMinus[0.5924029104465398, 0.03991447942262219], 
              "EvaluationTime" -> 0.000027350666666666672`, "TestSize" -> 300,
               "TrainingSize" -> 60, "TrainingTime" -> 0.0341078, 
              "TrainingMemory" -> 90464, "ModelMemory" -> 5744, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5017684352589071, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8449927586218582, 0.05598375043326047]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5924029104465398, 0.02822379906726706]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7821041724098627, 0.12173760394882466`], "Accuracy" -> 
              PlusMinus[0.6561269985837178, 0.046796603774068184`], 
              "EvaluationTime" -> 0.0000285859756097561, "TestSize" -> 246, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.10211459999999999`, 
              "TrainingMemory" -> 210258., "ModelMemory" -> 6384., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5356004995899016, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0017985435265087`, 0.1327227791193372], 
                PlusMinus[0.6839212899868691, 0.11350682677623564`], 
                PlusMinus[0.7197014207422446, 0.11341769756424373`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5848814565592821, 0.05453178948606821], 
                PlusMinus[0.7053633842701252, 0.05069407000765742], 
                PlusMinus[0.6692188059568723, 0.05222799915885347]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000285859756097561, "MeanCrossEntropy" -> 
             PlusMinus[0.7821041724098627, 0.12173760394882466`], 
             "ModelMemory" -> 6384., "TrainingMemory" -> 210258., 
             "TrainingTime" -> 0.15909301034180542`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 172301389881830]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843913976498871`17.330571035771623*^9, 
      "PreprocessorEvaluationTime" -> 9.3027263374486`2.*^-6, 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.32000000000000006`, 
          "ElapsedTimes" -> 0.3479266, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.2879239, "ExperimentCounts" -> 1], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.4358851, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[172309979816422]], "ID" -> 
         172314274783718]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 1.966996, "MaxTrainingMemory" -> 1151784, 
      "DataMemory" -> 806280, "FunctionMemory" -> 169288, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 49, 58.4936687`9.519683691960681}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783530658033059*^9, 3.784227641926978*^9, 
  3.784391398585648*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"57eda29f-95e6-4b86-95bd-3408515f4ed6"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{
  3.7842311172872796`*^9},ExpressionUUID->"4c064399-c8f6-4977-9238-\
1720d3004a1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "DTtraining", "]"}]], "Input",
 CellChangeTimes->{{3.7835306500096684`*^9, 3.7835306509401245`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"f98993a7-c493-4fe1-a501-595ef567aadf"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"DecisionTree\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 2, "Length" -> 2, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`AtomShape[189.], 
                    TypeSystem`PackageScope`AtomShape[34]]], 2, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[402592372], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[
                    TypeSystem`Enumeration[
                    "DistributionSmoothing", "FeatureFraction"]], 
                    TypeSystem`Atom[Integer], 2], "HandleQ" -> True, 
                    "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[402592372]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["DistributionSmoothing", 
                    Style[
                    "DistributionSmoothing", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1570114620][{
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover["FeatureFraction", 
                    Style[
                    "FeatureFraction", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1570114620][{
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{189., Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1570114620][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1570114620]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1570114620][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "DistributionSmoothing" -> 1, "FeatureFraction" -> 1], 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[
                   TypeSystem`Enumeration[
                   "DistributionSmoothing", "FeatureFraction"]], 
                  TypeSystem`Atom[Integer], 2], 
                 Association["ID" -> 210758527050217]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "66.7631842730663009888`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "1.839878688296140874`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6308342689647401524`3.",
                   "\", \"", "0.7044294164965858585`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6308342689647401524`3., 
                  ", ", 0.7044294164965858585`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.6748683201088603312`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0225030409224440432`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6298622382639722517`3.",
                   "\", \"", "0.7198744019537484107`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6298622382639722517`3., 
                  ", ", 0.7198744019537484107`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "6.03`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "28.3`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"171.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.96`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.39323768846065}, {
                    4.0943445622221, -0.16842722133995744`}, {
                    5.786897381366708, -0.24576733450852717`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.350748778133912}, {
                    2.302585092994046, -0.2109161316666954}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.39323768846065}}, {{
                    4.0943445622221, -0.16842722133995744`}}, {{
                    5.786897381366708, -0.24576733450852717`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.350748778133912}}, {{
                    2.302585092994046, -0.2109161316666954}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.4271506297827026}, {
                    2.302585092994046, -0.3604372109246216}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.2668084117446396}, {
                    4.0943445622221, -0.07886385355832815}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.4149601913837651}, {
                    5.786897381366708, -0.10110096006071938`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.667631842730663}, {
                    4.0943445622221, 0.5924029104465398}, {5.786897381366708, 
                    0.6561269985837178}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5563598689422192}, {
                    2.302585092994046, 0.7108834925358477}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.667631842730663}}, {{4.0943445622221,
                     0.5924029104465398}}, {{5.786897381366708, 
                    0.6561269985837178}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5563598689422192}}, {{
                    2.302585092994046, 
                    0.7108834925358477}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5353453364184296}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5563598689422192, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5353453364184296}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5563598689422192, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.39323768846065}, {
                    4.0943445622221, -0.16842722133995744`}, {
                    5.786897381366708, -0.24576733450852717`}}]}, 
                    "DecisionTree"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.39323768846065}, {
                    4.0943445622221, -0.16842722133995744`}, {
                    5.786897381366708, -0.24576733450852717`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.350748778133912}, {
                    2.302585092994046, -0.2109161316666954}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.39323768846065}}, {{
                    4.0943445622221, -0.16842722133995744`}}, {{
                    5.786897381366708, -0.24576733450852717`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.350748778133912}}, {{
                    2.302585092994046, -0.2109161316666954}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.4271506297827026}, {
                    2.302585092994046, -0.3604372109246216}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.2668084117446396}, {
                    4.0943445622221, -0.07886385355832815}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.4149601913837651}, {
                    5.786897381366708, -0.10110096006071938`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.667631842730663}, {
                    4.0943445622221, 0.5924029104465398}, {5.786897381366708, 
                    0.6561269985837178}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5563598689422192}, {
                    2.302585092994046, 0.7108834925358477}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.667631842730663}}, {{4.0943445622221,
                     0.5924029104465398}}, {{5.786897381366708, 
                    0.6561269985837178}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5563598689422192}}, {{
                    2.302585092994046, 
                    0.7108834925358477}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5353453364184296}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5563598689422192, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5353453364184296}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5563598689422192, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.39323768846065}, {
                    4.0943445622221, -0.16842722133995744`}, {
                    5.786897381366708, -0.24576733450852717`}}]}, 
                    "DecisionTree"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {
                    2.1689736810648603`, -0.40955457720328103`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[
                    408]}, {-0.40572715885624405`, -0.16842722133995744`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.783530661256209*^9, 3.7842276465544925`*^9, 
  3.784391401704877*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"b0e5989e-4ac5-4b0e-be96-8e8dca7c91da"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{
  3.784231133386287*^9},ExpressionUUID->"2d321485-68de-42c3-b4f4-\
eadf77113295"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DTtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"DTtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}, {
  3.7835306659645243`*^9, 3.783530670309016*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"80c29a0d-de1e-4685-8522-54803c6f303a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7314285714285714279`4.080468980712039", "\[PlusMinus]", 
                    "0.0336001519159240536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0287869, "MaxTrainingMemory" -> 
                    165184, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 49, 56.6341379`9.505653130368422}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
               4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 
              8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 
              10, 10, 10, 10, 10, 11, 11}], 
            "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5AZDMTiL+/vb29c
v58pfj4Y315pu/9iiuz+/IKZ+0D4aH6g3fxJrvYpwYvt9ZJO7/t94PC+4/J7
wHhK3RYw/j1r7r7E7W37vr3M2xf7wHBfrN5DMPace37f4lyffUJT6ve+aBbb
HyUjuH9NGcd+B1+2/fL8zPs3P2XYPzfs3T7xuIf7dgld2Of38iwYXz+3cd+a
BNV9iaXL9sr9lN9rVjLTQTFz8b7oxQv2nRefDca1xyaB8Y/ejH0PymL36aT+
25u3ZulezQXT9rFzTwXjww8m7qvb1rdvo3nrPu+Khn3L5eP23VoQAsbfrszY
f9I/e/9J2Tf7XAP69nFrb7XNdAiyP7U50z6iar39iZry/Wv+h4FxGavY/kkW
QfsmnpllV6bVYc+cOcNe7tkO+zUqJ8H44ldr+zSLFfYApMy7fQ==
             "], "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVjmlTDQAARY+QQvZtRCRlKZKoZKlHqSTLe78gM6VPzDxmjP+EiCxZyhKK
7EKRrBVClrTg9Ppw75k758tN3HcwWBkFHIqJVLD8SCAcLj8aio2MkgOHK/ZX
hDOyqkZ9KJJRZvDLLaTz3Gf+cAMf/eAZTzubn64niddm0eRt1/HH927mkROp
94pv7PSpTxzHEvr97SbuesPrdtvlWN6axy1j+WIKCUxgyAAN3rPFIiaRz0rq
3Eo8U6j2hH2OZwcPrPGUq4lmY+TZduJYxieXs4f56H0Xk8Mdj3vMs9Zaygom
89Vep5LLoCW8M5M5zOWhraaRyAUbLSaGnXz3myEWkkwB7bY5gzFc86pByjjv
OVdx0kVks5TLzqLZQh474BouedEXzuSm25jHLlJZwF+H/exeXvnS3fQ4jQ7/
+8/prGUEZy2w4A==
             "], "LeafValues" -> 
            RawArray["UnsignedInteger8",{{2, 2}, {1, 4}, {2, 1}, {8, 1}, {2, 
              2}, {74, 1}, {1, 2}, {2, 4}, {6, 1}, {1, 7}, {2, 2}, {5, 1}, {
              22, 1}, {2, 8}, {1, 8}, {9, 1}, {1, 2}, {17, 1}, {4, 1}, {5, 
              1}, {12, 1}, {1, 2}, {2, 1}, {6, 1}, {2, 3}, {3, 1}, {1, 3}, {1,
               3}, {1, 6}, {4, 1}, {1, 4}, {2, 1}, {1, 5}, {3, 1}, {27, 1}, {
              2, 2}, {4, 1}, {1, 2}, {1, 5}, {4, 2}, {2, 1}, {1, 3}, {1, 3}, {
              2, 1}, {5, 1}, {1, 3}, {5, 1}, {1, 5}, {1, 6}, {2, 2}, {1, 9}, {
              5, 1}, {2, 1}, {2, 3}, {5, 1}, {1, 2}, {3, 1}, {4, 1}, {3, 1}, {
              20, 1}, {2, 2}, {1, 3}, {4, 2}, {1, 5}, {9, 1}, {1, 2}, {3, 
              1}, {1, 3}, {2, 1}, {1, 6}, {4, 1}, {4, 1}, {1, 2}, {2, 2}, {8, 
              1}, {1, 6}, {2, 1}, {1, 9}, {2, 1}, {3, 1}, {1, 3}, {2, 1}, {1, 
              4}, {2, 1}}], "RootIndex" -> 25, "NominalDimension" -> 0]], 
         "Processor" -> MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.6748683201088603, 0.022503040922444043`], "Accuracy" -> 
            PlusMinus[0.667631842730663, 0.01839878688296141], 
            "EvaluationTime" -> 0.000018067150753768845`, "TestSize" -> 2092, 
            "TrainingSize" -> 10, "TrainingTime" -> 0.03129314285714286, 
            "TrainingMemory" -> 234489.14285714284`, "ModelMemory" -> 5616., 
            "ExperimentCount" -> 6, "ModelUtility" -> 0.6357900598096875, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.6272522715492331, 0.031831739247253736`], 
              PlusMinus[0.6997758014879755, 0.045149274755347316`], 
              PlusMinus[0.6466295267266227, 0.030006776344157753`], 
              PlusMinus[0.7315434978212891, 0.030592737659395547`], 
              PlusMinus[0.6517632582913534, 0.048976932320657335`], 
              PlusMinus[0.7090487337126279, 0.0474007539801626]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6824636233023149, 0.023433688669487116`], 
              PlusMinus[0.6985655219164417, 0.0230643270175169], 
              PlusMinus[0.6802615338297066, 0.023448826266348314`], 
              PlusMinus[0.5931205511329665, 0.024624707729288743`], 
              PlusMinus[0.6700499206989993, 0.03332685471030716], 
              PlusMinus[0.6768409498370311, 0.027062948536858]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 408], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 172305684849126]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6748683201088603, 0.022503040922444043`], 
                 "Accuracy" -> 
                 PlusMinus[0.667631842730663, 0.01839878688296141], 
                 "EvaluationTime" -> 0.000018067150753768845`, "TestSize" -> 
                 2092, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.03129314285714286, "TrainingMemory" -> 234489.14285714284`,
                  "ModelMemory" -> 5616., "ExperimentCount" -> 6, 
                 "ModelUtility" -> 0.6357900598096875, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6272522715492331, 0.031831739247253736`], 
                   PlusMinus[0.6997758014879755, 0.045149274755347316`], 
                   PlusMinus[0.6466295267266227, 0.030006776344157753`], 
                   PlusMinus[0.7315434978212891, 0.030592737659395547`], 
                   PlusMinus[0.6517632582913534, 0.048976932320657335`], 
                   PlusMinus[0.7090487337126279, 0.0474007539801626]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6824636233023149, 0.023433688669487116`], 
                   PlusMinus[0.6985655219164417, 0.0230643270175169], 
                   PlusMinus[0.6802615338297066, 0.023448826266348314`], 
                   PlusMinus[0.5931205511329665, 0.024624707729288743`], 
                   PlusMinus[0.6700499206989993, 0.03332685471030716], 
                   PlusMinus[0.6768409498370311, 0.027062948536858]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8449927586218582, 0.0791729791352276], 
                 "Accuracy" -> 
                 PlusMinus[0.5924029104465398, 0.03991447942262219], 
                 "EvaluationTime" -> 0.000027350666666666672`, "TestSize" -> 
                 300, "TrainingSize" -> 60, "TrainingTime" -> 0.0341078, 
                 "TrainingMemory" -> 90464, "ModelMemory" -> 5744, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5017684352589071,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8449927586218582, 0.05598375043326047]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5924029104465398, 0.02822379906726706]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7821041724098627, 0.12173760394882466`], 
                 "Accuracy" -> 
                 PlusMinus[0.6561269985837178, 0.046796603774068184`], 
                 "EvaluationTime" -> 0.0000285859756097561, "TestSize" -> 246,
                  "TrainingSize" -> 326, "TrainingTime" -> 
                 0.10211459999999999`, "TrainingMemory" -> 210258., 
                 "ModelMemory" -> 6384., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.5356004995899016, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0017985435265087`, 0.1327227791193372], 
                   PlusMinus[0.6839212899868691, 0.11350682677623564`], 
                   PlusMinus[0.7197014207422446, 0.11341769756424373`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5848814565592821, 0.05453178948606821], 
                   PlusMinus[0.7053633842701252, 0.05069407000765742], 
                   PlusMinus[0.6692188059568723, 0.05222799915885347]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000285859756097561, "MeanCrossEntropy" -> 
                PlusMinus[0.7821041724098627, 0.12173760394882466`], 
                "ModelMemory" -> 6384., "TrainingMemory" -> 210258., 
                "TrainingTime" -> 0.15909301034180542`], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[Integer]}], 2]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 172301389881830]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843913976498871`17.330571035771623*^9, 
         "PreprocessorEvaluationTime" -> 9.3027263374486`2.*^-6, 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.32000000000000006`, 
             "ElapsedTimes" -> 0.3479266, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.2879239, "ExperimentCounts" -> 1], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
             0.4358851, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[172309979816422]], "ID" -> 
            172314274783718]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 1.966996, "MaxTrainingMemory" -> 
         1151784, "DataMemory" -> 806280, "FunctionMemory" -> 169288, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 49, 58.4936687`9.519683691960681}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
      1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
     2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
     2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 
     1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2}, 
    "LogProbabilities" -> CompressedData["
1:eJyVlU1IVGEUhsdRGn9WA0oLhXRaDBgIWS0sMMdsIy1SSMTaKLoIIcEQxJhC
JYT8IxSJWYgMQwgyE+MPiKLnlotZ5EJdBBHEICIRiWaQOprmD5+LZ4TDLC6X
w/nuOe/7nvc7N6+uqbLBbrPZPhw/J+/VV9PlXd5ueeLw+7LvOy2XzxfZ6V+U
G70bOx5rT9a385853POSkRxs+zmQZC3VhwORYb+4yoe+1IymW9lv9gO1n97L
1sTyP29WmlXrSc/7sTsjWY+mZsONdov1tbwWn+H4LQ/eya+rf74K84Pfbjrr
nq7IZlHssLTg73kf05fnycfwNjo8H7tzd9xvs9rW3B19lz/Ky5m5z0HvpFT0
XL+W8jolYXzVNYWhZteRBFY8I7dmF8Semx/LGDuQlqE158OqiLg7y3K+3wtK
19vG2y+uOKzNyHbxpf1RCYeaBgsep8bFmp7Er/FnTD6cN/GSn/nO1NH0pf/M
HM1cjU5GN/IxfQ0OjR/7sR758j5ofqVfOG+eZ57+pX7Ul/g0v/K+aP7gvOhH
9uP3rN8ajW6VVG5IRWZ7LFQdjbtfnCf58jzxXOznpPM5anqwn7ZP6H+NP+cd
x+cUx7qYN/1PfzKv+Zv6Ms/7Tbzsx3paf8bUm3lND60e9dLmQz7ch5x3onzj
+MG/2nn2Ix/6ifi1/ZDoPtD8rc2X9bXzWsz7Sv7a/5P+Yky89IvmT+5r4tH8
SX6aXppftH3C+twPifpf01Pzh3Z/OLf/ztTCzQ==
     "], "CountMatrix" -> {{111, 17, 0}, {30, 17, 0}}, 
    "IndicesMatrix" -> {{{1, 3, 4, 5, 7, 9, 10, 11, 13, 16, 17, 20, 21, 23, 
       26, 27, 28, 30, 32, 33, 34, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53,
        54, 55, 57, 61, 63, 64, 65, 66, 67, 71, 72, 74, 76, 78, 79, 81, 88, 
       90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 107, 109, 
       110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 129, 130, 
       131, 132, 134, 137, 138, 140, 141, 142, 146, 147, 148, 149, 150, 151, 
       152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 
       168, 171, 172, 173}, {12, 18, 24, 40, 43, 56, 59, 60, 68, 73, 86, 100, 
       108, 128, 133, 135, 175}, {}}, {{2, 6, 8, 14, 29, 36, 37, 44, 62, 69, 
       70, 75, 77, 82, 83, 85, 87, 103, 105, 115, 118, 119, 127, 136, 139, 
       145, 166, 169, 170, 174}, {15, 19, 22, 25, 31, 35, 38, 41, 58, 80, 84, 
       89, 116, 117, 143, 144, 157}, {}}}, "ExtendedClasses" -> {1, 2}, 
    "Weights" -> SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00010266457142857143`, "SingleEvaluationTime" -> 
    0.0067429500000000002`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783530687206317*^9, 3.784227651087818*^9, 
  3.784391406719592*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"c3e53c3e-08e7-4c16-8864-a725218e5b34"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{
  3.7842311418396215`*^9},ExpressionUUID->"73cc8ba2-3e01-4542-989c-\
845fda8cf4b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DTtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.7835306740469017`*^9, 3.7835306749963245`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"6d00d667-5ab2-4811-82a9-b5d4c7b4665e"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.7314285714285714`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8252788104089219`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.41975308641975306`"}]}], 
      "\[RightAssociation]"}]},
    {"0.26857142857142857`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.7872340425531915`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.5`"}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "111"}], ",", 
          RowBox[{"2", "\[Rule]", "17"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "30"}], ",", 
          RowBox[{"2", "\[Rule]", "17"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.7314285714285714, 
    Association[1 -> 0.8252788104089219, 2 -> 0.41975308641975306`], 
    0.26857142857142857`, 
    Association[1 -> 0.7872340425531915, 2 -> 0.5], 
    Association[
    1 -> Association[1 -> 111, 2 -> 17, Indeterminate -> 0], 2 -> 
     Association[1 -> 30, 2 -> 17, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{3.783530689480013*^9, 3.78422765361889*^9, 
  3.784391409634856*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"35471586-a081-4192-a94a-452ff24d305a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DTtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}, {
  3.78353067850731*^9, 3.78353067944877*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"eae32651-dd82-4704-bbe5-35c3f23b85e8"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQNxDjlavJbP7anN37jS5Mmd9Hb7V1rnjxyvxeS7
1quvfto70f4F96+mfQue2zd1/vMLO73bfkfN6e01pwnzv99kPbLs0gH7OOdK
3qemL+xnzQSBk/aek1SA6KX9g5NZlcksl+0P/ZSY03/wpX0yi/DfuWuu2Wcl
Ll0uFvbK/rnd7oYbIbfspZwvy77Z/so+uxKk4q79/er3e7/fe23/UTQeiB7a
nz0DAm/sua4vLrDlem7fOD34QxHXOzgf5l8A3fSUTQ==
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
           7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQAWJGIGZiQIA4hxwtXsvn9tTmb1xp8uROerv9K63zR47X
YvJd69VXP+2daP+C+1fTvgXP7Zs6//mFnd5tv6Pm9Paa04T532+yHll26YB9
nHMl71PTF/azZoLASXvPSSpA9NL+wcmsymSWy/aHfkrM6T/40j6ZRfjv3DXX
7LMSly4XC3tl/9xud8ONkFv2Us6XZd9sf2WfXQlScdf+fvX7vd/vvbb/KBoP
RA/tz54BgTf2XNcXF9hyPbdvnB78oYjrnT0Ay62OTQ==
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7257142857142858}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7257142857142858}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.011428571428571429`, 0.7341040462427746}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7341040462427746`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.011428571428571429`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7341040462427746}], 
          Row[{"RejectionRate = ", 0.011428571428571429`}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.011428571428571429`, 0.7341040462427746}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7341040462427746`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.011428571428571429`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7341040462427746}], 
          Row[{"RejectionRate = ", 0.011428571428571429`}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.017142857142857144`, 0.7383720930232558}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7383720930232558`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.017142857142857144`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7383720930232558}], 
          Row[{"RejectionRate = ", 0.017142857142857144`}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.10857142857142857`, 0.7435897435897436}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7435897435897436`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.10857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7435897435897436}], 
          Row[{"RejectionRate = ", 0.10857142857142857`}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.10857142857142857`, 0.7435897435897436}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7435897435897436`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.10857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7435897435897436}], 
          Row[{"RejectionRate = ", 0.10857142857142857`}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.10857142857142857`, 0.7435897435897436}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7435897435897436`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.10857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7435897435897436}], 
          Row[{"RejectionRate = ", 0.10857142857142857`}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.13142857142857142`, 0.756578947368421}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.756578947368421`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.13142857142857142`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.756578947368421}], 
          Row[{"RejectionRate = ", 0.13142857142857142`}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.2, 0.7857142857142857}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7857142857142857`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.2`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7857142857142857}], 
          Row[{"RejectionRate = ", 0.2}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.29714285714285715`, 0.8048780487804879}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8048780487804879`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.29714285714285715`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8048780487804879}], 
          Row[{"RejectionRate = ", 0.29714285714285715`}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.35428571428571426`, 0.8230088495575221}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8230088495575221`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.35428571428571426`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8230088495575221}], 
          Row[{"RejectionRate = ", 0.35428571428571426`}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.4114285714285714, 0.8349514563106795}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8349514563106795`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.4114285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8349514563106795}], 
          Row[{"RejectionRate = ", 0.4114285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.4685714285714286, 0.8709677419354839}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8709677419354839`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.4685714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8709677419354839}], 
          Row[{"RejectionRate = ", 0.4685714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.5428571428571428, 0.9}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.9`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.5428571428571428`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9}], 
          Row[{"RejectionRate = ", 0.5428571428571428}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.72, 0.9387755102040815}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9387755102040815`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.72`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9746794344808964`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9387755102040815}], 
          Row[{"RejectionRate = ", 0.72}], 
          Row[{IndeterminateThreshold, " = ", 0.9746794344808964}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.715061224489796},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.72}, {0.7257142857142858, 0.9387755102040815}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.78353069244831*^9, 3.784227656478066*^9, 
  3.784391413631129*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"7ebfc1bd-8c9d-4755-aebe-7c0523e752bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DTtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}, {
  3.783530682361108*^9, 3.7835306833445663`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"6ef96db3-0258-42db-97e8-17d6e874907e"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8917618849224045, 0.6966670336600804, 0.2780214062791888}, {
   0.9251705142484353, 0.8356829999044861, 0.5799821192282608}}, {{1., 0.42, 
   0.}, {0.9251705142484353, 0.8356829999044861, 0.5799821192282608}}}, {{0, 
   0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["111", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "111", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7872340425531915`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.8671875`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.825278810408922`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{111, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7872340425531915}], 
         Row[{"Recall = ", 0.8671875}], 
         Row[{"FScore = ", 0.825278810408922}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["30", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "30", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2127659574468085`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.6382978723404256`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{30, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.2127659574468085}], 
         Row[{"Row fraction = ", 0.6382978723404256}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.5`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.1328125`"}, "RowDefault"]}},
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.5}], 
         Row[{"Row fraction = ", 0.1328125}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.3617021276595745`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.4197530864197531`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.3617021276595745}], 
         Row[{"FScore = ", 0.4197530864197531}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.8671875`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.8671875}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.3617021276595745`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.3617021276595745}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "141", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7872340425531915`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{141, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7872340425531915}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "34", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{34, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["141", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["34", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.7835306842740326`*^9, 3.783530698810664*^9}, 
   3.784227659602865*^9, 3.7843914166103926`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"7c8567fa-4c80-449a-9f12-19c77d8a8d76"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843874296938906`*^9, 
  3.7843874323020163`*^9}},ExpressionUUID->"9aab455d-2a3e-40ac-bffd-\
4cf942464c4b"],

Cell["\<\
1) The Classifier measurements show that 73.1% of the data is classified \
correctly and 26.9% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 111 data correctly predicted to be belonging to Dataset=1 and 17 data \
belonging to Dataset =1 has been incorrectly classified to be belonging to \
Dataset =2
\tb) 17  data correctly predicted to be belonging to Dataset=2 and 30 data \
belonging to Dataset =2 has been incorrectly classified to be belonging to \
Dataset =1
3) F-score of Dataset=1 is calculated as 0.825 and Dataset=2 is 0.419.\
\>", "Text",
 CellChangeTimes->{{3.784231152735258*^9, 3.78423121449337*^9}, {
  3.784387424377807*^9, 
  3.7843874256817756`*^9}},ExpressionUUID->"f795da16-e7aa-4a20-8233-\
ebe09a1e7a08"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nearest Neighbours Algorithm", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 3.7835301376715503`*^9}, {
  3.7835307063333454`*^9, 
  3.7835307321470222`*^9}},ExpressionUUID->"be7f9724-b6aa-4657-94bf-\
38127fd7029a"],

Cell["\<\
The nearest neighbour algorithm stores all the available cases and classifies \
the new data based on a similarity measure. It is used to classify a data \
based on how its neighbours are classified. Similarity is defined using the \
Euclidean distance method between two data points.\
\>", "Text",
 CellChangeTimes->{{3.7842349397358494`*^9, 3.7842350112147617`*^9}, {
  3.7842350727506504`*^9, 
  3.7842351096647997`*^9}},ExpressionUUID->"644ac81a-a1e3-45e0-b5da-\
0d705aa2f7e5"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{
  3.7842315736185713`*^9},ExpressionUUID->"eb02a2eb-b287-45cc-bf45-\
d94630ea22fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NNtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}, {
  3.783530711730339*^9, 3.7835307359538364`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"0c6cab84-bc0c-4256-a774-490684d4ab05"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0255565, "MaxTrainingMemory" -> 165240, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 50, 33.6773919`9.27991334993346}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1:eJy1XXlUjlv7bqCkRIZMHVPm8cjsOPYTQuZjzjEl8xgiY0dSiGTIHJoQipCU
1JNKGjXP86CSSrMG6XfW+rm2tfa79nrfb63v++v9b6/93s89XPd1D7vvhj2L
NynIycndkJeTU/33t1Dj7Sm/VXnk0///ij0VTKpff64SF80fPua+WrhYPUp9
u6dNmOgwd7XOztG54qPvyyYHXw8Qj9rbz1vQ5Z0Y9SgjM+dBsihvvj/gaUCe
uPTkYr/Fg7NF9lzTRFVrF68Scq1W53ScbZJ4/9zLfhttE8XVKdmmieq54uje
M4/OXx8pNvbZ7m/UEC7mdblRPHZHAbkw1CGxfWQueWh3g0x/LJKmQ3udBn1q
Ehv//5eoN5jce/GogAQq38451q6IBA0I6nPjfAm513N/enaLhrDrVYnOw8Z3
Yo8Ih8+D9ALFDyphow3VPhD5GVnF0dMSRbUd33TzVn6WuK+njoejbVGlKHez
k7/lwwTxomuvu1bvksWzH5auqDDOELcc2fva5pWnqL2uxyfLC5FUDl2NN1+4
ZhJCvh46eU3BJF3ivmZrvH2uTQoRTeXyPPV2poqb8mrsIgZkiLXnwpPWZOWK
dclp+38PihLLXMQ7U3Nfiz/6brnXJjxWPBF6MFU7xZVM7m/qvts5nrD3tfFQ
etnyzw/SqVv/aQVBz8WD/RInn6x6Joa4brNULIoVfS/u2dlpYLQ40WxfvaZB
lLhKMaidk5tKQMhu7bwu2XIBkC97rkannrF6YjnpfWHjxY4RseKb3bMf6q6J
FxPGP1g95lAC8TfUWXDRoITsWP5jpemRPHJef/7o7muaxdDNunqdrn/j6sPv
Mbct9F1zxRGLFy/qfSiFygH60M888mlpbQyV74XRi7V8LDJFvQkke8/panFz
tn6roXvrRFa+r+ctj+/X3CSqr5E3u7w0XVzYsq5D+YoscYhpZ/kBAxLFJc8q
d95fECvu8r0ZFp0UKzb+tSYs9Fguaf8lddyW4U2kzOb9w6tdFAT2vpvmvtE4
7/NZHFl+/5XV8A6Cfqd5ZqP2dBEg352bn5/c3hwuaubvCV5/0EecULpgaMO2
MmoXQ9fsLHv35weJ+y40Fot/r6gVL0z4mOy/JFgM21awvqEySuysEzgxYU05
wX2NNfzH9rQLF/fbRXfJJclS9ber/530qYMTSUJ2wrDSpBh6Lu5Ljm9Ky3if
II4J2qNuohInPswwcp/tkSviXFeTmLTC7wYS+lvzqLGk3ch40adCbfvK/qFi
r7oJ+/cMeS8qeA716bxCTggfNL7/2OSrYrpzUcm7G6/JreXfY7PkqknbAV/l
ku/LC6VKBZkfZ7dInBtk+eNW/Yhw6h8WHqz3zwi0FzUHPn3cqTqP3je2cv+T
+ZPixWVC+z5lSxtJlHOSVlXnWsLTX+tr6813bq8hrL3lB+eNMVJJFtUXClr9
dyWIri+DTg1ziRWPjM1/tz7tgwi/0zO0/IyPY4XEuV/eOIbeVmwRt0+pqZko
xlF/dqR8QXbCUQ9xqqbB5e/OvmKhfMcncSPDqd/p6PNAubGxjKhkXm3scqpW
Qg6viMVkg6o6ce4s535ut/897/3Z7o+qU8VnqTdU7APzxVbjG+PEwUlUf8dq
6S310coktmddHJd/+Uz9DnvfufZlB2audhXznAO/1FskUzlUdNpev8Uxndpb
quUWa3fN19QuNFY5/fEy/RNXvmNKdF9l+H0RA5/u7b5zfRq1t8eGE4c9sMwU
vw3s3H9XQLCY5HbwasWZj9SOcS70gWdv7Hfrv2fYYO9ERzFs2e1OFu4BxDBi
w8Lpo6IJzoX+jn3r1TtU5bWEXUC+uC/OnaNRn5A2KUm83MdAL9V/HGkvBMbW
BEWIZj0mVM75Wku/G+yY589a/fV1tcO+OJJ+LMG6zbdYEvdidMWxmDzxtzKf
4lPJ0WKPu6WXWq96KhY028cnXKoRT3kcGLg4plDkyffYiQt2d3rHEsRj+N+L
QUOc7JclUPl+ifjoar4kWtyzMfVLH5si8VvYy0kdZ4WLvDik/cF+1Iyt1YT1
vx2fzo/8zStDNH5ifeNqr0TRL67njbe746hdJHddPl1Fw1PkyQH2Bv2FXXSv
2mzXun8TcUx9tnyB6b9xv2pTX+uwMHpfxKGPZsFPPYObJc5t3q096JZbvkS8
2Pkk3fXigmTxytGL3/w1oqgcYBdzTBK8FrSupHbMymHogO6HF5F0iXNXrP/n
ZnZsmlg0yfBh9Mo4CXuDfHn+93+lD+axE/RyvlRL2AXue2TRG/e5BwrI5UI1
HYvHpWTrcj3FKnGbCP1trJyyc9/mRolztdrPOm9e803i3KNj1CetH1ognsrU
HLb2YaxoZ7dj763UGNFLv+Lsel1vind49x3yXqddnoJcAPAD9CG+ZsfAlS7V
BH6nl0vXprypsaKN983czodqJOyN/W6Ib8sal6qeVmgnpDq5GdteURGOTOp2
IiA7lSAeP+n2SePkziICf2bVe+rwu/9UistqKg5YLWmS+G5fV/41OcKwQsIu
lG/sjc83zKFxqD5cb0m3Kb/sQtk5z1NzQybFO7z7djSyvnDufTS143YOq9wW
Pc+ncR7666K2KrmNUSzpWvdHdsqhdC7+hf5enZ5T7zHOTyxu1VU14p23+Oau
Yw/r5hxyZE3wze66b8Sds+Qn7NzzXlwxuLOqzdES6h94+OxC2xw1L61AwsaL
Ox2fb3YsSxGjA5t+pD+NoN8tKDVO2dGgiJz3TY4O0vrGjW+IF6x8161eWnDO
K06MV07srByTSO3t1eV3L/Z1rKB2zItv0F/gB8TNu2oPe+tOzKf6i3Op/v6U
79LNtiPfmBVJnKu7qqzJ8H4e0bYrc1CdEkLl22pdiHL3XimijdD12P1IUbyX
n/7bvVuPuPGNlcOaMWYKf6soBmwZcVTt6zY14YdVlfXkxWrCGLWxvlYjOwn5
k15rFKeoC017krS+jlcWkF8AV0N/2XMRL3h+Uv/aE23dtvEU98Gf4bvBP7Dn
+rdyO/jJ+JsEjoo+bNX/xfk0ahdqJXc2P1KKp/IFLuHpA/IL4KiYvzKH9R4W
K3bbZOQ3tTRHDCu/EOF0Lln8W77PuGt348Xgd8lVwolvonKO6fna7BKun8S5
bB7wrP+Gx6cHlpHMPj3X7uicQHEJ8G/Eez2NVV4t4oTOzqOdwr9L2AVwKiuH
f54fWuullUP9+okDndaqtI+h+AH6y7vv8sFdzlcbVZJjSjveT82Monm3na7d
h6pZMaLd3JIPpqGu4rEnGcdWLn9HBm4uWmD75gc9l2fHyAuF2A0Jx+1e0bzw
0LObkY9OBlJ90Dv+2cldN0bU0xw1YH+2aoCK18Am6zqlAF6e5dHLorlQ05N+
N+THl9Srp53xcSdG0zMbL7gpCKf67bLMWthALDNLslpmtg4YPPRBX6eq1gFO
rSL3V/aQC2DvG97uSXiJxyex+WrkjQWKb8nEeQNHT3sXQkyNC3zMztqRFf3k
j4ZN1xAW1rR8GP3wB0lYNzm/rUodzbN4/qGXVo8Bc1u+i8oJYz5pPSkg7tNG
2r/xLyW3z+i8tL74XNQyqGvetaWImB+4eUT5aAiNF1S+HP/Aww+PNfdYv+kb
TP0D4vzjO+0GtZtdQu1t/z6T44rWNRLnmvhuWqnhmENG951Tcu66orCp8zcd
syNtBDLva1Dpj1Cab9out2+29Ekku48lyJlv/kZgF7z4Bn6n/RGvtF3mXQW9
fmlWD+W6C1GTYzVOX8kgr2fk67rOvSjenZntoT7pFTlnOHvm4fFlBLiEpw8v
U5Jmpc75KJFfxH+r0G/zT5IY0P+kztEZv+I8/Dr8A88uKjf1j7fbWUtYvB5Z
q+HdVFBMcer244v2+fTzo/oAXJLptLN71TcliXwe8eLb/RyrqLYKQvqVXlu7
KihR/GC7tTjjvkoTuf7yteA8uZqszdrb4XVmPVE5n7itT7tq7n3nT3q7zXxS
pkTcLPBPKVVY+ovfQT4Pf4a8BX6Slw+xedai7rnus86Gib2mVN94lxAiHkg/
ohPuHS3iu0HPZt8ZbZF1tYqbX7BxM9jzeKfgv6JofpE7YZm7dtv34kwnt1Ha
kU1S8274yWPefkvWT0gmz70em8//O4m8Pz2vpMtxeSF12oKLfbrEk7URyzVn
rXhB46Y0HBU16K/vx0O+StjbizXtDi7enihWLn5YMeZOjJj/pIyc3hsryvrd
gHe2Wjtu7rrJh/rJzc5V0dotzmL6Z0+9uD+iyaU7JyZ+GOdPeTmW7+PpA/w6
eJibC08XifM+i62i3OYUXXEmwxRCkyuFNzRuwp9J43dGLVQdVhwv0vxivWOn
qV03FRLEizGerxq3jA2VOW8B78nam63Z9tkaD3MojmprKRb9ZRIjnh+ulbzx
XKsAxM1TX0Yu2X8sX+Jc8EaFj+Z+r6yJoLyRZ9G5Ids+RIrIC09sNpjTPClE
9Faa4Ro4QI6eezDc6XLUhUqJczOuf5+m+LRQIt+Uz/07L3BYBtUHy981Z7ut
jaD8GfwOz6/jvllNi9wTzOyIzZVxK3wCXAjiWy+/Tj5/XngibnzZbqXa5Vga
LzSuT+h02SCeyxPgu7H4QXSzm7xCIU3cfHnGwtFpSZTnwneTdi4vfztRN8Fb
NyKe8kawC+B12AVPDuDXWX/2NNtp0XfTVJofQx8ojyilHrDo+GXzxsZGCTte
liRXGGpiIdbX7aoZYOogfjhlm/z7Ry8CPhXxjXcueA3oA3AJ4hCbv0EfIAdp
/ld5Xc8TjnnNpPlF9rzkOT/I2Cm/dey0/rL4pKxC2cump9DFwnXezK0dBeRZ
8GfScB/73XxHDu0i3yFLfJvtqrVIO0SMy/O5rrsxTObvdt55TI/xBxqIV4mF
wbqX8VQOwds896WUxRPwntAz5Bes/+XxGtAHxKHapCum+tO+EOgDi6txLk9/
/1c8IvKA8PKN+T2HKQslzmuU1pxSF3ZY+7dzLlASVA0cvMbpvxPB90Ef4Nd5
/APiG6u/yDe9VKd81pSLEw3sdb2mqsXS+wJH8fwv6mTsufA7qOOsGPxIO90l
mMYh8HI8PbMtUtF5Nv5fOxj6x6ErKVnEWduw9vvjHIK8u+j9nP19d+STdHWj
gM9+rQSn7h7ilZUKAapPZ6w987SZe19evRD5cbetVpvOPI+j9TfUA4BLePp7
w01n9x+vimidAXkh4rzO7n+GWa8JEt13h+z+WB1J+RJp8Q14kpUv8rcjwTG5
DRviKQ9z7EmJsDDhh9R6FvIA4AfULw69cu7UdmKxBI8IfAYcxZPDwNxphsnH
mwlrFyOE2R82H31M5TtgSMSjiekuIvAv7ou4yepvsUPTtTblNRLxAnHoesC2
diU6yWJhh0j/LMUEWs8Cf3ZQLik4em2xxLngf1k8CX4ddnGtQb+icke8KDd5
g+dW50pqFzx7s8hqm/Worp7L2yNu4lz4M+gDz+9ctKtb27a1fADkAPleC7VZ
YRBeQ3Bf5MeI8/huvHjB489almeOdPvoKbZtu0WpYW44jZuy8gTwZyNe3Bux
dvZNsefzaivjSl9yd1VtfsbBFrKsl+Nvv1mbkhF9Zk9UCnpD62+oHzsndhNr
FpdIyAHnAq+fqThx6LKYRibPUPryz7NEMfTIoes1d4qJR55j+9GXSomseBLx
7dV09z7G63Oo3/lqtbmv47ZKMszILfu1YTi56FuzLjv7HcW/0uoM4KOAq4H7
JrXMvFQj96teiLoeeHDIlxcvgKMeai806bnBk0C+x/cFzT2nnUfrDNHnrw6v
exBD/Q74al6eJXc2bOWIwDIJe9sw4MzjKDVvynui3hJhb1W77LmScKlHxu22
U1q4/oGHJ1HvhhxOplVmrHeMkzl/g5+06qNSccVeTvB6ljJ/53RFwW9X9qDh
Khlkhp+6dsuhHHJ0Q9K9W/M/Uz1jeQIev87eF3URNh7bOtyN9LxbQPHkb0/N
Pi08GsvluVg+CvEN8QK8HHCJtHj8fsPggMpZ2RI4FfHtlcsox/FZ3v/mc7v/
/nNIJM03Szz2pImPFAQenwqei/XryLOgD8Cpi2p8txne96J5AK8egHyePRf1
IfAlqOPgXGn9BMA79WlP1fftCBRnvzU8NvR9gHhm8l8nhkyqIkaepuaFaYk0
P0Z8Qx2d59fBI1od7Kdosj+MfBLjekWejSbJAf07zEn0JcPGKHkYd/MSx9s8
+No/0IP6B+QBvPg236h04ZZPFRLyrZ7XJVjnUz6N87PyPvRtnRBHeZizZtPq
C+42cPNNxGM2vgGnIt8EfsB98d14PAHkwOpZfGWhgmtYDuXPoGfIA6TV/WHH
rL2N+qc59ZJJqERdD/Us4GpefANPgPwC9awx0wYZ7O/yC++0Pdg6Qe9eiDi+
1RxiML2ZDL65e1C5o5ygUzVz1U1zZwn5oj+KV79AvZC1C2n1LOAz9rslHfh7
z9q9caJbVe29F77xEvWsRfEpJ6/2b+DWTYFTgX/BaxTZaDa6rHsr6ve7+vWy
VgHJOpaSbTYwgKilBLvoDK+guETv6HgHTcNSiXN5crCPqlTT/NdKIAf4M8oj
Iu/mxAv4yUMGqseWdy8kx1qv2dqmVyVxcyj7M9YsnUB/kbcA9+lfm/7E60GT
+F1/h/mUHd+4+OHrrD9+jxhTRUb8XTbDKaiK4hIdq8VBI04mEuM+vssH3iui
+bzSQuGyrm0t195wLuQL/gz8A3hP2IWsPCL8AyvfVwN1p9gFvCHg7cGXIM4j
7575MOrx0XxJfQBvxNpbv6PE65CQSfvP0OcI/Hu2/ZGqG1/LufqLfB71Y+Cd
PlOsnefPyiahp09aBG7zp7wy+iqAo3j+gZdvut/KrzMO+yTi3Fnx7dQbfoRS
+UJ/efhh2LTRbds720r4HfBywCXgldEfBb/D019efENfG+K8neXzNRdafaD5
EOTLw5OPxp8qXPKimCRk2Ci90vEmhh0XTW5eHUhYPbs4Q85reO9pYsXtlqC7
Papp3wqv3gK/w8oBfkdz4RciHPtG1Eurxl25cIXyfdLq/uiHYfMhyBf5EOqx
uC/8A8//4r4sX22mMG+mwvhocuWKke2G8dnke8AGfbeFFQR1HPhJXr8c2/+A
c0N1iif2mBFGgKvx3eB/Wd6T1+/Jw5PQs0CbXifX+UfRvmLg9YGX5o29av1J
4r7gNVg90z4wbk+3c0UUn6GOPm/T+t9StFUpX82TA/xZZG75iKaN1WRLv9D8
oYv+9Sf7jDtfz1QRZpgf+nONjh8Jsl/7YltLFAG/I82f8fKLB3fV3YILyih+
QN4CXA358urziEPoTwXuU0ictVThnQNh+3Qfb819XW8vH4B4IQ1PAq8DP+ie
c0nqWu9F+0uQF+K+6P8d1qXj0mANSdwHvyON30GeJWt9CHEe/eDAD4Ombhu3
KreU9u8gbsqaH8OOl5w1SJ++QlVIfj75sPKAdsKTv0cW6MUUibC3Xh75zcdd
G0hRytykz4GKAvgdXh0desbqQ2RTz5a/b2VRfQDu+0/9DoujJmYNqVO6/quu
96LgZUzP/Ju0nwt8Kk8OPLzT0XW6pZ9cEcVniMeyyhfnom87u/zmj0UmGoLW
/uWZqpXbSGab2SEfvj4Xa29PGa4W5k7gJ1lcwuN/WX4HeQB4OeBfXj84z//C
TwJPsnETPDhvTkLWPoXuj/t1Db+VQPE66oWy9v+C31m9uuv1d3WVxEZJ/Uei
eh1Zmm27KLXVd+L0LsP/8eKXYrzb9tU1Ho40LwQf9SJg7/wbxp8k5GAwzdfP
6nATYXm5Y4eiLn9JSRbRvzPvTriqq/ZH6h9gFzz+gecfBlbfs9t9PJ9+N/h1
5EO4L88ueHhnaV5nk7PZWVR/UW8BPkMeC/1lzwU+Y/PutsKZHxMWtBbAP3wN
JD8WG3kTV8uOHd13N1K8zsPV4LlYOWwdsddi8up0Oi+CvkFePyKvznBke4c8
80se5Krhp6xhxw/Tuin6tuHPoGfwDzz8+6LJrV/O76m0Dw928T2x7NN9+ToC
XgN8KvAD+J2ypQcjmlqqufGC9Wfoj0LdCbgafVeoX/DkcCl4zArXRW8l8uPB
Osse3jyYK4EfePwve9+rx030X4UpCjzeftzG3pcOmf+aDwBeh/5KywNYf9aj
06lR1TaqAvwDcBT9bj/1gefPwBOw8oU/Q34BXM3yqU6ZCs2rxNYS/Tvog2bx
GfS3l2/cIb2eLwjwJFu/4MUL5AFs3TSkWmfg1zm+lLc/raL857bSl5RXZvko
iT6Qn/kmK1+Wn/xP6wHouwIuQV7om7/epItbsLhy7IAKR5OPEv0PwH0dRpS1
ab/XgctH7d//rfD6/WayT/eqdbFRC6nruSQ2oeKj+HDkn48Vlz4VwxeEeOda
JRKcC3vjyQH1IQmei6nPg7cHXwJ+kqe/sGP0Oe7+c9bNwsEvCfCkYnSZdbaS
H61Dot8e+sDzO+DP2P6SsqstcRrPsqm91S13D/BMeE/tAngyW3mJXKVtNTde
oL8EfnJ8yO33Q/xS6Xzh/pKnQ1L6vqR925ADzz+w8wGwC8Q39KcCpyJ/gz/j
5S3AUeZj1oUlGFeR0ucjX6us+hePTptv4NMUR3nwSTYvBve9FUX1AXmLtbBb
Tf+wpoQd8+oX6DNn+4rRP4n6Be++4GFgF/C/qGeh7xX5EK/PXNb+dcwtIs6D
V+bxJbLiB49uC7Q++OaKru5a1qdvhVE7xpwl8iGe/0X/GXvfCI/Fa43Hv6fx
zS/I8JTHzVDKV0vDO+x3g57huwGfoY6DeMzGed48L/Ck42enky8zquk8L+4L
XIL7wo6l4r6fdVPU53PPTdh64305gf8FH0XnyaT0MSHPYudu0T8JewN+gB1L
w6mQL/oJ0H+GOezSAY773BxSiLLvGSVH33cEeRb4Pp7/RR9Tm1SlM+P2yQtZ
py6uu2esIACf1Z8/YzTGqDudO4D/ZevzvPuy8Q31eegD8k3kLZi7Xa7tMtSi
p7yEfwAuYXkj4B34HY9Zr43Omb+idT3gEl79AnwJ5mMR51NaUvsd+BhGjvxt
YdD3owN5sWlC8D1FL0L9r5T8DXkLi0tmtO8+/eO9Ypp3I2/h5Re8uUXIFzgK
8+jwk8B9svKp6FNg+xxRP4b+oq8Y+IytQ0rrw0PcBC8HfUC9BfgMcvAf1Pqt
mrLkd0N+wfKe0AeWX0dfPPwOzy7Qj8j6s+61X16/+uFH7o4rd0orryZadd6+
Ee3LaHyDfHm4hMdrIF6g/gZeA98Ndszzk/BnrD4APyC+rX/br/ek8o+0TgZc
zeN/UZ9n5/2Rd1d8ueW65Ohr0X7wukWNXp70vqhDSsMPbH/1n4HGHZIcY6kd
N416XL5rcgTtL4E+8OSA/l/2u0HP0L/D8kbsXCgPr+O7Qb6oB0B/kc+D90Sd
ged3gH9fjjK82m5GFO2zwbnIu33Sf1/3OVykeFJafZ7Wjz0WvJldKk/7NdAP
vvjQuaVqByPJcft+2+aZJ9O5Dmm8HOKxfsWAo3dyHKl/aFhQs4z8E0uQD205
PmOS35wA6tdxX569wa8bqF7K856dQb8b5jowt7jY+eglC5OHBP3gyLN48uXN
B2D+gq2LUH/G2LGs/LqNnnhsplEK9ZPIj9n+h5IOgW1Wp/lLyAG88oPVKy/5
VJpQ+WKubn2PGWola9WFokELf//cS0EAjoJd8Hgj1C/Y+2KfAuot8A/gwZEH
8PwZ8s23A1xO1HnlkxvrbnbNrCgn7z4RpX4z88Rdny5uKJ/uRTDvJOvcOPB6
RtaJ4vmrOggNWzNWhXXuSnnajInlteqTQgjyC+AdxGNpuA+8EeSrYXRqmM7i
IIK9M6hvyhrfwKe6bHC+F2P+iPatoK6XMstszRCLXKLs9rHKrjCZ9kcB7/D8
Du7L9q+X29aee97wmfIa893aTnmx8SOBvcH/ai14f3HQ1kxu3YnFJdAz+DPg
B1nnW9DHBDmoW30fdHpABFFysTR0ifxCQpU2GM30CCPTM+y9B3199osv+ZkX
8vQXc7fsXCj6rqC/yLOgD7Bjnp7x9gj4uDwxLHlxjcoB+THky8Yhnp989dHO
t+Z6Axk5Ss6idYScgP4HzH2NLKn/7t0+iNalUS+c3dIk6hVL9lXALtg4j3iM
OR9Wf6XhB/Txs/uNMB/Qtt/ku/bGGQR9V9i3gjovTx94ezuAS1B/Az5DPo/7
8uIQ9q2wckCfGJt3A/dJ63NE3sLiSfSJgafFud7aBxRMv9XTfIgnB/h13Bd5
y/wblRt13zZSv4O+FbYfkadn4JV3t3t23CZaic6Nr7o5dNPjLr/62lrlXdco
GOFDgPtQz7rsef7Hgk313HrsrPMn1q4aHk3uxHdp3mOTQoaa2GaazKkipn3a
j7RKq6T7VmDH0vY/IA6xew/aZP4+Yk+HBBH9feDPkG+C1+DhB/ByCuW9F62d
8J1EXt4Vp68hL7y0Dzxz3Cie+KsWqY1pX0uUhrvvuDq3jt4X5/L6NYAfePPd
6AsCL4c4/1EhvXji2GayzD5w/dsFPyTkgD5S9ty9L4PNm++E//v/3yzxVPEh
qBfGf3ld9qa2tYC9Sf/p/NBc1XKbI6dyKN5B/y/iPPwZT76Yl2b3ShgWxl13
6hQumhYqdn5mFEf9A48n4PUTsDwB5Mv226NvEH6Hx0ehnsWLb6hfgFeWNc4j
XqAfBvqLuVDwUUUdFqdn7Amnegb58uIQ+vAMzWz1BlgEUPnGev8xIdMyhWAu
FHv26FzoT1zN8w/QM7Z/B/kQ7A08F+qQ0nhldo8W5Dvris2zU7PS6Pwm+ipo
vZCZo+LFTXbfFeoi8OvA68Al0uTA7iHCuejLxHeD/0VeiPwYfAmP92T3GKKf
FnLQ/tkPA//A4hJePwHuC7xjPPDd4/GbK4joseNH5PJckjchPazvwXSC+hDi
Gy8OYb8cy8MMbHiU/lEnle5dBE/7qGZtoOvZSqnzWSXuH0fF1TfQ/WfQM+yP
Ql0EfB/uCz/J28eE/moW/6LOgPiGvlfEeWn9O+CjIvzC110tfEL531v6xx3W
XQ+ic5bQB1ntmId34M/A98GfsXNJ2LPHnou+NtZPAqci78YeLeSF7L4K3r4g
1k+y/VHs/CbsjScH1OdZ/4A6L/wv6i2Qg7S5Rd5cUuvVugVbp9eS/JrTl1wm
hNI+McQh9D/w9lXw5jcx54P7gjeCHcM/8O7739pzyuM92X2OqDM49B3Sa9Kn
J+SY2eAB43f4yVw/5s0Bop/WwGKtQ9be9xLzIizu4+2JZPG6nkr777tKnEiF
7Qo1/RclREXDfW/poTQia97CqwdYJ/XpZDuxpwB+8v3m9qZa87wk9vdZzz0x
3tzpDld/2TpOgYqTTfnrEsLaBeIF+D6envH2MUEfMIeN+Ab5Qh+k9fGz/gG4
j/Zz/ewvkZWvRp85eFrgErPXJ+9rxiXSeRzsaUCdDHLg9j/8rEOyfgfxArgP
/gH+V5ocwHuu/NJzi9ncCtI/Nj81IrmMOPe4RdT/jKR7OLFHAN8NvBGXnyzR
Pn79fKsAVr57tzblaEyOpXMS0AdZ7S3DrfP4Ogu5AFYfor4q77096iWBvSm5
zU66duQd5ddRz+J9N54+oI5z4safXcZYfaB8Hw9HsfqLPUTsucjfwGtg3knW
fZmot6DPBngneqSfRcjgdwR7v9g+JuSx0vg+tu/qwLH6WaQmW7waHvawST2Y
1tHpngYpeyUM2w9ZOiVITmD7mLC3GXUn8OCy8p7gCVi8Dn6HzVtk1TPgkgX2
zzxPDWsm2G8kPrCurptXQPd4D9kUsd0w+z6tb+Lc5IrfX1tEd5Sox7L9XOz+
nbtNeWcUDyXQ+WNZ50UgB8Q3xE3gEvAw7P4S2AWPX0f+xsY3zJPp/RXXTvNz
KMWTsuaF8DuWvzX8YRRSSjI9jvedsq2G7hND3gK+j84tSunjR38Jm7egPgQ/
iXgB3hP8L0/P/L6lZPbcXCWxD4/tT0X/maz7ViCHILXdFlcTFIVyS93anYbK
wvijcf2nGgSImPuaI9+5st24Won5Nx5O5e27whwV9p/hvrLqGc4FX416gKC/
3WFK/zraB4K9VPCTmAvl8UY8foed+0K8gL1J4/uA+7A3Cfs1gKuhvz4NLlby
B4Jk3i8HfMbqGfBkqwg/i2HRfYRLN3ZrTmhuJdC9iz/1l1e/4O1HPDB61MMl
F0PovAj4KNWN057ldZMT5u2s6j7PT1ng7V8Hz7XXtLNWTGAe3d+HOgPqx+BL
6DzDT5xqqVyVqzowQkK+6JdDPIaexew/lvlXcgGtoyNeyOp/wU8+bPuwqaik
inyIKrZfe7uOzBjjK7+zQFVAn016993EJHSEICueRF1koqLunI7lSoJ1/ZT5
QyapCh36zqldblZFcQn2/KPuBH/G0zPYhXvpnb9369aRwYdVll8ubCC0vvl8
7i3F2P7CmmL/V4JVXwG8EeQrrZ6F+hviG/ZXszhV1j5o3jwDeC7gasQLNt80
0l9zvMUmQmb9xZwE4hDihX3Rs775/94LuIQnX8gB+QX4B+Ao7M2H/sr6/gX2
otz2naxfHt5Cus/b8WNQs4Lwd9Zn/3HBSbRe+Hj3m3FxPR1+7TdCf9S95DOv
7n/gxjfgEuAzyIHdHyXrHCDyC9avB82+nlxioSjMCuojTjxhSftAgKOA13su
XxRjebCA24d3d9zAv06uUqT7HJ0S0z6dvFBMwO/0vrqmKGnbB5G3T5dnF93U
K0wtw1WExANtJj4I7iAstQt5VuZQRdCXiXiBeIy4ycNRPH4H+15R38T7Afhu
4Pv2H+tw3yH5u4Q+IA9g7QL9Uahvgo/CfiNp8yLgPdl6Ifa1sfvX2TlLXl8F
+trYuQ7wvynVnXPyu2aQRy4qe3tHf5AZl0AfVm588yistphM8jy09tH9L3QO
5U6hZ9Wdyu/E1/2rUcEMBQFxE/iBJwfk8yyfin3F8L/ol+PtV5Y29wV7W1Tl
E9GwTVEYemVx+5bHT8l/OocNObB1HMwBAj8gXtB++5/2Jg3/sn4S+gt+Ev4X
fUzS5vVQD0hX0tU9bDBA2HjEactG3SKCvkycC76PzsdKmb849SXz4H75HxLx
AvteEYdwLvwD+BLed4P+gi+B/mJvx8eK9eVDLa+Ro7nDvO+rPKJ7DyjPxeE1
8N2wN8lWiDTunZlH7M6v2Zr1xIf8Yb394HDhO1lp2uXk5jw5gbf/jNfHxNuv
Af1FfQjzkMB9PP6B7f8FnrR3S9g7OLGVABwF3Ef7S6TsXwf/gLwQ+Be8EXgN
7MOT9b0Dds8/4hD8Gepv01zq3SteJhPUIdm5L1a+wH3Yy4p+GPgHFj/ALqTV
pVG/YN+bgT9DnQG8J/yvtL3N/633A3j9Jbx3rpBvos8GdQZp+yqAf1n9BV+N
+CbxPoOUfUGoZ/H224+e0L1T5aks0iZ5vetkvVJqx9LyWN7cF3guts4APUM+
tLnbzZwgq1YS+AFyYM9tStmnsjzjBmH3icm63xN1U+SbwOvgCRDnUb+wOzo/
OixaMeBho7Pvjzz5ALVxwe1zzlRJyBc8DOsfwIPju6HPRtY8gH03iu0LQr0F
/SV0Hykzd8vjU/ukhmf4RGYTxCHzP75pRB0uIk/Msne0+lhA0GfDvtMmbS8K
9imgzgC/49p5SNyWt3Fk7WbdwNLNn4msdT3URdg9//UrLAIWtm8kqHfjfTLM
CaP/jMenAv/KNcRpXldTFgbP17KrLVMWoGdzVhhPMRxQS5pSpydMUTel/UZs
fx8P77D8A+KQzdSkP9wNHpArvnI301/70zxAWrwAj8j6B7xjg/gG/As/KW3P
E/qYWLsAD4P6EPyOrHslwMOw+RDwGewCcRP4TBr+5b17hv2TkAP4M8R55AHR
JoNPdzWt5eJqzKMD77wM2X3h6Bo1gZ77s48J54I/4+kZ6gFsvok4jzoD+quB
d5Af8/IL3p4G7Fdm606y7tPl1bPw3dj9crLW9cD/on6BOJ8z85B6u66/3mlj
3wmSxldjrpm9L/iHGI1xz7q5BVIcJeseb+B1iX77n3VTx8qT5ZW3P5DvJT0s
NGc6034jabwn9HfJySD96fc+0T5z+EnwtPffpsxdKSfKnA8hDgFPQs8wV4e4
iXk9in9/2pu0OXfW3krnjNcZODdEYn8J9n5Jm0cHXmfn0SFf7FNQCO76PPqJ
N3d/NS8OLa+/pHVPo5WwXtvyjzpVNQE8AeqQ0DP4Hfa+rL2B32Hj/Kt009uu
q2Ppfk+8l8TikgnC5CnK879w/Q677xVz49jPBTx5O9zsw8jOihL7q3n1TVZ/
uwz3rtzvmkL7MoF/UY+FHTf4qkw2vpYvoWfo02XPxXws7Bi8J/t+Ia9PjLfP
EXV/dn+JrPO8mANEfxTm0bHnCXtcUJdGHoB4wetfB0/A9lcDP8D/snVeaXbM
63MEbwQ9Qx7Le4+K1wfCfjfURSBf9F0h30S84M3V8fJj8OvYv87uT5XWb0T3
QTP3dUwvGJ4/3Yz2xSO+yfquEQ9HAZ+xc3Uy9z/8nNdj8TrmOhA3gUuw10da
vGD5VHbvOIvPwPex7yiwdjH9WMrpXlbyASxPYOrrvmp7WSbN37aui9G47/CW
8uDs3lved2Px5Km3haviZ9YR8HLYb495f2k8LU8fYBfQX+BJ4Gp2TzqPJ2D7
+5DPr1KYemKDtwdh31Vm96TLylejnwDzsZgTlnUfP7s/in0nE3266Kug+wal
7Lvi9UFnKQc15f6WSd+VA7+DOC+NP2P3yKI+9DnXsX10Yi+692CO2w8Fr/PP
KU6Vtt8efDV739YGbwO8t+bRd2Hwvh7NL5h3S3jxgv1umA9A/w728bPvrvPe
CcJ3Y8/FfcEjYn7+P+XBWX0YM3u0Q3x4Jp3fRD0LdVNp/dXIW1i/c85XCBul
9JzWY8Hby8pr8ObGNz1TWluwLZvWTcHvyJq3IB8C/kX+pp5nlzfMsoagDol8
HnaBujSPn4R83zitqz9sFktCbhKlYUMSCO5r3qK/ppNrDCkP9Mld+i2W9ntK
m2sGTmX3n+FczEtjb52s7+giHqOfAPyOVbuyefPzugjop3VJm7ff+HEgxTv0
/QuO/+Xxk4cbN+y6WphO81jgM3YvIO/ddcwl8eIb7LiPSt3hybHxEjiVp788
/mFZRtsRQ4Z+pvdFPYu3T4w3f8ziPryPg7kk9t1q6BnqvLx98ax88Y45/C+7
D1oarkbewvoHvK+H/RosLkFeyKtLI+9m8Q7mZtg+BbqnF32ZHHzGk+/hmpUD
x40upPkQ6qaoS0vDZ+h7ZeWr0q/CqtG/iJzw6OCe9DiV1kV4cxKy7jcK6l/b
bT7Jofkx9rUB74BXztr2258r8yTnFtEXhLlF1Fvk7O3PTDheTL8b9AFzt+jX
mDh9eeHdy5L9Rv+t98l4/Tu33dUHlq1KoHW9k+PKwncGxxLsVUO/kax7MDCH
zcs3wWsgzmOPobT3RVDH4fWvs/t/YW+oZ/H4Psob/dxXYZvWZ8okzVYC+pWR
b2KuDvEN+JcXh4Af2D0j9w0WLp40/g2dx0E9QNa6P/SXnTvwN4y4ueNuAIE/
A14Hrmb7lXm8PYvPpnfRth65LIviX+BU+HVpc0n/q/2p+G4073ZsSnvn1ErA
e1TIs1BnAL8j7T1L3vuxGaHtPnv1z5bY2yzr+07/qz1P8Ou8PjHEzQVbjsas
Mn5AcQn0gcdHsXUy9r1F9D/guwGfwY559ULoLztvinft0Z8KPZP13XX2XXB2
/w70DOfS93ykzJsivrFy2Hk/1vD3m7k0f4M/4+2v5vkz9h0F5Juob6JPF3ks
OxfK4zWefFvU76HmL3+GuVDMqT09rnQvZWwU1TPgHZ4+YD6LlQP4ElYfeLwG
L49leY0L5NW4Qvc8+k4Q6mSoB8DvYG/+/wH85lSC
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.7048780487804878, 0.2951219512195122}, 
      "TrainingOutput" -> CompressedData["
1:eJxtUDEOwjAMjG9i5Av8grUjaxEPaEVadQlSWqniJzwXJ2kcWxDJse9sn51c
xlc/wTm3nvjqh72LcXjfzwweYV3m4J+3sPnZx+tITH74IiIkQ3EpyCiFdLic
YjK7jEtUkOQJioTUQFcJXTGZrqokO+FHoXVDtZAaZ+a0GqCaiB4SMJw5+EO1
L1MtUM/XX1l3KXmpkqWNClriC6HzDwM=
       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 11.], 
         "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
      "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5747935719246041, 0.03473792940152796], "Accuracy" -> 
         PlusMinus[0.6895225682644471, 0.03074044139153338], "EvaluationTime" -> 
         0.00008297682926829268, "TestSize" -> 246, "TrainingSize" -> 326, 
         "TrainingTime" -> 0.09203694999999999, "TrainingMemory" -> 
         1.191942*^6, "ModelMemory" -> 38400., "ExperimentCount" -> 3, 
         "ModelUtility" -> 0.7424825985672243, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.623306322968539, 0.04911818683619342], 
           PlusMinus[0.5440725645341362, 0.038402535850608085`], 
           PlusMinus[0.5766860510117136, 0.05115637634647455]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6812669987279566, 0.051755547027087595`], 
           PlusMinus[0.7053633842701252, 0.05069407000765742], 
           PlusMinus[0.6812669987279566, 0.051755547027087595`]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 408], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 249439002518028]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.632690895445349, 0.06200096050620416], "Accuracy" -> 
              PlusMinus[0.6507090665888854, 0.03544535124239187], 
              "EvaluationTime" -> 0.0000215561820561139, "TestSize" -> 1398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007857824999999999, 
              "TrainingMemory" -> 56913., "ModelMemory" -> 6816., 
              "ExperimentCount" -> 7, "ModelUtility" -> 0.6695734877349586, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.626203186447637, 0.028011653322435704`], 
                PlusMinus[0.7907963816008791, 0.08662416941231724], 
                PlusMinus[0.7270184137932707, 0.07974766599246304], 
                PlusMinus[0.6294867218584826, 0.017061161381213566`], 
                PlusMinus[0.6166856837212846, 0.03359114752938738], 
                PlusMinus[0.6080753339469789, 0.017088267897426727`], 
                PlusMinus[1.0543716088208708`, 0.07177415699493715]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6786649593506984, 0.0469167078983398], 
                PlusMinus[0.599457038558619, 0.04910729350593094], 
                PlusMinus[0.6588629791526784, 0.04759634188315472], 
                PlusMinus[0.6641221443488727, 0.033518101752970715`], 
                PlusMinus[0.7042757294113742, 0.022912607675475528`], 
                PlusMinus[0.6883875045099664, 0.02674786609187076], 
                PlusMinus[0.45094218707347, 0.03515022521925845]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6323531727068646, 0.04246705618622094], "Accuracy" -> 
              PlusMinus[0.678471165887176, 0.051430661863868604`], 
              "EvaluationTime" -> 0.000035518375, "TestSize" -> 400, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022951275, 
              "TrainingMemory" -> 146294., "ModelMemory" -> 12000., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.6740074346069653, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6909313148243311, 0.01808785303307867], 
                PlusMinus[0.5535316177170976, 0.027222802522898357`], 
                PlusMinus[0.5963287189295525, 0.022262700021717582`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.589556048459609, 0.049285744019733915`], 
                PlusMinus[0.7479718900437679, 0.04376311595920322], 
                PlusMinus[0.6788182227082304, 0.03316383331824515]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5747935719246041, 0.03473792940152796], "Accuracy" -> 
              PlusMinus[0.6895225682644471, 0.03074044139153338], 
              "EvaluationTime" -> 0.00008297682926829268, "TestSize" -> 246, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.09203694999999999, 
              "TrainingMemory" -> 1.191942*^6, "ModelMemory" -> 38400., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.7424825985672243, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.623306322968539, 0.04911818683619342], 
                PlusMinus[0.5440725645341362, 0.038402535850608085`], 
                PlusMinus[0.5766860510117136, 0.05115637634647455]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`], 
                PlusMinus[0.7053633842701252, 0.05069407000765742], 
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008297682926829268, "MeanCrossEntropy" -> 
             PlusMinus[0.5747935719246041, 0.03473792940152796], 
             "ModelMemory" -> 38400., "TrainingMemory" -> 1.191942*^6, 
             "TrainingTime" -> 0.12304517346625765`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 249434707550732]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843914358808524`17.330571040158983*^9, 
      "PreprocessorEvaluationTime" -> 9.2300664451827`2.*^-6, 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.3520000000000001, 
          "ElapsedTimes" -> 0.3679068, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.44000000000000006`, 
          "ElapsedTimes" -> 0.4839071, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 0.55, "ElapsedTimes" -> 
          0.9517487, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[249443297485324]], "ID" -> 
         249447592452620]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.4133686, "MaxTrainingMemory" -> 1714088, 
      "DataMemory" -> 806280, "FunctionMemory" -> 211272, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 50, 35.9888112`9.308742394758687}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7835301780360985`*^9, 3.7835307590045347`*^9, 
  3.7842312273609314`*^9, 3.7842316448289194`*^9, 3.7843914360848045`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"a489c011-ea6c-4685-a869-be823c94c854"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{
  3.784231583130333*^9},ExpressionUUID->"003672b3-0cd2-4b4c-a8f9-\
604deb6b708e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "NNtraining", "]"}]], "Input",
 CellChangeTimes->{{3.783530739373884*^9, 3.783530740167428*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"7f971279-b397-4f11-99b5-58d33d887993"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"NearestNeighbors\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
                    TypeSystem`Struct[{
                    "NeighborsNumber", "DistributionSmoothing", 
                    "NearestMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"NeighborsNumber"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "DistributionSmoothing"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {"NearestMethod"} -> 
                    TypeSystem`PackageScope`AtomShape[57.60000000000001]], 1],
                     "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[605004952], "Type" -> 
                    TypeSystem`Struct[{
                    "NeighborsNumber", "DistributionSmoothing", 
                    "NearestMethod"}, {
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[605004952]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"NeighborsNumber\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"NeighborsNumber\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 690967308][{
                    Key["NeighborsNumber"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["NeighborsNumber"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["50"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["NeighborsNumber"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 690967308][{
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.5"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"NearestMethod\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"NearestMethod\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 690967308][{
                    Key["NearestMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["NearestMethod"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["KDtree", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    GeneralUtilities`Slice[
                    Key["NearestMethod"]]], "Mouse"], 
                    ImageSize -> {{57.60000000000001, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 690967308][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    690967308]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    690967308][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "NeighborsNumber" -> 50, "DistributionSmoothing" -> 0.5, 
                  "NearestMethod" -> "KDtree"], 
                 
                 TypeSystem`Struct[{
                  "NeighborsNumber", "DistributionSmoothing", 
                   "NearestMethod"}, {
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 71154910061071]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "68.9522568264447102138`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "3.0740441391533379623`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6280416854813803962`3.",
                   "\", \"", "0.7510034510475138703`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6280416854813803962`3., 
                  ", ", 0.7510034510475138703`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5747935719246041186`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0347379294015279574`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5053177131215481621`3.",
                   "\", \"", "0.6442694307276600751`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5053177131215481621`3., 
                  ", ", 0.6442694307276600751`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "6.39`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "14.6`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"213.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.41`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.45777329293544505`}, {
                    4.0943445622221, -0.458307223341523}, {
                    5.786897381366708, -0.5537443079911489}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6400948497293996}, {
                    2.302585092994046, -0.37142275119719437`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.45777329293544505`}}, {{
                    4.0943445622221, -0.458307223341523}}, {{
                    5.786897381366708, -0.5537443079911489}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6400948497293996}}, {{
                    2.302585092994046, -0.37142275119719437`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5609092379378305}, {
                    2.302585092994046, -0.364286904467675}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.5278257835600457}, {
                    4.0943445622221, -0.3933089511468907}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{5.786897381366708, -0.616083103022849}, {
                    5.786897381366708, -0.4950646475142895}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.659595243977705}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6550210774256332, -0.37142275119719437`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.659595243977705}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6550210774256332, -0.37142275119719437`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6507090665888854}, {
                    4.0943445622221, 0.678471165887176}, {5.786897381366708, 
                    0.6895225682644471}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5746021402203726}, {
                    2.302585092994046, 0.7808508799066625}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6507090665888854}}, {{
                    4.0943445622221, 0.678471165887176}}, {{5.786897381366708,
                     0.6895225682644471}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5746021402203726}}, {{
                    2.302585092994046, 
                    0.7808508799066625}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5544517152834428}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5746021402203726, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5544517152834428}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5746021402203726, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.45777329293544505`}, {
                    4.0943445622221, -0.458307223341523}, {
                    5.786897381366708, -0.5537443079911489}}]}, 
                    "NearestNeighbors"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5607099461806759}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5590760310497991, -0.45777329293544505`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5607099461806759}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5590760310497991, -0.45777329293544505`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.45777329293544505`}, {
                    4.0943445622221, -0.458307223341523}, {
                    5.786897381366708, -0.5537443079911489}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6400948497293996}, {
                    2.302585092994046, -0.37142275119719437`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.45777329293544505`}}, {{
                    4.0943445622221, -0.458307223341523}}, {{
                    5.786897381366708, -0.5537443079911489}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6400948497293996}}, {{
                    2.302585092994046, -0.37142275119719437`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5609092379378305}, {
                    2.302585092994046, -0.364286904467675}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.5278257835600457}, {
                    4.0943445622221, -0.3933089511468907}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.616083103022849}, {
                    5.786897381366708, -0.4950646475142895}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.659595243977705}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6550210774256332, -0.37142275119719437`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.659595243977705}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6550210774256332, -0.37142275119719437`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.6507090665888854}, {
                    4.0943445622221, 0.678471165887176}, {5.786897381366708, 
                    0.6895225682644471}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5746021402203726}, {
                    2.302585092994046, 0.7808508799066625}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6507090665888854}}, {{
                    4.0943445622221, 0.678471165887176}}, {{5.786897381366708,
                     0.6895225682644471}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5746021402203726}}, {{
                    2.302585092994046, 
                    0.7808508799066625}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5544517152834428}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5746021402203726, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5544517152834428}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5746021402203726, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.45777329293544505`}, {
                    4.0943445622221, -0.458307223341523}, {
                    5.786897381366708, -0.5537443079911489}}]}, 
                    "NearestNeighbors"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5607099461806759}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5590760310497991, -0.45777329293544505`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5607099461806759}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5590760310497991, -0.45777329293544505`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7835307661554527`*^9, 3.784231231688754*^9, 
  3.7842316480005713`*^9, 3.784391439579919*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"47b3a075-a2b2-4914-907b-08b1fe5c928d"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{{3.7842315871144285`*^9, 
  3.7842315973573103`*^9}},ExpressionUUID->"3d51793d-a73b-4936-ba31-\
e0d844b6352f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NNtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"NNtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}, {
  3.7835307421802664`*^9, 3.783530745735229*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"d31147b2-2682-4035-acf4-275ef6857b96"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7314285714285714279`4.080468980712039", "\[PlusMinus]", 
                    "0.0336001519159240536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0255565, "MaxTrainingMemory" -> 
                    165240, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 50, 33.6773919`9.27991334993346}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1:eJy1XXlUjlv7bqCkRIZMHVPm8cjsOPYTQuZjzjEl8xgiY0dSiGTIHJoQipCU
1JNKGjXP86CSSrMG6XfW+rm2tfa79nrfb63v++v9b6/93s89XPd1D7vvhj2L
NynIycndkJeTU/33t1Dj7Sm/VXnk0///ij0VTKpff64SF80fPua+WrhYPUp9
u6dNmOgwd7XOztG54qPvyyYHXw8Qj9rbz1vQ5Z0Y9SgjM+dBsihvvj/gaUCe
uPTkYr/Fg7NF9lzTRFVrF68Scq1W53ScbZJ4/9zLfhttE8XVKdmmieq54uje
M4/OXx8pNvbZ7m/UEC7mdblRPHZHAbkw1CGxfWQueWh3g0x/LJKmQ3udBn1q
Ehv//5eoN5jce/GogAQq38451q6IBA0I6nPjfAm513N/enaLhrDrVYnOw8Z3
Yo8Ih8+D9ALFDyphow3VPhD5GVnF0dMSRbUd33TzVn6WuK+njoejbVGlKHez
k7/lwwTxomuvu1bvksWzH5auqDDOELcc2fva5pWnqL2uxyfLC5FUDl2NN1+4
ZhJCvh46eU3BJF3ivmZrvH2uTQoRTeXyPPV2poqb8mrsIgZkiLXnwpPWZOWK
dclp+38PihLLXMQ7U3Nfiz/6brnXJjxWPBF6MFU7xZVM7m/qvts5nrD3tfFQ
etnyzw/SqVv/aQVBz8WD/RInn6x6Joa4brNULIoVfS/u2dlpYLQ40WxfvaZB
lLhKMaidk5tKQMhu7bwu2XIBkC97rkannrF6YjnpfWHjxY4RseKb3bMf6q6J
FxPGP1g95lAC8TfUWXDRoITsWP5jpemRPHJef/7o7muaxdDNunqdrn/j6sPv
Mbct9F1zxRGLFy/qfSiFygH60M888mlpbQyV74XRi7V8LDJFvQkke8/panFz
tn6roXvrRFa+r+ctj+/X3CSqr5E3u7w0XVzYsq5D+YoscYhpZ/kBAxLFJc8q
d95fECvu8r0ZFp0UKzb+tSYs9Fguaf8lddyW4U2kzOb9w6tdFAT2vpvmvtE4
7/NZHFl+/5XV8A6Cfqd5ZqP2dBEg352bn5/c3hwuaubvCV5/0EecULpgaMO2
MmoXQ9fsLHv35weJ+y40Fot/r6gVL0z4mOy/JFgM21awvqEySuysEzgxYU05
wX2NNfzH9rQLF/fbRXfJJclS9ber/530qYMTSUJ2wrDSpBh6Lu5Ljm9Ky3if
II4J2qNuohInPswwcp/tkSviXFeTmLTC7wYS+lvzqLGk3ch40adCbfvK/qFi
r7oJ+/cMeS8qeA716bxCTggfNL7/2OSrYrpzUcm7G6/JreXfY7PkqknbAV/l
ku/LC6VKBZkfZ7dInBtk+eNW/Yhw6h8WHqz3zwi0FzUHPn3cqTqP3je2cv+T
+ZPixWVC+z5lSxtJlHOSVlXnWsLTX+tr6813bq8hrL3lB+eNMVJJFtUXClr9
dyWIri+DTg1ziRWPjM1/tz7tgwi/0zO0/IyPY4XEuV/eOIbeVmwRt0+pqZko
xlF/dqR8QXbCUQ9xqqbB5e/OvmKhfMcncSPDqd/p6PNAubGxjKhkXm3scqpW
Qg6viMVkg6o6ce4s535ut/897/3Z7o+qU8VnqTdU7APzxVbjG+PEwUlUf8dq
6S310coktmddHJd/+Uz9DnvfufZlB2audhXznAO/1FskUzlUdNpev8Uxndpb
quUWa3fN19QuNFY5/fEy/RNXvmNKdF9l+H0RA5/u7b5zfRq1t8eGE4c9sMwU
vw3s3H9XQLCY5HbwasWZj9SOcS70gWdv7Hfrv2fYYO9ERzFs2e1OFu4BxDBi
w8Lpo6IJzoX+jn3r1TtU5bWEXUC+uC/OnaNRn5A2KUm83MdAL9V/HGkvBMbW
BEWIZj0mVM75Wku/G+yY589a/fV1tcO+OJJ+LMG6zbdYEvdidMWxmDzxtzKf
4lPJ0WKPu6WXWq96KhY028cnXKoRT3kcGLg4plDkyffYiQt2d3rHEsRj+N+L
QUOc7JclUPl+ifjoar4kWtyzMfVLH5si8VvYy0kdZ4WLvDik/cF+1Iyt1YT1
vx2fzo/8zStDNH5ifeNqr0TRL67njbe746hdJHddPl1Fw1PkyQH2Bv2FXXSv
2mzXun8TcUx9tnyB6b9xv2pTX+uwMHpfxKGPZsFPPYObJc5t3q096JZbvkS8
2Pkk3fXigmTxytGL3/w1oqgcYBdzTBK8FrSupHbMymHogO6HF5F0iXNXrP/n
ZnZsmlg0yfBh9Mo4CXuDfHn+93+lD+axE/RyvlRL2AXue2TRG/e5BwrI5UI1
HYvHpWTrcj3FKnGbCP1trJyyc9/mRolztdrPOm9e803i3KNj1CetH1ognsrU
HLb2YaxoZ7dj763UGNFLv+Lsel1vind49x3yXqddnoJcAPAD9CG+ZsfAlS7V
BH6nl0vXprypsaKN983czodqJOyN/W6Ib8sal6qeVmgnpDq5GdteURGOTOp2
IiA7lSAeP+n2SePkziICf2bVe+rwu/9UistqKg5YLWmS+G5fV/41OcKwQsIu
lG/sjc83zKFxqD5cb0m3Kb/sQtk5z1NzQybFO7z7djSyvnDufTS143YOq9wW
Pc+ncR7666K2KrmNUSzpWvdHdsqhdC7+hf5enZ5T7zHOTyxu1VU14p23+Oau
Yw/r5hxyZE3wze66b8Sds+Qn7NzzXlwxuLOqzdES6h94+OxC2xw1L61AwsaL
Ox2fb3YsSxGjA5t+pD+NoN8tKDVO2dGgiJz3TY4O0vrGjW+IF6x8161eWnDO
K06MV07srByTSO3t1eV3L/Z1rKB2zItv0F/gB8TNu2oPe+tOzKf6i3Op/v6U
79LNtiPfmBVJnKu7qqzJ8H4e0bYrc1CdEkLl22pdiHL3XimijdD12P1IUbyX
n/7bvVuPuPGNlcOaMWYKf6soBmwZcVTt6zY14YdVlfXkxWrCGLWxvlYjOwn5
k15rFKeoC017krS+jlcWkF8AV0N/2XMRL3h+Uv/aE23dtvEU98Gf4bvBP7Dn
+rdyO/jJ+JsEjoo+bNX/xfk0ahdqJXc2P1KKp/IFLuHpA/IL4KiYvzKH9R4W
K3bbZOQ3tTRHDCu/EOF0Lln8W77PuGt348Xgd8lVwolvonKO6fna7BKun8S5
bB7wrP+Gx6cHlpHMPj3X7uicQHEJ8G/Eez2NVV4t4oTOzqOdwr9L2AVwKiuH
f54fWuullUP9+okDndaqtI+h+AH6y7vv8sFdzlcbVZJjSjveT82Monm3na7d
h6pZMaLd3JIPpqGu4rEnGcdWLn9HBm4uWmD75gc9l2fHyAuF2A0Jx+1e0bzw
0LObkY9OBlJ90Dv+2cldN0bU0xw1YH+2aoCK18Am6zqlAF6e5dHLorlQ05N+
N+THl9Srp53xcSdG0zMbL7gpCKf67bLMWthALDNLslpmtg4YPPRBX6eq1gFO
rSL3V/aQC2DvG97uSXiJxyex+WrkjQWKb8nEeQNHT3sXQkyNC3zMztqRFf3k
j4ZN1xAW1rR8GP3wB0lYNzm/rUodzbN4/qGXVo8Bc1u+i8oJYz5pPSkg7tNG
2r/xLyW3z+i8tL74XNQyqGvetaWImB+4eUT5aAiNF1S+HP/Aww+PNfdYv+kb
TP0D4vzjO+0GtZtdQu1t/z6T44rWNRLnmvhuWqnhmENG951Tcu66orCp8zcd
syNtBDLva1Dpj1Cab9out2+29Ekku48lyJlv/kZgF7z4Bn6n/RGvtF3mXQW9
fmlWD+W6C1GTYzVOX8kgr2fk67rOvSjenZntoT7pFTlnOHvm4fFlBLiEpw8v
U5Jmpc75KJFfxH+r0G/zT5IY0P+kztEZv+I8/Dr8A88uKjf1j7fbWUtYvB5Z
q+HdVFBMcer244v2+fTzo/oAXJLptLN71TcliXwe8eLb/RyrqLYKQvqVXlu7
KihR/GC7tTjjvkoTuf7yteA8uZqszdrb4XVmPVE5n7itT7tq7n3nT3q7zXxS
pkTcLPBPKVVY+ovfQT4Pf4a8BX6Slw+xedai7rnus86Gib2mVN94lxAiHkg/
ohPuHS3iu0HPZt8ZbZF1tYqbX7BxM9jzeKfgv6JofpE7YZm7dtv34kwnt1Ha
kU1S8274yWPefkvWT0gmz70em8//O4m8Pz2vpMtxeSF12oKLfbrEk7URyzVn
rXhB46Y0HBU16K/vx0O+StjbizXtDi7enihWLn5YMeZOjJj/pIyc3hsryvrd
gHe2Wjtu7rrJh/rJzc5V0dotzmL6Z0+9uD+iyaU7JyZ+GOdPeTmW7+PpA/w6
eJibC08XifM+i62i3OYUXXEmwxRCkyuFNzRuwp9J43dGLVQdVhwv0vxivWOn
qV03FRLEizGerxq3jA2VOW8B78nam63Z9tkaD3MojmprKRb9ZRIjnh+ulbzx
XKsAxM1TX0Yu2X8sX+Jc8EaFj+Z+r6yJoLyRZ9G5Ids+RIrIC09sNpjTPClE
9Faa4Ro4QI6eezDc6XLUhUqJczOuf5+m+LRQIt+Uz/07L3BYBtUHy981Z7ut
jaD8GfwOz6/jvllNi9wTzOyIzZVxK3wCXAjiWy+/Tj5/XngibnzZbqXa5Vga
LzSuT+h02SCeyxPgu7H4QXSzm7xCIU3cfHnGwtFpSZTnwneTdi4vfztRN8Fb
NyKe8kawC+B12AVPDuDXWX/2NNtp0XfTVJofQx8ojyilHrDo+GXzxsZGCTte
liRXGGpiIdbX7aoZYOogfjhlm/z7Ry8CPhXxjXcueA3oA3AJ4hCbv0EfIAdp
/ld5Xc8TjnnNpPlF9rzkOT/I2Cm/dey0/rL4pKxC2cump9DFwnXezK0dBeRZ
8GfScB/73XxHDu0i3yFLfJvtqrVIO0SMy/O5rrsxTObvdt55TI/xBxqIV4mF
wbqX8VQOwds896WUxRPwntAz5Bes/+XxGtAHxKHapCum+tO+EOgDi6txLk9/
/1c8IvKA8PKN+T2HKQslzmuU1pxSF3ZY+7dzLlASVA0cvMbpvxPB90Ef4Nd5
/APiG6u/yDe9VKd81pSLEw3sdb2mqsXS+wJH8fwv6mTsufA7qOOsGPxIO90l
mMYh8HI8PbMtUtF5Nv5fOxj6x6ErKVnEWduw9vvjHIK8u+j9nP19d+STdHWj
gM9+rQSn7h7ilZUKAapPZ6w987SZe19evRD5cbetVpvOPI+j9TfUA4BLePp7
w01n9x+vimidAXkh4rzO7n+GWa8JEt13h+z+WB1J+RJp8Q14kpUv8rcjwTG5
DRviKQ9z7EmJsDDhh9R6FvIA4AfULw69cu7UdmKxBI8IfAYcxZPDwNxphsnH
mwlrFyOE2R82H31M5TtgSMSjiekuIvAv7ou4yepvsUPTtTblNRLxAnHoesC2
diU6yWJhh0j/LMUEWs8Cf3ZQLik4em2xxLngf1k8CX4ddnGtQb+icke8KDd5
g+dW50pqFzx7s8hqm/Worp7L2yNu4lz4M+gDz+9ctKtb27a1fADkAPleC7VZ
YRBeQ3Bf5MeI8/huvHjB489almeOdPvoKbZtu0WpYW44jZuy8gTwZyNe3Bux
dvZNsefzaivjSl9yd1VtfsbBFrKsl+Nvv1mbkhF9Zk9UCnpD62+oHzsndhNr
FpdIyAHnAq+fqThx6LKYRibPUPryz7NEMfTIoes1d4qJR55j+9GXSomseBLx
7dV09z7G63Oo3/lqtbmv47ZKMszILfu1YTi56FuzLjv7HcW/0uoM4KOAq4H7
JrXMvFQj96teiLoeeHDIlxcvgKMeai806bnBk0C+x/cFzT2nnUfrDNHnrw6v
exBD/Q74al6eJXc2bOWIwDIJe9sw4MzjKDVvynui3hJhb1W77LmScKlHxu22
U1q4/oGHJ1HvhhxOplVmrHeMkzl/g5+06qNSccVeTvB6ljJ/53RFwW9X9qDh
Khlkhp+6dsuhHHJ0Q9K9W/M/Uz1jeQIev87eF3URNh7bOtyN9LxbQPHkb0/N
Pi08GsvluVg+CvEN8QK8HHCJtHj8fsPggMpZ2RI4FfHtlcsox/FZ3v/mc7v/
/nNIJM03Szz2pImPFAQenwqei/XryLOgD8Cpi2p8txne96J5AK8egHyePRf1
IfAlqOPgXGn9BMA79WlP1fftCBRnvzU8NvR9gHhm8l8nhkyqIkaepuaFaYk0
P0Z8Qx2d59fBI1od7Kdosj+MfBLjekWejSbJAf07zEn0JcPGKHkYd/MSx9s8
+No/0IP6B+QBvPg236h04ZZPFRLyrZ7XJVjnUz6N87PyPvRtnRBHeZizZtPq
C+42cPNNxGM2vgGnIt8EfsB98d14PAHkwOpZfGWhgmtYDuXPoGfIA6TV/WHH
rL2N+qc59ZJJqERdD/Us4GpefANPgPwC9awx0wYZ7O/yC++0Pdg6Qe9eiDi+
1RxiML2ZDL65e1C5o5ygUzVz1U1zZwn5oj+KV79AvZC1C2n1LOAz9rslHfh7
z9q9caJbVe29F77xEvWsRfEpJ6/2b+DWTYFTgX/BaxTZaDa6rHsr6ve7+vWy
VgHJOpaSbTYwgKilBLvoDK+guETv6HgHTcNSiXN5crCPqlTT/NdKIAf4M8oj
Iu/mxAv4yUMGqseWdy8kx1qv2dqmVyVxcyj7M9YsnUB/kbcA9+lfm/7E60GT
+F1/h/mUHd+4+OHrrD9+jxhTRUb8XTbDKaiK4hIdq8VBI04mEuM+vssH3iui
+bzSQuGyrm0t195wLuQL/gz8A3hP2IWsPCL8AyvfVwN1p9gFvCHg7cGXIM4j
7575MOrx0XxJfQBvxNpbv6PE65CQSfvP0OcI/Hu2/ZGqG1/LufqLfB71Y+Cd
PlOsnefPyiahp09aBG7zp7wy+iqAo3j+gZdvut/KrzMO+yTi3Fnx7dQbfoRS
+UJ/efhh2LTRbds720r4HfBywCXgldEfBb/D019efENfG+K8neXzNRdafaD5
EOTLw5OPxp8qXPKimCRk2Ci90vEmhh0XTW5eHUhYPbs4Q85reO9pYsXtlqC7
Papp3wqv3gK/w8oBfkdz4RciHPtG1Eurxl25cIXyfdLq/uiHYfMhyBf5EOqx
uC/8A8//4r4sX22mMG+mwvhocuWKke2G8dnke8AGfbeFFQR1HPhJXr8c2/+A
c0N1iif2mBFGgKvx3eB/Wd6T1+/Jw5PQs0CbXifX+UfRvmLg9YGX5o29av1J
4r7gNVg90z4wbk+3c0UUn6GOPm/T+t9StFUpX82TA/xZZG75iKaN1WRLv9D8
oYv+9Sf7jDtfz1QRZpgf+nONjh8Jsl/7YltLFAG/I82f8fKLB3fV3YILyih+
QN4CXA358urziEPoTwXuU0ictVThnQNh+3Qfb819XW8vH4B4IQ1PAq8DP+ie
c0nqWu9F+0uQF+K+6P8d1qXj0mANSdwHvyON30GeJWt9CHEe/eDAD4Ombhu3
KreU9u8gbsqaH8OOl5w1SJ++QlVIfj75sPKAdsKTv0cW6MUUibC3Xh75zcdd
G0hRytykz4GKAvgdXh0desbqQ2RTz5a/b2VRfQDu+0/9DoujJmYNqVO6/quu
96LgZUzP/Ju0nwt8Kk8OPLzT0XW6pZ9cEcVniMeyyhfnom87u/zmj0UmGoLW
/uWZqpXbSGab2SEfvj4Xa29PGa4W5k7gJ1lcwuN/WX4HeQB4OeBfXj84z//C
TwJPsnETPDhvTkLWPoXuj/t1Db+VQPE66oWy9v+C31m9uuv1d3WVxEZJ/Uei
eh1Zmm27KLXVd+L0LsP/8eKXYrzb9tU1Ho40LwQf9SJg7/wbxp8k5GAwzdfP
6nATYXm5Y4eiLn9JSRbRvzPvTriqq/ZH6h9gFzz+gecfBlbfs9t9PJ9+N/h1
5EO4L88ueHhnaV5nk7PZWVR/UW8BPkMeC/1lzwU+Y/PutsKZHxMWtBbAP3wN
JD8WG3kTV8uOHd13N1K8zsPV4LlYOWwdsddi8up0Oi+CvkFePyKvznBke4c8
80se5Krhp6xhxw/Tuin6tuHPoGfwDzz8+6LJrV/O76m0Dw928T2x7NN9+ToC
XgN8KvAD+J2ypQcjmlqqufGC9Wfoj0LdCbgafVeoX/DkcCl4zArXRW8l8uPB
Osse3jyYK4EfePwve9+rx030X4UpCjzeftzG3pcOmf+aDwBeh/5KywNYf9aj
06lR1TaqAvwDcBT9bj/1gefPwBOw8oU/Q34BXM3yqU6ZCs2rxNYS/Tvog2bx
GfS3l2/cIb2eLwjwJFu/4MUL5AFs3TSkWmfg1zm+lLc/raL857bSl5RXZvko
iT6Qn/kmK1+Wn/xP6wHouwIuQV7om7/epItbsLhy7IAKR5OPEv0PwH0dRpS1
ab/XgctH7d//rfD6/WayT/eqdbFRC6nruSQ2oeKj+HDkn48Vlz4VwxeEeOda
JRKcC3vjyQH1IQmei6nPg7cHXwJ+kqe/sGP0Oe7+c9bNwsEvCfCkYnSZdbaS
H61Dot8e+sDzO+DP2P6SsqstcRrPsqm91S13D/BMeE/tAngyW3mJXKVtNTde
oL8EfnJ8yO33Q/xS6Xzh/pKnQ1L6vqR925ADzz+w8wGwC8Q39KcCpyJ/gz/j
5S3AUeZj1oUlGFeR0ucjX6us+hePTptv4NMUR3nwSTYvBve9FUX1AXmLtbBb
Tf+wpoQd8+oX6DNn+4rRP4n6Be++4GFgF/C/qGeh7xX5EK/PXNb+dcwtIs6D
V+bxJbLiB49uC7Q++OaKru5a1qdvhVE7xpwl8iGe/0X/GXvfCI/Fa43Hv6fx
zS/I8JTHzVDKV0vDO+x3g57huwGfoY6DeMzGed48L/Ck42enky8zquk8L+4L
XIL7wo6l4r6fdVPU53PPTdh64305gf8FH0XnyaT0MSHPYudu0T8JewN+gB1L
w6mQL/oJ0H+GOezSAY773BxSiLLvGSVH33cEeRb4Pp7/RR9Tm1SlM+P2yQtZ
py6uu2esIACf1Z8/YzTGqDudO4D/ZevzvPuy8Q31eegD8k3kLZi7Xa7tMtSi
p7yEfwAuYXkj4B34HY9Zr43Omb+idT3gEl79AnwJ5mMR51NaUvsd+BhGjvxt
YdD3owN5sWlC8D1FL0L9r5T8DXkLi0tmtO8+/eO9Ypp3I2/h5Re8uUXIFzgK
8+jwk8B9svKp6FNg+xxRP4b+oq8Y+IytQ0rrw0PcBC8HfUC9BfgMcvAf1Pqt
mrLkd0N+wfKe0AeWX0dfPPwOzy7Qj8j6s+61X16/+uFH7o4rd0orryZadd6+
Ee3LaHyDfHm4hMdrIF6g/gZeA98Ndszzk/BnrD4APyC+rX/br/ek8o+0TgZc
zeN/UZ9n5/2Rd1d8ueW65Ohr0X7wukWNXp70vqhDSsMPbH/1n4HGHZIcY6kd
N416XL5rcgTtL4E+8OSA/l/2u0HP0L/D8kbsXCgPr+O7Qb6oB0B/kc+D90Sd
ged3gH9fjjK82m5GFO2zwbnIu33Sf1/3OVykeFJafZ7Wjz0WvJldKk/7NdAP
vvjQuaVqByPJcft+2+aZJ9O5Dmm8HOKxfsWAo3dyHKl/aFhQs4z8E0uQD205
PmOS35wA6tdxX569wa8bqF7K856dQb8b5jowt7jY+eglC5OHBP3gyLN48uXN
B2D+gq2LUH/G2LGs/LqNnnhsplEK9ZPIj9n+h5IOgW1Wp/lLyAG88oPVKy/5
VJpQ+WKubn2PGWola9WFokELf//cS0EAjoJd8Hgj1C/Y+2KfAuot8A/gwZEH
8PwZ8s23A1xO1HnlkxvrbnbNrCgn7z4RpX4z88Rdny5uKJ/uRTDvJOvcOPB6
RtaJ4vmrOggNWzNWhXXuSnnajInlteqTQgjyC+AdxGNpuA+8EeSrYXRqmM7i
IIK9M6hvyhrfwKe6bHC+F2P+iPatoK6XMstszRCLXKLs9rHKrjCZ9kcB7/D8
Du7L9q+X29aee97wmfIa893aTnmx8SOBvcH/ai14f3HQ1kxu3YnFJdAz+DPg
B1nnW9DHBDmoW30fdHpABFFysTR0ifxCQpU2GM30CCPTM+y9B3199osv+ZkX
8vQXc7fsXCj6rqC/yLOgD7Bjnp7x9gj4uDwxLHlxjcoB+THky8Yhnp989dHO
t+Z6Axk5Ss6idYScgP4HzH2NLKn/7t0+iNalUS+c3dIk6hVL9lXALtg4j3iM
OR9Wf6XhB/Txs/uNMB/Qtt/ku/bGGQR9V9i3gjovTx94ezuAS1B/Az5DPo/7
8uIQ9q2wckCfGJt3A/dJ63NE3sLiSfSJgafFud7aBxRMv9XTfIgnB/h13Bd5
y/wblRt13zZSv4O+FbYfkadn4JV3t3t23CZaic6Nr7o5dNPjLr/62lrlXdco
GOFDgPtQz7rsef7Hgk313HrsrPMn1q4aHk3uxHdp3mOTQoaa2GaazKkipn3a
j7RKq6T7VmDH0vY/IA6xew/aZP4+Yk+HBBH9feDPkG+C1+DhB/ByCuW9F62d
8J1EXt4Vp68hL7y0Dzxz3Cie+KsWqY1pX0uUhrvvuDq3jt4X5/L6NYAfePPd
6AsCL4c4/1EhvXji2GayzD5w/dsFPyTkgD5S9ty9L4PNm++E//v/3yzxVPEh
qBfGf3ld9qa2tYC9Sf/p/NBc1XKbI6dyKN5B/y/iPPwZT76Yl2b3ShgWxl13
6hQumhYqdn5mFEf9A48n4PUTsDwB5Mv226NvEH6Hx0ehnsWLb6hfgFeWNc4j
XqAfBvqLuVDwUUUdFqdn7Amnegb58uIQ+vAMzWz1BlgEUPnGev8xIdMyhWAu
FHv26FzoT1zN8w/QM7Z/B/kQ7A08F+qQ0nhldo8W5Dvris2zU7PS6Pwm+ipo
vZCZo+LFTXbfFeoi8OvA68Al0uTA7iHCuejLxHeD/0VeiPwYfAmP92T3GKKf
FnLQ/tkPA//A4hJePwHuC7xjPPDd4/GbK4joseNH5PJckjchPazvwXSC+hDi
Gy8OYb8cy8MMbHiU/lEnle5dBE/7qGZtoOvZSqnzWSXuH0fF1TfQ/WfQM+yP
Ql0EfB/uCz/J28eE/moW/6LOgPiGvlfEeWn9O+CjIvzC110tfEL531v6xx3W
XQ+ic5bQB1ntmId34M/A98GfsXNJ2LPHnou+NtZPAqci78YeLeSF7L4K3r4g
1k+y/VHs/CbsjScH1OdZ/4A6L/wv6i2Qg7S5Rd5cUuvVugVbp9eS/JrTl1wm
hNI+McQh9D/w9lXw5jcx54P7gjeCHcM/8O7739pzyuM92X2OqDM49B3Sa9Kn
J+SY2eAB43f4yVw/5s0Bop/WwGKtQ9be9xLzIizu4+2JZPG6nkr777tKnEiF
7Qo1/RclREXDfW/poTQia97CqwdYJ/XpZDuxpwB+8v3m9qZa87wk9vdZzz0x
3tzpDld/2TpOgYqTTfnrEsLaBeIF+D6envH2MUEfMIeN+Ab5Qh+k9fGz/gG4
j/Zz/ewvkZWvRp85eFrgErPXJ+9rxiXSeRzsaUCdDHLg9j/8rEOyfgfxArgP
/gH+V5ocwHuu/NJzi9ncCtI/Nj81IrmMOPe4RdT/jKR7OLFHAN8NvBGXnyzR
Pn79fKsAVr57tzblaEyOpXMS0AdZ7S3DrfP4Ogu5AFYfor4q77096iWBvSm5
zU66duQd5ddRz+J9N54+oI5z4safXcZYfaB8Hw9HsfqLPUTsucjfwGtg3knW
fZmot6DPBngneqSfRcjgdwR7v9g+JuSx0vg+tu/qwLH6WaQmW7waHvawST2Y
1tHpngYpeyUM2w9ZOiVITmD7mLC3GXUn8OCy8p7gCVi8Dn6HzVtk1TPgkgX2
zzxPDWsm2G8kPrCurptXQPd4D9kUsd0w+z6tb+Lc5IrfX1tEd5Sox7L9XOz+
nbtNeWcUDyXQ+WNZ50UgB8Q3xE3gEvAw7P4S2AWPX0f+xsY3zJPp/RXXTvNz
KMWTsuaF8DuWvzX8YRRSSjI9jvedsq2G7hND3gK+j84tSunjR38Jm7egPgQ/
iXgB3hP8L0/P/L6lZPbcXCWxD4/tT0X/maz7ViCHILXdFlcTFIVyS93anYbK
wvijcf2nGgSImPuaI9+5st24Won5Nx5O5e27whwV9p/hvrLqGc4FX416gKC/
3WFK/zraB4K9VPCTmAvl8UY8foed+0K8gL1J4/uA+7A3Cfs1gKuhvz4NLlby
B4Jk3i8HfMbqGfBkqwg/i2HRfYRLN3ZrTmhuJdC9iz/1l1e/4O1HPDB61MMl
F0PovAj4KNWN057ldZMT5u2s6j7PT1ng7V8Hz7XXtLNWTGAe3d+HOgPqx+BL
6DzDT5xqqVyVqzowQkK+6JdDPIaexew/lvlXcgGtoyNeyOp/wU8+bPuwqaik
inyIKrZfe7uOzBjjK7+zQFVAn016993EJHSEICueRF1koqLunI7lSoJ1/ZT5
QyapCh36zqldblZFcQn2/KPuBH/G0zPYhXvpnb9369aRwYdVll8ubCC0vvl8
7i3F2P7CmmL/V4JVXwG8EeQrrZ6F+hviG/ZXszhV1j5o3jwDeC7gasQLNt80
0l9zvMUmQmb9xZwE4hDihX3Rs775/94LuIQnX8gB+QX4B+Ao7M2H/sr6/gX2
otz2naxfHt5Cus/b8WNQs4Lwd9Zn/3HBSbRe+Hj3m3FxPR1+7TdCf9S95DOv
7n/gxjfgEuAzyIHdHyXrHCDyC9avB82+nlxioSjMCuojTjxhSftAgKOA13su
XxRjebCA24d3d9zAv06uUqT7HJ0S0z6dvFBMwO/0vrqmKGnbB5G3T5dnF93U
K0wtw1WExANtJj4I7iAstQt5VuZQRdCXiXiBeIy4ycNRPH4H+15R38T7Afhu
4Pv2H+tw3yH5u4Q+IA9g7QL9Uahvgo/CfiNp8yLgPdl6Ifa1sfvX2TlLXl8F
+trYuQ7wvynVnXPyu2aQRy4qe3tHf5AZl0AfVm588yistphM8jy09tH9L3QO
5U6hZ9Wdyu/E1/2rUcEMBQFxE/iBJwfk8yyfin3F8L/ol+PtV5Y29wV7W1Tl
E9GwTVEYemVx+5bHT8l/OocNObB1HMwBAj8gXtB++5/2Jg3/sn4S+gt+Ev4X
fUzS5vVQD0hX0tU9bDBA2HjEactG3SKCvkycC76PzsdKmb849SXz4H75HxLx
AvteEYdwLvwD+BLed4P+gi+B/mJvx8eK9eVDLa+Ro7nDvO+rPKJ7DyjPxeE1
8N2wN8lWiDTunZlH7M6v2Zr1xIf8Yb394HDhO1lp2uXk5jw5gbf/jNfHxNuv
Af1FfQjzkMB9PP6B7f8FnrR3S9g7OLGVABwF3Ef7S6TsXwf/gLwQ+Be8EXgN
7MOT9b0Dds8/4hD8Gepv01zq3SteJhPUIdm5L1a+wH3Yy4p+GPgHFj/ALqTV
pVG/YN+bgT9DnQG8J/yvtL3N/633A3j9Jbx3rpBvos8GdQZp+yqAf1n9BV+N
+CbxPoOUfUGoZ/H224+e0L1T5aks0iZ5vetkvVJqx9LyWN7cF3guts4APUM+
tLnbzZwgq1YS+AFyYM9tStmnsjzjBmH3icm63xN1U+SbwOvgCRDnUb+wOzo/
OixaMeBho7Pvjzz5ALVxwe1zzlRJyBc8DOsfwIPju6HPRtY8gH03iu0LQr0F
/SV0Hykzd8vjU/ukhmf4RGYTxCHzP75pRB0uIk/Msne0+lhA0GfDvtMmbS8K
9imgzgC/49p5SNyWt3Fk7WbdwNLNn4msdT3URdg9//UrLAIWtm8kqHfjfTLM
CaP/jMenAv/KNcRpXldTFgbP17KrLVMWoGdzVhhPMRxQS5pSpydMUTel/UZs
fx8P77D8A+KQzdSkP9wNHpArvnI301/70zxAWrwAj8j6B7xjg/gG/As/KW3P
E/qYWLsAD4P6EPyOrHslwMOw+RDwGewCcRP4TBr+5b17hv2TkAP4M8R55AHR
JoNPdzWt5eJqzKMD77wM2X3h6Bo1gZ77s48J54I/4+kZ6gFsvok4jzoD+quB
d5Af8/IL3p4G7Fdm606y7tPl1bPw3dj9crLW9cD/on6BOJ8z85B6u66/3mlj
3wmSxldjrpm9L/iHGI1xz7q5BVIcJeseb+B1iX77n3VTx8qT5ZW3P5DvJT0s
NGc6034jabwn9HfJySD96fc+0T5z+EnwtPffpsxdKSfKnA8hDgFPQs8wV4e4
iXk9in9/2pu0OXfW3krnjNcZODdEYn8J9n5Jm0cHXmfn0SFf7FNQCO76PPqJ
N3d/NS8OLa+/pHVPo5WwXtvyjzpVNQE8AeqQ0DP4Hfa+rL2B32Hj/Kt009uu
q2Ppfk+8l8TikgnC5CnK879w/Q677xVz49jPBTx5O9zsw8jOihL7q3n1TVZ/
uwz3rtzvmkL7MoF/UY+FHTf4qkw2vpYvoWfo02XPxXws7Bi8J/t+Ia9PjLfP
EXV/dn+JrPO8mANEfxTm0bHnCXtcUJdGHoB4wetfB0/A9lcDP8D/snVeaXbM
63MEbwQ9Qx7Le4+K1wfCfjfURSBf9F0h30S84M3V8fJj8OvYv87uT5XWb0T3
QTP3dUwvGJ4/3Yz2xSO+yfquEQ9HAZ+xc3Uy9z/8nNdj8TrmOhA3gUuw10da
vGD5VHbvOIvPwPex7yiwdjH9WMrpXlbyASxPYOrrvmp7WSbN37aui9G47/CW
8uDs3lved2Px5Km3haviZ9YR8HLYb495f2k8LU8fYBfQX+BJ4Gp2TzqPJ2D7
+5DPr1KYemKDtwdh31Vm96TLylejnwDzsZgTlnUfP7s/in0nE3266Kug+wal
7Lvi9UFnKQc15f6WSd+VA7+DOC+NP2P3yKI+9DnXsX10Yi+692CO2w8Fr/PP
KU6Vtt8efDV739YGbwO8t+bRd2Hwvh7NL5h3S3jxgv1umA9A/w728bPvrvPe
CcJ3Y8/FfcEjYn7+P+XBWX0YM3u0Q3x4Jp3fRD0LdVNp/dXIW1i/c85XCBul
9JzWY8Hby8pr8ObGNz1TWluwLZvWTcHvyJq3IB8C/kX+pp5nlzfMsoagDol8
HnaBujSPn4R83zitqz9sFktCbhKlYUMSCO5r3qK/ppNrDCkP9Mld+i2W9ntK
m2sGTmX3n+FczEtjb52s7+giHqOfAPyOVbuyefPzugjop3VJm7ff+HEgxTv0
/QuO/+Xxk4cbN+y6WphO81jgM3YvIO/ddcwl8eIb7LiPSt3hybHxEjiVp788
/mFZRtsRQ4Z+pvdFPYu3T4w3f8ziPryPg7kk9t1q6BnqvLx98ax88Y45/C+7
D1oarkbewvoHvK+H/RosLkFeyKtLI+9m8Q7mZtg+BbqnF32ZHHzGk+/hmpUD
x40upPkQ6qaoS0vDZ+h7ZeWr0q/CqtG/iJzw6OCe9DiV1kV4cxKy7jcK6l/b
bT7Jofkx9rUB74BXztr2258r8yTnFtEXhLlF1Fvk7O3PTDheTL8b9AFzt+jX
mDh9eeHdy5L9Rv+t98l4/Tu33dUHlq1KoHW9k+PKwncGxxLsVUO/kax7MDCH
zcs3wWsgzmOPobT3RVDH4fWvs/t/YW+oZ/H4Psob/dxXYZvWZ8okzVYC+pWR
b2KuDvEN+JcXh4Af2D0j9w0WLp40/g2dx0E9QNa6P/SXnTvwN4y4ueNuAIE/
A14Hrmb7lXm8PYvPpnfRth65LIviX+BU+HVpc0n/q/2p+G4073ZsSnvn1ErA
e1TIs1BnAL8j7T1L3vuxGaHtPnv1z5bY2yzr+07/qz1P8Ou8PjHEzQVbjsas
Mn5AcQn0gcdHsXUy9r1F9D/guwGfwY559ULoLztvinft0Z8KPZP13XX2XXB2
/w70DOfS93ykzJsivrFy2Hk/1vD3m7k0f4M/4+2v5vkz9h0F5Juob6JPF3ks
OxfK4zWefFvU76HmL3+GuVDMqT09rnQvZWwU1TPgHZ4+YD6LlQP4ElYfeLwG
L49leY0L5NW4Qvc8+k4Q6mSoB8DvYG/+/wH85lSC
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         50, "ClassPriors" -> {0.7048780487804878, 0.2951219512195122}, 
         "TrainingOutput" -> CompressedData["
1:eJxtUDEOwjAMjG9i5Av8grUjaxEPaEVadQlSWqniJzwXJ2kcWxDJse9sn51c
xlc/wTm3nvjqh72LcXjfzwweYV3m4J+3sPnZx+tITH74IiIkQ3EpyCiFdLic
YjK7jEtUkOQJioTUQFcJXTGZrqokO+FHoXVDtZAaZ+a0GqCaiB4SMJw5+EO1
L1MtUM/XX1l3KXmpkqWNClriC6HzDwM=
          "], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 11.], "Key" -> 
            "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> "Perfect", 
            "Missing" -> "Allowed"]], "Method" -> "NearestNeighbors", 
         "Options" -> 
         Association[
          "NeighborsNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "NearestMethod" -> 
           Association["Value" -> "KDtree", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.5747935719246041, 0.03473792940152796], "Accuracy" -> 
            PlusMinus[0.6895225682644471, 0.03074044139153338], 
            "EvaluationTime" -> 0.00008297682926829268, "TestSize" -> 246, 
            "TrainingSize" -> 326, "TrainingTime" -> 0.09203694999999999, 
            "TrainingMemory" -> 1.191942*^6, "ModelMemory" -> 38400., 
            "ExperimentCount" -> 3, "ModelUtility" -> 0.7424825985672243, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.623306322968539, 0.04911818683619342], 
              PlusMinus[0.5440725645341362, 0.038402535850608085`], 
              PlusMinus[0.5766860510117136, 0.05115637634647455]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6812669987279566, 0.051755547027087595`], 
              PlusMinus[0.7053633842701252, 0.05069407000765742], 
              PlusMinus[0.6812669987279566, 0.051755547027087595`]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 408], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 249439002518028]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.632690895445349, 0.06200096050620416], 
                 "Accuracy" -> 
                 PlusMinus[0.6507090665888854, 0.03544535124239187], 
                 "EvaluationTime" -> 0.0000215561820561139, "TestSize" -> 
                 1398, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.007857824999999999, "TrainingMemory" -> 56913., 
                 "ModelMemory" -> 6816., "ExperimentCount" -> 7, 
                 "ModelUtility" -> 0.6695734877349586, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.626203186447637, 0.028011653322435704`], 
                   PlusMinus[0.7907963816008791, 0.08662416941231724], 
                   PlusMinus[0.7270184137932707, 0.07974766599246304], 
                   PlusMinus[0.6294867218584826, 0.017061161381213566`], 
                   PlusMinus[0.6166856837212846, 0.03359114752938738], 
                   PlusMinus[0.6080753339469789, 0.017088267897426727`], 
                   PlusMinus[1.0543716088208708`, 0.07177415699493715]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6786649593506984, 0.0469167078983398], 
                   PlusMinus[0.599457038558619, 0.04910729350593094], 
                   PlusMinus[0.6588629791526784, 0.04759634188315472], 
                   PlusMinus[0.6641221443488727, 0.033518101752970715`], 
                   PlusMinus[0.7042757294113742, 0.022912607675475528`], 
                   PlusMinus[0.6883875045099664, 0.02674786609187076], 
                   PlusMinus[0.45094218707347, 0.03515022521925845]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6323531727068646, 0.04246705618622094], 
                 "Accuracy" -> 
                 PlusMinus[0.678471165887176, 0.051430661863868604`], 
                 "EvaluationTime" -> 0.000035518375, "TestSize" -> 400, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.022951275, 
                 "TrainingMemory" -> 146294., "ModelMemory" -> 12000., 
                 "ExperimentCount" -> 3, "ModelUtility" -> 0.6740074346069653,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6909313148243311, 0.01808785303307867], 
                   PlusMinus[0.5535316177170976, 0.027222802522898357`], 
                   PlusMinus[0.5963287189295525, 0.022262700021717582`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.589556048459609, 0.049285744019733915`], 
                   PlusMinus[0.7479718900437679, 0.04376311595920322], 
                   PlusMinus[0.6788182227082304, 0.03316383331824515]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5747935719246041, 0.03473792940152796], 
                 "Accuracy" -> 
                 PlusMinus[0.6895225682644471, 0.03074044139153338], 
                 "EvaluationTime" -> 0.00008297682926829268, "TestSize" -> 
                 246, "TrainingSize" -> 326, "TrainingTime" -> 
                 0.09203694999999999, "TrainingMemory" -> 1.191942*^6, 
                 "ModelMemory" -> 38400., "ExperimentCount" -> 3, 
                 "ModelUtility" -> 0.7424825985672243, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.623306322968539, 0.04911818683619342], 
                   PlusMinus[0.5440725645341362, 0.038402535850608085`], 
                   PlusMinus[0.5766860510117136, 0.05115637634647455]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`], 
                   PlusMinus[0.7053633842701252, 0.05069407000765742], 
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00008297682926829268, "MeanCrossEntropy" -> 
                PlusMinus[0.5747935719246041, 0.03473792940152796], 
                "ModelMemory" -> 38400., "TrainingMemory" -> 1.191942*^6, 
                "TrainingTime" -> 0.12304517346625765`], "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 249434707550732]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843914358808524`17.330571040158983*^9, 
         "PreprocessorEvaluationTime" -> 9.2300664451827`2.*^-6, 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.3520000000000001, 
             "ElapsedTimes" -> 0.3679068, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.44000000000000006`, 
             "ElapsedTimes" -> 0.4839071, "ExperimentCounts" -> 3], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 0.55, "ElapsedTimes" -> 
             0.9517487, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[249443297485324]], "ID" -> 
            249447592452620]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 2.4133686, "MaxTrainingMemory" -> 
         1714088, "DataMemory" -> 806280, "FunctionMemory" -> 211272, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 50, 35.9888112`9.308742394758687}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJyVVl1Ik2EU3hSiRZSri2CMwFbkxEVlXphkUENkZEh/6hrMgmEUERXBRlBZ
DlYtZLFauP4kWl5k2o/Zz/B8OUjFYauwpolsa9VQh1ObTKNW3T7fxWEXHx8v
5z3nfd7nPOf5vtyDx3aZsiQSSdu/5/97x7mqotuyQVoZvdIR2v+TBh4qWxp0
Iapxa4vsdXGSXj19ecwcocZ96pzi2jEqGd0y4rC008sDlXtihQsEzA/3f8+f
rh8leUnCf23hJCnmfYK04iMZlM4bKluSdM/kZT32YdJ6FQXq8imyLm6aCqbq
yHWhNHGxaoXQs9m6zGt9TZtUJne9Nkvof5OKzmz1UMPayJKhbTLBok+rbGdH
aGex0ZM2JuhSnrHLlOig2IbqvPCfbGFdyhPWBKL0Qnb90Zz7hwiP/n6Or/nD
J3qiUwRytTOE+B+3LX/Q3RKk+Hw0UlY6Te3VR1/J73wlzVDYfmI2JorjffC8
VkPhl88T78irMccXFaSo1+FqWn3zPX2L12zM989mnI/7sV/IH+LfnpIpHM/9
1F2pG8hunRPVw34h38gfxhE/xlFPuMZ8XHP8I37cz+Vz90O8yLelIrjquPUt
SXv7Otes/y3Kx37Flea7R5x9NGFwmZN7f4niwXRgMGkIk3rysL5zeFy0Rj1x
/ON9UR9YD/WC/CEexM/5A85rpnxw+kP8mI/3QTzIF56Hfoj6wPujX3H6Rv9D
/Kg/bn4QP84L57ccXqyHfKKfof5w/jj8mI/fE9QPno/1T+0+6fTafNR479DS
8+VpVu+cHtEPuPnCOOLl5gn1yukX19h/bv45vWWMD/jC/qK+Qq6nTvMtgZoV
sTPjQYnIfzl/Q32g/jCOa8SP/cL9iJfTI/oF9ov7nnH1MY79Rz6wPvod8o31
0K84/rn/JZxXTn9/AbLEYH8=
     "], "CountMatrix" -> {{128, 0, 0}, {47, 0, 0}}, 
    "IndicesMatrix" -> {{{1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 
       21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 39, 40, 42, 43, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 
       68, 71, 72, 73, 74, 76, 78, 79, 81, 86, 88, 90, 91, 92, 93, 94, 95, 96,
        97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 
       113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 
       133, 134, 135, 137, 138, 140, 141, 142, 146, 147, 148, 149, 150, 151, 
       152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 
       168, 171, 172, 173, 175}, {}, {}}, {{2, 6, 8, 14, 15, 19, 22, 25, 29, 
       31, 35, 36, 37, 38, 41, 44, 58, 62, 69, 70, 75, 77, 80, 82, 83, 84, 85,
        87, 89, 103, 105, 115, 116, 117, 118, 119, 127, 136, 139, 143, 144, 
       145, 157, 166, 169, 170, 174}, {}, {}}}, "ExtendedClasses" -> {1, 2}, 
    "Weights" -> SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00015028399999999999`, "SingleEvaluationTime" -> 
    0.0071053499999999999`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7835307714583907`*^9, 3.7842312359384546`*^9, 
  3.7842316593302593`*^9, 3.784391444438672*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"a6013844-c89c-495d-be34-1a02f4f078c0"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{
  3.7842316072673297`*^9},ExpressionUUID->"d1cbbf16-a5e6-41d3-b0f5-\
2d6d9adb416b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NNtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.7835307476131477`*^9, 3.78353074857452*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"48857d25-9520-46df-ac94-6503c5d38cec"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.7314285714285714`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8448844884488449`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"0.26857142857142857`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.7314285714285714`"}], ",", 
       RowBox[{"2", "\[Rule]", "Indeterminate"}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "128"}], ",", 
          RowBox[{"2", "\[Rule]", "0"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "47"}], ",", 
          RowBox[{"2", "\[Rule]", "0"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.7314285714285714, 
    Association[1 -> 0.8448844884488449, 2 -> 0.], 0.26857142857142857`, 
    Association[1 -> 0.7314285714285714, 2 -> Indeterminate], 
    Association[
    1 -> Association[1 -> 128, 2 -> 0, Indeterminate -> 0], 2 -> 
     Association[1 -> 47, 2 -> 0, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{3.7835307741168847`*^9, 3.7842312391540194`*^9, 
  3.784231661798834*^9, 3.784391448681622*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"0557b93a-545a-4277-9b1e-66c8f1cdb367"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NNtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}, {
  3.7835307503764887`*^9, 3.783530751173031*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"f3f1cba7-d697-43c8-937d-545b4aaa73cb"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQMbV5o8uZP+3J7afNd69dVPezfa3/kjmmba9cL+
wcmsymSWw/bb9vFKrHr5wj6ZRfjv3DXX7CNermydOu+V/UfReCB6aJ8GBm/s
lZ7b7W648cR+ZwrHtYvP3tpzXV9cYMv13L5xevCHIq539kE75FpfB76wn/e8
Eoje2T+sElnn/vCVfd7tbbm3t7217/Bdqvjc7rX9vBudc290vrWvORoORG+g
5r+zV57x4n3K1jf2fY8tgOid/b5H2kD0zv7sGRB4Y5+6dY9hU+c7qL8+2Efq
5vckLHqPwYf5FwBtmprs
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
           7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQAWJGIGZiQICNK02e3El/bk9tvmu9+uqnvRvt7/wRTTPt
emH/4GRWZTLLYftt+3glVr18YZ/MIvx37ppr9hEvV7ZOnffK/qNoPBA9tE8D
gzf2Ss/tdjfceGK/M4Xj2sVnb+25ri8usOV6bt84PfhDEdc7+6Adcq2vA1/Y
z3teCUTv7B9Wiaxzf/jKPu/2ttzb297ad/guVXxu99p+3o3OuTc639rXHA0H
ojdQ89/ZK8948T5l6xv7vscWQPTOft8jbSB6Z3/2DAi8sU/dusewqfMd1F8f
7CN183sSFr2H8wEMepJh
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.06857142857142857, 0.7668711656441718}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7668711656441718`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.06857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7668711656441718}], 
          Row[{"RejectionRate = ", 0.06857142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.14857142857142858`, 0.7785234899328859}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7785234899328859`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.14857142857142858`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7785234899328859}], 
          Row[{"RejectionRate = ", 0.14857142857142858`}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.35428571428571426`, 0.831858407079646}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.831858407079646`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.35428571428571426`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.831858407079646}], 
          Row[{"RejectionRate = ", 0.35428571428571426`}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.5428571428571428, 0.8875}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.8875`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.5428571428571428`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8875}], 
          Row[{"RejectionRate = ", 0.5428571428571428}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.6514285714285715, 0.9344262295081968}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9344262295081968`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.6514285714285715`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9344262295081968}], 
          Row[{"RejectionRate = ", 0.6514285714285715}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.72, 0.9387755102040815}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9387755102040815`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.72`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9387755102040815}], 
          Row[{"RejectionRate = ", 0.72}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.76, 0.9523809523809523}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9523809523809523`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.76`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9523809523809523}], 
          Row[{"RejectionRate = ", 0.76}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.84, 0.9285714285714286}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9285714285714286`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.84`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9285714285714286}], 
          Row[{"RejectionRate = ", 0.84}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8514285714285714, 0.9230769230769231}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9230769230769231`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8514285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9230769230769231}], 
          Row[{"RejectionRate = ", 0.8514285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8857142857142857, 0.95}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.95`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.95}], 
          Row[{"RejectionRate = ", 0.8857142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8971428571428571, 0.9444444444444444}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9444444444444444`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8971428571428571`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9444444444444444}], 
          Row[{"RejectionRate = ", 0.8971428571428571}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9428571428571428, 0.9}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.9`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9428571428571428`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9}], 
          Row[{"RejectionRate = ", 0.9428571428571428}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9542857142857143, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9542857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9542857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9885714285714285, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9885714285714285`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9746794344808964`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9885714285714285}], 
          Row[{IndeterminateThreshold, " = ", 0.9746794344808964}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.718},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9885714285714285}, {0.7314285714285714, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.78353077662043*^9, 3.7842312426068974`*^9, 
  3.784231669562087*^9, 3.7843914539722776`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"edc7e2db-421d-4c08-9ed8-8ad233a6d752"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NNtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}, {
  3.7835307531209116`*^9, 3.783530753997409*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"2dcf9358-1ad9-45ff-9429-0a302783b9b3"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8973079289604659, 0.720920579259567, 0.3257175408971311}, {
   1., 1., 1.}}, {{1., 0.42, 0.}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["128", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "128", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7314285714285714`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8448844884488449`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{128, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7314285714285714}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.8448844884488449}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["47", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "47", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.26857142857142857`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{47, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.26857142857142857`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "175", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7314285714285714`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{175, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7314285714285714}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", 2}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["175", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7835307800274935`*^9, 3.7842312463722773`*^9, 
  3.7842316732947383`*^9, 3.7843914631259584`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"a74cd2c1-a84d-4164-8b95-0c5203af349c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations", "Subsection",
 CellChangeTimes->{{3.784387446391458*^9, 
  3.7843874486516895`*^9}},ExpressionUUID->"7f8f3758-2bcb-41ed-a9f5-\
c43b192c6652"],

Cell["\<\
1) The Classifier measurements show that 73.1% of the data is classified \
correctly and 26.3% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 128 data correctly predicted to be belonging to Dataset=1 
\tb) 47  data incorrectly predicted to be belonging to Dataset=2 
No data has been wrongly classified.
3) F-score of Dataset=1 is calculated as 0.844 and Dataset=2 is 0 as none of \
the data belonging to \[OpenCurlyDoubleQuote]2\[CloseCurlyDoubleQuote] has \
been identified.\
\>", "Text",
 CellChangeTimes->{{3.784231616692504*^9, 3.784231627948432*^9}, {
  3.784231685890879*^9, 3.7842317372279987`*^9}, {3.7842335299188*^9, 
  3.7842335686338425`*^9}, {3.7843874429028206`*^9, 
  3.7843874433820972`*^9}},ExpressionUUID->"98c679e2-34a8-4f25-9285-\
7221e9850462"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Artificial Neural Network algorithm", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 3.7835301376715503`*^9}, {
  3.783530788232768*^9, 
  3.783530833957533*^9}},ExpressionUUID->"340f249e-1011-4b75-bb0c-\
a3368b8ef0e3"],

Cell["\<\
Artificial neural networks (ANN) are computing systems that are inspired by, \
but not identical to, biological neural networks that constitute animal \
brains. Such systems \[OpenCurlyDoubleQuote]learn\[CloseCurlyDoubleQuote] to \
perform tasks by considering examples, generally without being programmed \
with task-specific rules.\
\>", "Text",
 CellChangeTimes->{{3.784235415201171*^9, 
  3.784235419581668*^9}},ExpressionUUID->"380e72f3-0679-4f62-94c9-\
eb38fe7d61cb"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{
  3.7842317605841875`*^9},ExpressionUUID->"9516f9f1-6592-42bd-9b8b-\
96f9b054058b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ANNtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}, {
  3.7835308378703203`*^9, 3.7835308693681335`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"fd5344f2-b26c-499e-96a5-77179bd1d208"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0274692, "MaxTrainingMemory" -> 164992, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 53, 48.263938`9.436197612651245}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
        Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association["Weights" -> CompressedData["
1:eJwBYgGd/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
BwAAAAsAAABHNRG9x5LCPnPCQT7UWFK9hmu1vdLneD7HCg692IXovbqIqT4e
LwQ+P9+nPEvU+b1TH3M+MERuPorvbz2C//4+Bfl0vjrtN76n8q0+BaBpPtEY
9j3D28S+v8VDPen9tT42hp0+LhSyvYA1Dr4cOPE+Ik6LPfcIxD5vO0M+BDn5
vYxBFT3SJxi+xYCivvDpdr2hRTo+uix5Po3r7r0R+qe+LBszPjNUHL5CUES+
JQeOPulKYL4xpCw+3VyAPawXJz4Fskq+thEyvrvJQL7sn4K+yotovUXAcT0a
iDg57hxZPm9tC718xHm+zT/HPuHPOr7YTEc+sXRXPuhsfL6J0G4+wfe6vknh
170B3ls9S2EyvudJOjt/HBK8MjKVPZiJyrwl6zk97nd2PCPWkb2UCLa+NVJP
vvcjnQI=
                    "], "Biases" -> 
                   RawArray["Real32",{-0.08734568953514099, 
                    0.10887273401021957`, 0.11195862293243408`, 
                    0.14214272797107697`, -0.0953497365117073, \
-0.11684299260377884`, 0.09651021659374237}]], "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {7}, "$OutputSize" -> 7, "$InputSize" -> 
                   11, "$InputDimensions" -> {11}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> 
                   RawArray["Real32",{0., 0., 0., 0., 0., 0., 0.}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {7}, "$OutputSize" -> 7, "$InputSize" -> 
                   7, "$InputDimensions" -> {7}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {7}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "5" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association[], "Inputs" -> 
                 Association[
                  "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                   "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Linear", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   RawArray["Real32",{{0.028481096029281616`, 
                    0.0917222648859024, 0.20000037550926208`, 
                    0.8573093414306641, -0.005516251549124718, \
-0.09792474657297134, -0.10246496647596359`}, {
                    0.18772123754024506`, -0.3257341980934143, \
-0.4734325110912323, 0.5948416590690613, 0.5803463459014893, 
                    0.4012264013290405, -0.25578558444976807`}}], "Biases" -> 
                   RawArray["Real32",{
                    0.12445598840713501`, -0.12445598840713501`}]], 
                 "Parameters" -> 
                 Association[
                  "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                   7, "$InputDimensions" -> {7}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
               NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
               NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}], 
           "2" -> Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Level" -> -1], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Training" -> 
      Association[
       "Optimizer" -> {"ADAM", "L2Regularization" -> 0.1}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "RoundLossList" -> CompressedData["
1:eJxTTMoPSmVkYGAwAuJZljHsSq8+2TNMkO03T/tkP8uypd572kf7s2t+e86+
8MH+rE+y0z/RD/Ymn8ueJ597Z39W5/7Mve1v7Rk+VOj+CH9jP6vz1jtG+9f2
JsI7yxKtX9nP0ozV9fB5aZ8e1p/UUvDC/qzIYd/MZc/tZ0V6ie16+8yeYcOr
Da5uz+xnCaYzvlz31D6dbdHPILWn9rNyb2lPWP3EftbL18U1tkC6dZL7yVuP
7c/eaY3e2/TY3qRfemqAyWN7BoubHYbvHtnP4j1WPm/9I/uzAk0rT5YDaYeT
bRxuj+yNs/8otko+sk//9rdm2seH9sbVqwOPnn1of/bERqN1a4H0HYOPFyY8
tE/fdWDdlTIgrZV1PjgeKP4n9CO3F0hdrtZ5s4f2DBr+5mGqQLpBo6BQFEhf
cLz0kA1ISzhL1f98APSfwU/dtw/sz8Ys+Xnp4QNgeDzOjboOpDdwGW48+8De
eLaOwNYjIP7DpUl7HgDDaXrC2i1AfWoym9rXAvkf13I/Xgbki5m92bgAqI4h
1erNrAf2AISwzyQ=
         "], 
        "ValidationLossList" -> {{5, 1.5112946816453976`}, {
          10, 1.4497726912021027`}, {15, 1.390558397074287}, {
          20, 1.3342148767290065`}, {25, 1.2807976879483582`}, {
          30, 1.2304356088291624`}, {35, 1.1833556434329675`}, {
          40, 1.1395497791925253`}, {45, 1.0990297112385836`}, {
          50, 1.0615654740938727`}, {55, 1.027010448391036}, {
          60, 0.9942521121809068}, {65, 0.963716107249564}, {
          70, 0.9356913042767923}, {75, 0.9101115586046052}, {
          80, 0.8869006016424723}, {85, 0.8656729173143298}, {
          90, 0.8463880002346573}, {95, 0.828785853004273}, {
          100, 0.8127842459599582}, {105, 0.7982289017159111}, {
          110, 0.7848653256969184}, {115, 0.7725928174141717}, {
          120, 0.7612680189539582}, {125, 0.750783692437167}, {
          130, 0.7409565865385288}, {135, 0.7317979406489401}, {
          140, 0.7232010678141092}, {145, 0.7150894683614677}, {
          150, 0.7074670779461762}, {155, 0.7002669056611401}, {
          160, 0.6934438175996955}, {165, 0.6869676141258405}, {
          170, 0.6808244529351287}, {175, 0.6749624160251446}, {
          180, 0.6693584216492516}, {185, 0.6639726125844279}, {
          190, 0.6587876174598932}, {195, 0.6538005544975095}, {
          200, 0.6490124279291045}, {205, 0.6444103842867271}, {
          210, 0.6399789519836099}, {215, 0.6356888454103348}, {
          220, 0.6315535779814331}, {225, 0.6275591322658013}, {
          230, 0.6236648751536802}, {235, 0.6198824076932303}, {
          240, 0.6162181335064221}, {245, 0.6126639663374849}, {
          250, 0.6092156342667888}}, "ValidationLossSeries" -> 
        TemporalData[TimeSeries, {CompressedData["
1:eJxTTMoPSmViYGBgBGIjIPacxBLqrPfDnr+39KaL0Xf7g6czNXfZf7O3M7m2
6WPEV/vk2oztqnVf7J+K7LG/u/6zfZzfwWC295/sRfbM6Zlh/cn+68KNugum
frQX3SMjovPng73JNfamRXkf7DUrLM+9vPAepF/z8LV39nrLHzzW+/jW3jm5
1m2R/Fv7bbm342oT34DM2TB982v7OU3TPeeIvraP9Tv4IrP1lf1r52TpEKZX
9sEfisLEu1/ab7QzeTxX9iVI/ySRnS9A+vb7xbywr81Y05rN9sK+iCtu2qut
z+39Dp5ufpz1HOT+CWUqz+0/FHH5Mz96Zv/rQsT/iYuf2U9S8VSZlvHM/lr7
MbGNBs/s98xpalz8+ynQ/19jAk4+BbnruNfMpyB1UUnZT+0z1vDXOds/tQcG
1dGTImB1yu9fP7F/8FRk29YjT+xzb29rY5r/BOQe5a1VT+wtWfWVJoQ/Abn/
5nrTJyD3Pf4m8sSeK86PS+DrY/s1/L0Lha89tm+aHizOv+Mx0L7oso+zHgPV
6ZzcWPfYHgAl5MuB
           "], {{5, 250, 5}}, 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
           ValueDimensions -> 1, DateFunction -> Automatic, 
            ResamplingMethod -> {"Interpolation", InterpolationOrder -> 1}}}, 
          False, 11.3], "TotalTrainingTime" -> 1.2888567, 
        "MeanInputsPerSecond" -> 12414.10313497226], "InputType" -> 
      "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 11.], 
         "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "FeatureNumber" -> 11, 
      "Options" -> 
      Association[
       "NetworkType" -> 
        Association["Value" -> "FullyConnected", "Options" -> Association[]], 
        "NetworkDepth" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "NumberOfParameters" -> 
        Association["Value" -> 100, "Options" -> Association[]], 
        "ActivationFunction" -> 
        Association["Value" -> Ramp, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], "Dropout" -> 
        Association[
         "Value" -> 0.4257677135725739, "Options" -> Association[]], 
        "NetInitializationMethod" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> {"ADAM", "L2Regularization" -> 0.1}, "Options" -> 
          Association[]], MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], ValidationSet -> 
        Association["Value" -> {
            Association["Input" -> CompressedData["
1:eJyNV2dQlGcXpSgrCCQUIZSIioDdCIKSGJ5dFVFUVMQC39CkiSIRRSFIjFTB
0CRoRIpSlCYGadIvgsACUpalV1ma0hdYyiISZ/I9b2Z2Zyf58c7778yd85xz
7rnrL/xkaCPAx8e368u3+ss3KFHgXWjCQAN//+G4doG9h3YX2m5oeFLJtRVs
GDNh1SqdUJ1maHZVqwzmVKU3Xil+C4Wllt5p4VTIPjLpb0HJgTvUm23KrYko
IewROpAMiBP35C+hHmw2G1z4GJm6Dm1wYtn86/Fz3SDHGnmd9bkQRWuOx7aP
TyPF2Zz86q/G0PWwujW9qAVJmMT+kNExgCZcPR8KOHdw4brfCQqLUqKho3px
G15ENMGz3zI2WAc3wTc2VoU6o++BaZgwqRFVDzc63NSrcupgt6KuUa5iFwrI
b6krVZxDbOY+h2u2bLTo6hSrNrAI7L//iGIytmj5jIEu7ZuZ2QsNUH+qa6vS
VhqsMC8nya1thd9vhcwVSdSAHqNi/crGBgjMCe+Vdp0h5t1i6jD25scK4Jx3
yVFZ7fGLPoIHzK9DSkdiiEEL6J5qEJP5SIU7N6TMhL+qh3hRk5ZVVjQk8cce
qVBjOk9+k7S8B0+nf0DZw17G5hl0CElcG+37pgXKp9VVJ/TzQUTETmjhaBXc
FSb9aD+aARfP6gpOgT2Q3rsEsHqG4WZVbGhNEJNr3rWK8ipHlz8BqVFjQDGl
H6Xu3xGZVzSKIvzUM+6FvAJF49mlK3ZDyONGuBvpVjlinzKtpLr3In3nxmyD
lUxkZBu8I+/2ENe8w6m1OxvmFwDzW2nfb7HArAHJl8fffZvdCZrWSvddPZoh
LOyy0+O2ergtv4epP8FCtQIdH/buXkIK1HG/3JhJLtyRvBhqhOAygYv14DZu
0NN4Kw10ZIxDP8XlwyC/ZErDjiqoEK7cZSlagSRzn5PY7DEk3PWAvcabxYVr
czRPIiD3I8RfiHtS75GEAn/XPJdbHI/IRy493bdxFqk7/rr1nmkpmFWfldE7
lw6f19s9WVVFA//b++f7oxfgzMzkDd/Ti8Cps+NWoyfsBiaBEVcyMu/VQuih
bkehV/mmN2hI2zKh7nwD9KWMobtONNBaoY+MDyyhYw5TcscKSWTbb8Lfl/qu
IHPi3jbNyX2oXQ5Be2pbik6/hcMFlu5byopBoEnPSODNU7TB493LUVY9KJvL
D/gEvYPki72v5yP5i488PJCS/XwRRC/PURjnP3LpAfOwqk3IT/MaP7nbO8T8
yVUB8n3x6f1+ualoPsDPSsNKjrz4U7PihBaJLNr6Nl592yR4p91QNawfBOwL
znmxLx6y1O82BDeDW5m/XNJ0G+zt3jwr9Ac/uW2/Qci6NXSU3p9Rr9AXTvhN
9qpt0EPncvRv83L6Tas8omxzYRu4va3vXbhAB/a6S0VWC1WQHCWmJnZ4GLXI
nj0gLJHJkwc8L2dOYh/jfBiprk30OP1P7mBf8NKvckXkzoMXp7nyrCF916R7
PQO61imYXZZuhLXxsosMHRrsGTXYsmA/RuRvkdrKAlESt35dmlbfi88e5sr1
1Md9s1crB4B619OrxL4I9Ohi4gufqRC0y1Ax16sL5ioztCX1qoBX7jBtNtLD
HFgoQSRhcWh4ClXUfIg0i5hFBzXy+R36V5OxHjrkHJEzdTsZ8+D/ldvUo4lx
sO05smKL0ywXv7JFUR06m5oQ57ttdpHmV1FpAvSLTXtnWSN4tjM7LWIa4FDs
i53K7xZRTVyz4pQ0i2dO8vlXnt9eMsalhwsqfsk1ojlAJzVJk+qboLBB4VGB
YwNUR/qyzrwSIt+X74wQ2bdM5Bmnfr26RbqTZueh5KWTnINFO4GrLzHf2K7d
DLahB0/sam+GhwtHJpmX6VCT1Nn1/nkLwS8vX+B3m29/KX7tcgnhYxGy3+c9
BivJWfE7Y7S6c2CiBH02tMpBiT6SkqmObMA+xrnOiasg4Dz9+uMUFw8yqi+T
paYZhH4tCjYoaY/Xglm309evu+aJvflv+xjzgPd8eaK9j+AQDXBOhvm8Mg1a
UQGN5t/3iQjPAtYDLx7wu/HyG97zvXvOpCqLlMFkxHJptPw0kOIYmTIXuoDX
vDNJ7GGxHXTgC5cq8klohDzHwwkUUzp8f1Bo5Nc/m77wmKJMEaFDXcCDbbPP
6yEr9E36NclJwse8cDWGKVmdhSPAyUOy5d6tz326iB7V/OLmg0m/WsJvuD+M
CvV31R5e5sLdXKYuxhDgK1YKsg6RrKYR+UCfuax6Pn6ayHWcDzgn8X7j1Use
vVB3/CFriOAB56+ajr2mSe8oOv0n0+GZAQ2MIynZOqI0Is+wfnnlZKZ6Wkzw
EJPAxb3Ev8Lo3OTVTrBzc3odmJVJ7CHsC5zrvPiVkFKg6cI4Om+dl1TJ+oC0
M13Nkp6NILyHogYzp6KYn1B+6oRV/0EBMs51PC+vvoN9cfL4No1nolUwvVP8
UmZgJdH7vrnoa+P3qgHkq59+VNMtgcdnP9G6+aYJX/DKhy0qcj+fRB1c+j1n
8Wt4D60d8J6/kh9eWdfMm19ee57Tx6zfqppNu3thtqX9+nelNTAWD1E6va+J
XoL3xfcbXVId4+g8+w7JXOFODGMJLaX3HGvR/4x27/tWUsoiFFLGJknZgQrk
NV6Jxw5dlCSf2yS9OvDWMOE3XvmL9cCZk8G3Lx2WSHgP3l0yW80SaCDiA0On
nOshYJtii/VvK4qry3QlTLKXwXtkx+nr7n1c74b1EK2pesrTRJDc8fvai7IC
QuTYpvYBz6APqKAnUfGkcjkoPTAdaravIHRGtaXoSv0xR/QzTlx8B3D2s8XW
a8JnOx8hzn2BcTEPRp6GhYabenjOO6H3w3fVGlNo+//GDsaWTqFoE1Zf581l
pO5rWLrdswldXZd/VvXJEMJ7XugEOZQSzOKpX146S5b56V7e+rcQSJZ1f/YO
QD569P5Kk5dE38H6vX7N+RfBezNc75a21mtpUCYTlYo6ej1oFCSP+1BYDpYk
statho06xsWA59Xnl2aKabIQ7n1Yv7zuAHwXcs57pplvkOrsBfOzV2ZUXJ5C
hXdwy3e12QQP+G7hxW/hXGuXgu0UEjflvx1q1EHkrxFD2tm/pxteTLGepOfT
CZ39V1ysX9xT8bzppmI3DS81QfQiw0/QtRFtX3d4r1BpHvqvPUp8wflJelI/
6hCiUH42ViFbu8XaWVOGUOty24YbtZUI328h+TPmPT1vCB//2/1WJZZSNZw2
QNwt4r6f1O6qVCOheB/L+HcjiCp0wepQWiU60BmZozbx5z934f/1yyt38N3C
+W5ZqpR9YcV5COsM3y34jhUOaLJfJzaNDiXUJN/qY3PxgHvfzhOrt36gA+pw
b7y3ao6GLGKkdGRtBlHY0eEKF2oiaGRmse12U3nm5F9MOGgJ
              "], 
             "Target" -> {1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
              1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 
              1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1}], "Interval" -> 1}, "Options" -> 
          Association[]], "EarlyStopping" -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        TrainingProgressReporting -> 
        Association["Value" -> None, "Options" -> Association[]], "Network" -> 
        Association["Value" -> NetGraph[
            Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
               "Target" -> NeuralNetworks`TensorT[{}, 
                 NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
             Association[
              "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "probabilities" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{7, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 7}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                   Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                 "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               "loss" -> Association[
                "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                   "$Classes" -> 2], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                   "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "probabilities", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "probabilities", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Target"] -> 
               NeuralNetworks`NetPath["Inputs", "Target"], 
               NeuralNetworks`NetPath["Outputs", "Loss"] -> 
               NeuralNetworks`NetPath["Nodes", "loss", "Outputs", "Loss"]}], 
            Association["Version" -> "11.3.5"]], "Options" -> Association[]], 
        "NetTrainOptions" -> 
        Association[
         "Value" -> {
           LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
            TargetDevice -> "CPU"}, "Options" -> Association[]], 
        "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
            Association[
            "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
             "Parameters" -> 
             Association[
              "TargetForm" -> "Index", "$InputDimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], "$Classes" -> 
               NeuralNetworks`SizeT], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
             "Outputs" -> 
             Association[
              "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
            Association["Version" -> "11.3.5"]], "Options" -> 
          Association[]]]], "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6134997391587744, 0.06132921132981753], "Accuracy" -> 
         PlusMinus[0.6812669987279566, 0.0731933965337458], "EvaluationTime" -> 
         0.00026009756097560976`, "TestSize" -> 82, "TrainingSize" -> 326, 
         "TrainingTime" -> 1.5979484, "TrainingMemory" -> 362184, 
         "ModelMemory" -> 108360, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.6902354286621849, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6134997391587744, 0.04336630121613681]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6812669987279566, 0.051755547027087595`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 100, "ActivationFunction" -> Ramp, 
           "L2Regularization" -> 0.1, "Dropout" -> 0.4257677135725739, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> 0.1}, 
           MaxTrainingRounds -> 50, ValidationSet -> Automatic, 
           "EarlyStopping" -> Automatic, TrainingProgressReporting -> None, 
           "Network" -> NetGraph[
             Association[
             "Type" -> "Graph", "Inputs" -> 
              Association[
               "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                "Target" -> NeuralNetworks`TensorT[{}, 
                  NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
              Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
              "Nodes" -> Association[
               "probabilities" -> 
                Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{7, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 7}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                "loss" -> Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "probabilities", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "probabilities", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Target"] -> 
                NeuralNetworks`NetPath["Inputs", "Target"], 
                NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                NeuralNetworks`NetPath["Nodes", "loss", "Outputs", "Loss"]}], 
             Association["Version" -> "11.3.5"]], 
           "NetTrainOptions" -> {
            LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
             TargetDevice -> "CPU"}, "LossFunction" -> CrossEntropyLossLayer[
             Association[
             "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
              "Parameters" -> 
              Association[
               "TargetForm" -> "Index", "$InputDimensions" -> 
                NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], "$Classes" -> 
                NeuralNetworks`SizeT], "Inputs" -> 
              Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`TensorT[
                   NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                   NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
              "Outputs" -> 
              Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
             Association["Version" -> "11.3.5"]]}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], 
        Association["ID" -> 252432594723554]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "Convolutional"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.3247607543475375], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 11}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {11}, 
                    "$OutputSize" -> {10}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 2, 5}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 4, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 4, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 4, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 4, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 3, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 3, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 3, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 30}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 30, "$InputDimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
             "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8799346220916948, 0.04656364020745896], "Accuracy" -> 
              PlusMinus[0.30242733558832113`, 0.06471261839569287], 
              "EvaluationTime" -> 0.000465094, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.113335, 
              "TrainingMemory" -> 190016, "ModelMemory" -> 199704, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4857099655934054, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8799346220916948, 0.03292546574742481]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.30242733558832113`, 0.04575873129593174]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6661060738879933, 0.006074014751314758], "Accuracy" -> 
              PlusMinus[0.7138927035584292, 0.034487270739457586`], 
              "EvaluationTime" -> 0.00017374741379310346`, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.1928416, 
              "TrainingMemory" -> 273752, "ModelMemory" -> 199704, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6472394925226681, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6661060738879933, 0.004294977019681786]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7138927035584292, 0.024386183004486854`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6745762046790674, 0.015724488585233905`], 
              "Accuracy" -> PlusMinus[0.6451224204147037, 0.0750403221509861],
               "EvaluationTime" -> 0.0006295060975609756, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.5133752, 
              "TrainingMemory" -> 379840, "ModelMemory" -> 209056, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.637305355891428, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6745762046790674, 0.011118892509309353`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006295060975609756, "MeanCrossEntropy" -> 
             PlusMinus[0.6745762046790674, 0.015724488585233905`], 
             "ModelMemory" -> 209056, "TrainingMemory" -> 379840, 
             "TrainingTime" -> 0.7558413852760737], "Index" -> 1], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.6468867345872592], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{7, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 
                    0., 0.}, {0., 0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 
                    1., 0., 0.}, {0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 
                    0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
                 TargetDevice -> "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.43600587256377843`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> 
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                   None, {"probabilities", 1, 12} -> 
                   None, {"probabilities", 1, 14} -> 
                   None, {"probabilities", 1, 16} -> 
                   None, {"probabilities", 1, 18} -> 
                   None, {"probabilities", 1, 20} -> 
                   None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 4], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.6971892060231675], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{5, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0.}, {0.,
                     1., 0., 0., 0.}, {0., 0., 1., 0., 0.}, {0., 0., 0., 1., 
                    0.}, {0., 0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0.}, {0.,
                     1., 0., 0., 0.}, {0., 0., 1., 0., 0.}, {0., 0., 0., 1., 
                    0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0.}, {0., 1.}}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 8} -> 
                   None, {"probabilities", 1, 10} -> 
                   None, {"probabilities", 1, 12} -> 
                   None, {"probabilities", 1, 14} -> 
                   None, {"probabilities", 1, 16} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.5056900757367843], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{6, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {
                    0., 0., 0., 1., 0., 0.}, {0., 0., 0., 0., 1., 0.}, {0., 
                    0., 0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {
                    0., 0., 0., 1., 0., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 6} -> 
                   None, {"probabilities", 1, 8} -> 
                   None, {"probabilities", 1, 10} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> LogisticSigmoid], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.23381356885288795`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0.}, {0., 1.}}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                   None, {"probabilities", 1, 12} -> 
                   None, {"probabilities", 1, 14} -> 
                   None, {"probabilities", 1, 16} -> 
                   None, {"probabilities", 1, 18} -> 
                   None, {"probabilities", 1, 20} -> 
                   None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "Convolutional"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 146], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.36050391236410706`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 10], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 11}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {11}, 
                    "$OutputSize" -> {10}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 2, 5}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{7, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 7, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 7, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {7, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 7, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{6, 7, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 6, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 7, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 6, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {6, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 6, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 6, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 3, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 6, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "Channels" -> 3, "$SpatialDimensions" -> {2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 30}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 30, "$InputDimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
             "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 2], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Ramp], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.4257677135725739], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{7, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 
                    0., 0.}, {0., 0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 
                    1., 0., 0.}, {0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 
                    0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
                 TargetDevice -> "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.824427111319187, 0.05826194938394207], "Accuracy" -> 
              PlusMinus[0.59310714470067, 0.03483061231945531], 
              "EvaluationTime" -> 0.00006748618090452261, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1173362, 
              "TrainingMemory" -> 166968, "ModelMemory" -> 96664, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5166097639383681, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.824427111319187, 0.04119741949453283]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.59310714470067, 0.024628962163966553`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6771399848455026, 0.04592838151586583], "Accuracy" -> 
              PlusMinus[0.6300219892541247, 0.036582183511491013`], 
              "EvaluationTime" -> 0.00008283936781609195, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.2615826, 
              "TrainingMemory" -> 235408, "ModelMemory" -> 96664, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6293321837802325, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6771399848455026, 0.032476270018791616`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6300219892541247, 0.025867510031586]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6134997391587744, 0.06132921132981753], "Accuracy" -> 
              PlusMinus[0.6812669987279566, 0.0731933965337458], 
              "EvaluationTime" -> 0.00026009756097560976`, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 1.5979484, 
              "TrainingMemory" -> 362184, "ModelMemory" -> 108360, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6902354286621849, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6134997391587744, 0.04336630121613681]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00026009756097560976`, "MeanCrossEntropy" -> 
             PlusMinus[0.6134997391587744, 0.06132921132981753], 
             "ModelMemory" -> 108360, "TrainingMemory" -> 362184, 
             "TrainingTime" -> 2.1172225411042946`], "Index" -> 8], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 3], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.36692930388027767`], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{6, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {
                    0., 0., 0., 1., 0., 0.}, {0., 0., 0., 0., 1., 0.}, {0., 
                    0., 0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 6}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {
                    0., 0., 0., 1., 0., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 4}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 6} -> 
                   None, {"probabilities", 1, 8} -> 
                   None, {"probabilities", 1, 10} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7948483855822952, 0.04691395353458255], "Accuracy" -> 
              PlusMinus[0.5428290629404586, 0.03532134311810848], 
              "EvaluationTime" -> 0.00010340829145728643`, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1712721, 
              "TrainingMemory" -> 168512, "ModelMemory" -> 143000, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5370621920329317, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7948483855822952, 0.03317317467657392]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5428290629404586, 0.0249759612394313]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.837378670846139, 0.07108567566355278], "Accuracy" -> 
              PlusMinus[0.5493743478617625, 0.03764647129632136], 
              "EvaluationTime" -> 0.00010170862068965516`, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.1574629, 
              "TrainingMemory" -> 160344, "ModelMemory" -> 143000, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5071915058068757, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.837378670846139, 0.0502651633069257]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5493743478617625, 0.026620075141373545`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010170862068965516`, "MeanCrossEntropy" -> 
             PlusMinus[0.837378670846139, 0.07108567566355278], "ModelMemory" -> 
             143000, "TrainingMemory" -> 160344, "TrainingTime" -> 
             0.8137207320000001], "Index" -> 9], 
         Association[
          "Value" -> "NeuralNetwork", "Options" -> 
           Association[
            "NetworkType" -> Association["Value" -> "FullyConnected"], 
             "NetworkDepth" -> Association["Value" -> 5], 
             "NumberOfParameters" -> Association["Value" -> 100], 
             "ActivationFunction" -> Association["Value" -> Tanh], 
             "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
             Association["Value" -> 0.5797524521188595], 
             "NetInitializationMethod" -> Association["Value" -> Automatic], 
             "OptimizationMethod" -> 
             Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
             MaxTrainingRounds -> Association["Value" -> 50], ValidationSet -> 
             Association["Value" -> Automatic], "EarlyStopping" -> 
             Association["Value" -> Automatic], TrainingProgressReporting -> 
             Association["Value" -> None], "Network" -> 
             Association["Value" -> NetGraph[
                 Association[
                 "Type" -> "Graph", "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                  Association[
                   "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{4, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0.}, {0., 1.,
                     0., 0.}, {0., 0., 1., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0.}, {0., 1., 
                    0.}, {0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                 Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
             Association[
              "Value" -> {
                LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                   None, {"probabilities", 1, 12} -> 
                   None, {"probabilities", 1, 14} -> 
                   None, {"probabilities", 1, 16} -> 
                   None, {"probabilities", 1, 18} -> 
                   None, {"probabilities", 1, 20} -> 
                   None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                 "CPU"}], "LossFunction" -> 
             Association["Value" -> CrossEntropyLossLayer[
                 Association[
                 "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                 Association["Version" -> "11.3.5"]]]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4345800833987106`, 0.258164101475553], "Accuracy" -> 
              PlusMinus[0.5103481276675296, 0.07070598811609471], 
              "EvaluationTime" -> 0.000771626, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1900581, 
              "TrainingMemory" -> 211360, "ModelMemory" -> 216000, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.29061416947117835`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4345800833987106`, 0.1825495868122955]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5103481276675296, 0.049996683667386015`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.269558912514663, 0.14221491556773747`], "Accuracy" -> 
              PlusMinus[0.6482051786050588, 0.036130284887424695`], 
              "EvaluationTime" -> 0.00016104540229885058`, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.3247912, 
              "TrainingMemory" -> 265104, "ModelMemory" -> 216000, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3327535913759206, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.269558912514663, 0.10056113118381946`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6482051786050588, 0.025547969450099836`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00016104540229885058`, "MeanCrossEntropy" -> 
             PlusMinus[1.269558912514663, 0.14221491556773747`], 
             "ModelMemory" -> 216000, "TrainingMemory" -> 265104, 
             "TrainingTime" -> 1.5152061959999998`], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 15]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 252428299756258]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843916502204272`17.330571064756462*^9, 
      "PreprocessorEvaluationTime" -> 9.41337890625`2.*^-6, 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 1.4928693927964647`, 
          "ElapsedTimes" -> 1.6398779, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 1.8660867409955806`, 
          "ElapsedTimes" -> 1.8261437999999999`, "ExperimentCounts" -> 4], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 2.3326084262444753`, 
          "ElapsedTimes" -> 3.4103013, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[252436889690850]], "ID" -> 
         252441184658146]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 22.1780839, "MaxTrainingMemory" -> 3878968, 
      "DataMemory" -> 806280, "FunctionMemory" -> 1266864, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 54, 10.3364066`8.766944546578154}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.783530887088933*^9, 3.784231345496173*^9, 
  3.7843914906893387`*^9, 3.7843916506043386`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"6053d979-823f-4080-a375-02d1459158dd"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{
  3.7842317682263746`*^9},ExpressionUUID->"ba063d57-bdf3-4ca0-bbd1-\
6510b425b1f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "ANNtraining", "]"}]], "Input",
 CellChangeTimes->{{3.783530846593285*^9, 3.783530847535745*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"1709d76b-d0f8-44ba-9c5b-8623c54af1d6"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"NeuralNetwork\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 7, "Length" -> 7, "InitialType" -> 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 7], "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape, 
                    TypeSystem`PackageScope`UnknownShape]], 7, {}], 
                    "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[186326085], "Type" -> 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 7], "HandleQ" -> 
                    True, "RowTarget" -> 20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[186326085]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Pane[
                    Annotation["NetworkType", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NetworkType"]]], "Mouse"], 
                    ImageSize -> {{105.60000000000002`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["FullyConnected", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NetworkType"]]], "Mouse"], 
                    ImageSize -> {{134.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation["NetworkDepth", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NetworkDepth"]]], "Mouse"], 
                    ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["2"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NetworkDepth"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation["NumberOfParameters", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NumberOfParameters"]]], "Mouse"], 
                    ImageSize -> {{172.8, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["100"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["NumberOfParameters"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation["ActivationFunction", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["ActivationFunction"]]], "Mouse"], 
                    ImageSize -> {{172.8, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    "Ramp", FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["ActivationFunction"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation["L2Regularization", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["L2Regularization"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation["OptimizationMethod", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"], 
                    ImageSize -> {{172.8, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    
                    Style[{"ADAM", "L2Regularization" -> 0.1}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"ADAM", "L2Regularization" -> 0.1}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 423241055][{
                    Key["OptimizationMethod"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key["OptimizationMethod"]]], "Mouse"]]}, {
                    Item[
                    Pane[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    "MaxTrainingRounds", FontFamily -> "Source Code Pro", 
                    FontSize -> 13, ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key[MaxTrainingRounds]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}], 
                    ImageSize -> {{60, Full}, Automatic}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["50"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    GeneralUtilities`Slice[
                    Key[MaxTrainingRounds]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 423241055][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    423241055]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    423241055][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "NetworkType" -> "FullyConnected", "NetworkDepth" -> 2, 
                  "NumberOfParameters" -> 100, "ActivationFunction" -> Ramp, 
                  "L2Regularization" -> 0.1, 
                  "OptimizationMethod" -> {"ADAM", "L2Regularization" -> 0.1},
                   MaxTrainingRounds -> 50], 
                 TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 7], 
                 Association["ID" -> 96993433314023]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "68.1266998727956547555`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "7.3193396533745804788`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5348802056604650135`3.",
                   "\", \"", "0.8276537917954481793`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5348802056604650135`3., 
                  ", ", 0.8276537917954481793`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.6134997391587744264`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.061329211329817529`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.4908413164991393685`3.",
                   "\", \"", "0.7361581618184094289`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.4908413164991393685`3., 
                  ", ", 0.7361581618184094289`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.28`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "18.5`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1.26`","\"MB\"","megabytes","\"Megabytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"22.1`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.22960389247463894`}, {
                    4.0943445622221, -0.4063063510217921}, {
                    5.786897381366708, -0.48857544000033315`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.4119254492685936}, {
                    2.302585092994046, -0.30625388320637853`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.22960389247463894`}}, {{
                    4.0943445622221, -0.4063063510217921}}, {{
                    5.786897381366708, -0.48857544000033315`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4119254492685936}}, {{
                    2.302585092994046, -0.30625388320637853`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.29043996254004345`}, {
                    2.302585092994046, -0.17225756216288388`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.4154668706918533}, {
                    4.0943445622221, -0.3972289853150486}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5938983531868608}, {
                    5.786897381366708, -0.39329602690607357`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5073717619981659}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5029627481962051, -0.22960389247463894`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5073717619981659}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5029627481962051, -0.22960389247463894`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5428290629404586}, {
                    4.0943445622221, 0.7138927035584292}, {5.786897381366708, 
                    0.6812669987279566}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.594910586298691}, {
                    2.302585092994046, 0.6513948755285504}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5428290629404586}}, {{
                    4.0943445622221, 0.7138927035584292}}, {{
                    5.786897381366708, 0.6812669987279566}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.594910586298691}}, {{
                    2.302585092994046, 
                    0.6513948755285504}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5211735975007962}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5428290629404586, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5211735975007962}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5428290629404586, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1279076673473718}, {
                    4.0943445622221, -0.4063063510217921}, {
                    5.786897381366708, -0.3936706302066645}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.19306654438431478`}, {
                    4.0943445622221, -0.38987725514666666`}, {
                    5.786897381366708, -0.48857544000033315`}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.22960389247463894`}, {
                    4.0943445622221, -0.17747889640915485`}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.36087218157932976`}, {
                    4.0943445622221, 0.2386695271627976}}]}, 
                    "NeuralNetwork"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5502288964053089}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5357669745325367, 0.36087218157932976`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5502288964053089}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5357669745325367, 0.36087218157932976`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.22960389247463894`}, {
                    4.0943445622221, -0.4063063510217921}, {
                    5.786897381366708, -0.48857544000033315`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.4119254492685936}, {
                    2.302585092994046, -0.30625388320637853`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.22960389247463894`}}, {{
                    4.0943445622221, -0.4063063510217921}}, {{
                    5.786897381366708, -0.48857544000033315`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4119254492685936}}, {{
                    2.302585092994046, -0.30625388320637853`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.29043996254004345`}, {
                    2.302585092994046, -0.17225756216288388`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.4154668706918533}, {
                    4.0943445622221, -0.3972289853150486}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5938983531868608}, {
                    5.786897381366708, -0.39329602690607357`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5073717619981659}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5029627481962051, -0.22960389247463894`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5073717619981659}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5029627481962051, -0.22960389247463894`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.5428290629404586}, {
                    4.0943445622221, 0.7138927035584292}, {5.786897381366708, 
                    0.6812669987279566}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    Line[{{2.302585092994046, 0.594910586298691}, {
                    2.302585092994046, 0.6513948755285504}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5428290629404586}}, {{
                    4.0943445622221, 0.7138927035584292}}, {{
                    5.786897381366708, 0.6812669987279566}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.594910586298691}}, {{
                    2.302585092994046, 
                    0.6513948755285504}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5211735975007962}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5428290629404586, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5211735975007962}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5428290629404586, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.1279076673473718}, {
                    4.0943445622221, -0.4063063510217921}, {
                    5.786897381366708, -0.3936706302066645}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.19306654438431478`}, {
                    4.0943445622221, -0.38987725514666666`}, {
                    5.786897381366708, -0.48857544000033315`}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.22960389247463894`}, {
                    4.0943445622221, -0.17747889640915485`}}]}, 
                    "NeuralNetwork"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.36087218157932976`}, {
                    4.0943445622221, 0.2386695271627976}}]}, 
                    "NeuralNetwork"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5502288964053089}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5357669745325367, 0.36087218157932976`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5502288964053089}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5357669745325367, 0.36087218157932976`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7835309049087296`*^9, 3.784231353687956*^9, 
  3.7843915011879373`*^9, 3.7843916560469823`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"074f7fa6-3b90-4c4a-a25e-c20df8f6a7c7"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{
  3.784231777828726*^9},ExpressionUUID->"2010a0f6-8d28-4da1-883d-\
3d4d134621f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ANNtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"ANNtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}, {
  3.783530849348737*^9, 3.7835308547615995`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"6d5cbe0a-1cff-4a32-9306-534fc473e939"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7314285714285714279`4.080468980712039", "\[PlusMinus]", 
                    "0.0336001519159240536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0274692, "MaxTrainingMemory" -> 
                    164992, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 53, 48.263938`9.436197612651245}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Method" -> "NeuralNetwork", "Network" -> NetChain[
           Association[
           "Type" -> "Chain", "Nodes" -> 
            Association[
             "1" -> Association[
               "Type" -> "Graph", "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], "Nodes" -> 
                Association[
                 "1" -> Association[
                   "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> CompressedData["
1:eJwBYgGd/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
BwAAAAsAAABHNRG9x5LCPnPCQT7UWFK9hmu1vdLneD7HCg692IXovbqIqT4e
LwQ+P9+nPEvU+b1TH3M+MERuPorvbz2C//4+Bfl0vjrtN76n8q0+BaBpPtEY
9j3D28S+v8VDPen9tT42hp0+LhSyvYA1Dr4cOPE+Ik6LPfcIxD5vO0M+BDn5
vYxBFT3SJxi+xYCivvDpdr2hRTo+uix5Po3r7r0R+qe+LBszPjNUHL5CUES+
JQeOPulKYL4xpCw+3VyAPawXJz4Fskq+thEyvrvJQL7sn4K+yotovUXAcT0a
iDg57hxZPm9tC718xHm+zT/HPuHPOr7YTEc+sXRXPuhsfL6J0G4+wfe6vknh
170B3ls9S2EyvudJOjt/HBK8MjKVPZiJyrwl6zk97nd2PCPWkb2UCLa+NVJP
vvcjnQI=
                    "], "Biases" -> 
                    RawArray["Real32",{-0.08734568953514099, 
                    0.10887273401021957`, 0.11195862293243408`, 
                    0.14214272797107697`, -0.0953497365117073, \
-0.11684299260377884`, 0.09651021659374237}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
                  Association[
                   "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0.}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "2" -> 
                  Association[
                   "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "5" -> 
                  Association[
                   "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                    Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "3" -> 
                  Association[
                   "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{0.028481096029281616`, 
                    0.0917222648859024, 0.20000037550926208`, 
                    0.8573093414306641, -0.005516251549124718, \
-0.09792474657297134, -0.10246496647596359`}, {
                    0.18772123754024506`, -0.3257341980934143, \
-0.4734325110912323, 0.5948416590690613, 0.5803463459014893, 
                    0.4012264013290405, -0.25578558444976807`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.12445598840713501`, -0.12445598840713501`}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                "Edges" -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                  NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                  NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}],
               "2" -> Association[
               "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                Association["Level" -> -1], "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                "Outputs" -> 
                Association[
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
            "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
           Association["Version" -> "11.3.5"]], "Training" -> 
         Association[
          "Optimizer" -> {"ADAM", "L2Regularization" -> 0.1}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "RoundLossList" -> CompressedData["
1:eJxTTMoPSmVkYGAwAuJZljHsSq8+2TNMkO03T/tkP8uypd572kf7s2t+e86+
8MH+rE+y0z/RD/Ymn8ueJ597Z39W5/7Mve1v7Rk+VOj+CH9jP6vz1jtG+9f2
JsI7yxKtX9nP0ozV9fB5aZ8e1p/UUvDC/qzIYd/MZc/tZ0V6ie16+8yeYcOr
Da5uz+xnCaYzvlz31D6dbdHPILWn9rNyb2lPWP3EftbL18U1tkC6dZL7yVuP
7c/eaY3e2/TY3qRfemqAyWN7BoubHYbvHtnP4j1WPm/9I/uzAk0rT5YDaYeT
bRxuj+yNs/8otko+sk//9rdm2seH9sbVqwOPnn1of/bERqN1a4H0HYOPFyY8
tE/fdWDdlTIgrZV1PjgeKP4n9CO3F0hdrtZ5s4f2DBr+5mGqQLpBo6BQFEhf
cLz0kA1ISzhL1f98APSfwU/dtw/sz8Ys+Xnp4QNgeDzOjboOpDdwGW48+8De
eLaOwNYjIP7DpUl7HgDDaXrC2i1AfWoym9rXAvkf13I/Xgbki5m92bgAqI4h
1erNrAf2AISwzyQ=
            "], 
           "ValidationLossList" -> {{5, 1.5112946816453976`}, {
             10, 1.4497726912021027`}, {15, 1.390558397074287}, {
             20, 1.3342148767290065`}, {25, 1.2807976879483582`}, {
             30, 1.2304356088291624`}, {35, 1.1833556434329675`}, {
             40, 1.1395497791925253`}, {45, 1.0990297112385836`}, {
             50, 1.0615654740938727`}, {55, 1.027010448391036}, {
             60, 0.9942521121809068}, {65, 0.963716107249564}, {
             70, 0.9356913042767923}, {75, 0.9101115586046052}, {
             80, 0.8869006016424723}, {85, 0.8656729173143298}, {
             90, 0.8463880002346573}, {95, 0.828785853004273}, {
             100, 0.8127842459599582}, {105, 0.7982289017159111}, {
             110, 0.7848653256969184}, {115, 0.7725928174141717}, {
             120, 0.7612680189539582}, {125, 0.750783692437167}, {
             130, 0.7409565865385288}, {135, 0.7317979406489401}, {
             140, 0.7232010678141092}, {145, 0.7150894683614677}, {
             150, 0.7074670779461762}, {155, 0.7002669056611401}, {
             160, 0.6934438175996955}, {165, 0.6869676141258405}, {
             170, 0.6808244529351287}, {175, 0.6749624160251446}, {
             180, 0.6693584216492516}, {185, 0.6639726125844279}, {
             190, 0.6587876174598932}, {195, 0.6538005544975095}, {
             200, 0.6490124279291045}, {205, 0.6444103842867271}, {
             210, 0.6399789519836099}, {215, 0.6356888454103348}, {
             220, 0.6315535779814331}, {225, 0.6275591322658013}, {
             230, 0.6236648751536802}, {235, 0.6198824076932303}, {
             240, 0.6162181335064221}, {245, 0.6126639663374849}, {
             250, 0.6092156342667888}}, "ValidationLossSeries" -> 
           TemporalData[TimeSeries, {CompressedData["
1:eJxTTMoPSmViYGBgBGIjIPacxBLqrPfDnr+39KaL0Xf7g6czNXfZf7O3M7m2
6WPEV/vk2oztqnVf7J+K7LG/u/6zfZzfwWC295/sRfbM6Zlh/cn+68KNugum
frQX3SMjovPng73JNfamRXkf7DUrLM+9vPAepF/z8LV39nrLHzzW+/jW3jm5
1m2R/Fv7bbm342oT34DM2TB982v7OU3TPeeIvraP9Tv4IrP1lf1r52TpEKZX
9sEfisLEu1/ab7QzeTxX9iVI/ySRnS9A+vb7xbywr81Y05rN9sK+iCtu2qut
z+39Dp5ufpz1HOT+CWUqz+0/FHH5Mz96Zv/rQsT/iYuf2U9S8VSZlvHM/lr7
MbGNBs/s98xpalz8+ynQ/19jAk4+BbnruNfMpyB1UUnZT+0z1vDXOds/tQcG
1dGTImB1yu9fP7F/8FRk29YjT+xzb29rY5r/BOQe5a1VT+wtWfWVJoQ/Abn/
5nrTJyD3Pf4m8sSeK86PS+DrY/s1/L0Lha89tm+aHizOv+Mx0L7oso+zHgPV
6ZzcWPfYHgAl5MuB
              "], {{5, 250, 5}}, 1, {"Continuous", 1}, {"Discrete", 1}, 1, {
              ValueDimensions -> 1, DateFunction -> Automatic, 
               ResamplingMethod -> {
                "Interpolation", InterpolationOrder -> 1}}}, False, 11.3], 
           "TotalTrainingTime" -> 1.2888567, "MeanInputsPerSecond" -> 
           12414.10313497226], "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 11.], "Key" -> 
            "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> "Perfect", 
            "Missing" -> "Allowed"]], "FeatureNumber" -> 11, "Options" -> 
         Association[
          "NetworkType" -> 
           Association[
            "Value" -> "FullyConnected", "Options" -> Association[]], 
           "NetworkDepth" -> 
           Association["Value" -> 2, "Options" -> Association[]], 
           "NumberOfParameters" -> 
           Association["Value" -> 100, "Options" -> Association[]], 
           "ActivationFunction" -> 
           Association["Value" -> Ramp, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], "Dropout" -> 
           Association[
            "Value" -> 0.4257677135725739, "Options" -> Association[]], 
           "NetInitializationMethod" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> {"ADAM", "L2Regularization" -> 0.1}, "Options" -> 
             Association[]], MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           ValidationSet -> Association["Value" -> {
               Association["Input" -> CompressedData["
1:eJyNV2dQlGcXpSgrCCQUIZSIioDdCIKSGJ5dFVFUVMQC39CkiSIRRSFIjFTB
0CRoRIpSlCYGadIvgsACUpalV1ma0hdYyiISZ/I9b2Z2Zyf58c7778yd85xz
7rnrL/xkaCPAx8e368u3+ss3KFHgXWjCQAN//+G4doG9h3YX2m5oeFLJtRVs
GDNh1SqdUJ1maHZVqwzmVKU3Xil+C4Wllt5p4VTIPjLpb0HJgTvUm23KrYko
IewROpAMiBP35C+hHmw2G1z4GJm6Dm1wYtn86/Fz3SDHGnmd9bkQRWuOx7aP
TyPF2Zz86q/G0PWwujW9qAVJmMT+kNExgCZcPR8KOHdw4brfCQqLUqKho3px
G15ENMGz3zI2WAc3wTc2VoU6o++BaZgwqRFVDzc63NSrcupgt6KuUa5iFwrI
b6krVZxDbOY+h2u2bLTo6hSrNrAI7L//iGIytmj5jIEu7ZuZ2QsNUH+qa6vS
VhqsMC8nya1thd9vhcwVSdSAHqNi/crGBgjMCe+Vdp0h5t1i6jD25scK4Jx3
yVFZ7fGLPoIHzK9DSkdiiEEL6J5qEJP5SIU7N6TMhL+qh3hRk5ZVVjQk8cce
qVBjOk9+k7S8B0+nf0DZw17G5hl0CElcG+37pgXKp9VVJ/TzQUTETmjhaBXc
FSb9aD+aARfP6gpOgT2Q3rsEsHqG4WZVbGhNEJNr3rWK8ipHlz8BqVFjQDGl
H6Xu3xGZVzSKIvzUM+6FvAJF49mlK3ZDyONGuBvpVjlinzKtpLr3In3nxmyD
lUxkZBu8I+/2ENe8w6m1OxvmFwDzW2nfb7HArAHJl8fffZvdCZrWSvddPZoh
LOyy0+O2ergtv4epP8FCtQIdH/buXkIK1HG/3JhJLtyRvBhqhOAygYv14DZu
0NN4Kw10ZIxDP8XlwyC/ZErDjiqoEK7cZSlagSRzn5PY7DEk3PWAvcabxYVr
czRPIiD3I8RfiHtS75GEAn/XPJdbHI/IRy493bdxFqk7/rr1nmkpmFWfldE7
lw6f19s9WVVFA//b++f7oxfgzMzkDd/Ti8Cps+NWoyfsBiaBEVcyMu/VQuih
bkehV/mmN2hI2zKh7nwD9KWMobtONNBaoY+MDyyhYw5TcscKSWTbb8Lfl/qu
IHPi3jbNyX2oXQ5Be2pbik6/hcMFlu5byopBoEnPSODNU7TB493LUVY9KJvL
D/gEvYPki72v5yP5i488PJCS/XwRRC/PURjnP3LpAfOwqk3IT/MaP7nbO8T8
yVUB8n3x6f1+ualoPsDPSsNKjrz4U7PihBaJLNr6Nl592yR4p91QNawfBOwL
znmxLx6y1O82BDeDW5m/XNJ0G+zt3jwr9Ac/uW2/Qci6NXSU3p9Rr9AXTvhN
9qpt0EPncvRv83L6Tas8omxzYRu4va3vXbhAB/a6S0VWC1WQHCWmJnZ4GLXI
nj0gLJHJkwc8L2dOYh/jfBiprk30OP1P7mBf8NKvckXkzoMXp7nyrCF916R7
PQO61imYXZZuhLXxsosMHRrsGTXYsmA/RuRvkdrKAlESt35dmlbfi88e5sr1
1Md9s1crB4B619OrxL4I9Ohi4gufqRC0y1Ax16sL5ioztCX1qoBX7jBtNtLD
HFgoQSRhcWh4ClXUfIg0i5hFBzXy+R36V5OxHjrkHJEzdTsZ8+D/ldvUo4lx
sO05smKL0ywXv7JFUR06m5oQ57ttdpHmV1FpAvSLTXtnWSN4tjM7LWIa4FDs
i53K7xZRTVyz4pQ0i2dO8vlXnt9eMsalhwsqfsk1ojlAJzVJk+qboLBB4VGB
YwNUR/qyzrwSIt+X74wQ2bdM5Bmnfr26RbqTZueh5KWTnINFO4GrLzHf2K7d
DLahB0/sam+GhwtHJpmX6VCT1Nn1/nkLwS8vX+B3m29/KX7tcgnhYxGy3+c9
BivJWfE7Y7S6c2CiBH02tMpBiT6SkqmObMA+xrnOiasg4Dz9+uMUFw8yqi+T
paYZhH4tCjYoaY/Xglm309evu+aJvflv+xjzgPd8eaK9j+AQDXBOhvm8Mg1a
UQGN5t/3iQjPAtYDLx7wu/HyG97zvXvOpCqLlMFkxHJptPw0kOIYmTIXuoDX
vDNJ7GGxHXTgC5cq8klohDzHwwkUUzp8f1Bo5Nc/m77wmKJMEaFDXcCDbbPP
6yEr9E36NclJwse8cDWGKVmdhSPAyUOy5d6tz326iB7V/OLmg0m/WsJvuD+M
CvV31R5e5sLdXKYuxhDgK1YKsg6RrKYR+UCfuax6Pn6ayHWcDzgn8X7j1Use
vVB3/CFriOAB56+ajr2mSe8oOv0n0+GZAQ2MIynZOqI0Is+wfnnlZKZ6Wkzw
EJPAxb3Ev8Lo3OTVTrBzc3odmJVJ7CHsC5zrvPiVkFKg6cI4Om+dl1TJ+oC0
M13Nkp6NILyHogYzp6KYn1B+6oRV/0EBMs51PC+vvoN9cfL4No1nolUwvVP8
UmZgJdH7vrnoa+P3qgHkq59+VNMtgcdnP9G6+aYJX/DKhy0qcj+fRB1c+j1n
8Wt4D60d8J6/kh9eWdfMm19ee57Tx6zfqppNu3thtqX9+nelNTAWD1E6va+J
XoL3xfcbXVId4+g8+w7JXOFODGMJLaX3HGvR/4x27/tWUsoiFFLGJknZgQrk
NV6Jxw5dlCSf2yS9OvDWMOE3XvmL9cCZk8G3Lx2WSHgP3l0yW80SaCDiA0On
nOshYJtii/VvK4qry3QlTLKXwXtkx+nr7n1c74b1EK2pesrTRJDc8fvai7IC
QuTYpvYBz6APqKAnUfGkcjkoPTAdaravIHRGtaXoSv0xR/QzTlx8B3D2s8XW
a8JnOx8hzn2BcTEPRp6GhYabenjOO6H3w3fVGlNo+//GDsaWTqFoE1Zf581l
pO5rWLrdswldXZd/VvXJEMJ7XugEOZQSzOKpX146S5b56V7e+rcQSJZ1f/YO
QD569P5Kk5dE38H6vX7N+RfBezNc75a21mtpUCYTlYo6ej1oFCSP+1BYDpYk
statho06xsWA59Xnl2aKabIQ7n1Yv7zuAHwXcs57pplvkOrsBfOzV2ZUXJ5C
hXdwy3e12QQP+G7hxW/hXGuXgu0UEjflvx1q1EHkrxFD2tm/pxteTLGepOfT
CZ39V1ysX9xT8bzppmI3DS81QfQiw0/QtRFtX3d4r1BpHvqvPUp8wflJelI/
6hCiUH42ViFbu8XaWVOGUOty24YbtZUI328h+TPmPT1vCB//2/1WJZZSNZw2
QNwt4r6f1O6qVCOheB/L+HcjiCp0wepQWiU60BmZozbx5z934f/1yyt38N3C
+W5ZqpR9YcV5COsM3y34jhUOaLJfJzaNDiXUJN/qY3PxgHvfzhOrt36gA+pw
b7y3ao6GLGKkdGRtBlHY0eEKF2oiaGRmse12U3nm5F9MOGgJ
                 "], 
                "Target" -> {1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 
                 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
                 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1}], "Interval" -> 1}, 
             "Options" -> Association[]], "EarlyStopping" -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           TrainingProgressReporting -> 
           Association["Value" -> None, "Options" -> Association[]], 
           "Network" -> Association["Value" -> NetGraph[
               Association[
               "Type" -> "Graph", "Inputs" -> 
                Association[
                 "Input" -> 
                  NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                  "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                Association[
                 "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                "Nodes" -> 
                Association[
                 "probabilities" -> 
                  Association[
                   "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{7, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 7}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "loss" -> Association[
                   "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                "Edges" -> {
                 NeuralNetworks`NetPath[
                   "Nodes", "probabilities", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "probabilities", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Target"] -> 
                  NeuralNetworks`NetPath["Inputs", "Target"], 
                  NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "loss", "Outputs", "Loss"]}], 
               Association["Version" -> "11.3.5"]], "Options" -> 
             Association[]], "NetTrainOptions" -> 
           Association[
            "Value" -> {
              LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
               TargetDevice -> "CPU"}, "Options" -> Association[]], 
           "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
               Association[
               "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                "Parameters" -> 
                Association[
                 "TargetForm" -> "Index", "$InputDimensions" -> 
                  NeuralNetworks`ListT[
                   NeuralNetworks`NaturalT, NeuralNetworks`SizeT], "$Classes" -> 
                  NeuralNetworks`SizeT], "Inputs" -> 
                Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                "Outputs" -> 
                Association[
                 "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
               Association["Version" -> "11.3.5"]], "Options" -> 
             Association[]]]], "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.6134997391587744, 0.06132921132981753], "Accuracy" -> 
            PlusMinus[0.6812669987279566, 0.0731933965337458], 
            "EvaluationTime" -> 0.00026009756097560976`, "TestSize" -> 82, 
            "TrainingSize" -> 326, "TrainingTime" -> 1.5979484, 
            "TrainingMemory" -> 362184, "ModelMemory" -> 108360, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.6902354286621849, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.6134997391587744, 0.04336630121613681]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6812669987279566, 0.051755547027087595`]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 100, 
              "ActivationFunction" -> Ramp, "L2Regularization" -> 0.1, 
              "Dropout" -> 0.4257677135725739, "NetInitializationMethod" -> 
              Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> 0.1}, 
              MaxTrainingRounds -> 50, ValidationSet -> Automatic, 
              "EarlyStopping" -> Automatic, TrainingProgressReporting -> None,
               "Network" -> NetGraph[
                Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                   "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]],
                  "Nodes" -> 
                 Association[
                  "probabilities" -> 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{7, 11}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 11, "$InputDimensions" -> {11}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> RawArray["Real32",{{1., 0., 0., 0., 0., 0., 
                    0.}, {0., 1., 0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 
                    0., 0.}, {0., 0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 
                    1., 0., 0.}, {0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 
                    0., 0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {7}, "$OutputSize" -> 7, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{2, 7}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                   "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "loss", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                   NeuralNetworks`NetPath["Inputs", "Target"], 
                   NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                Association["Version" -> "11.3.5"]], 
              "NetTrainOptions" -> {
               LearningRateMultipliers -> {{"probabilities", 1, 4} -> None}, 
                TargetDevice -> "CPU"}, "LossFunction" -> 
              CrossEntropyLossLayer[
                Association[
                "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "TargetForm" -> "Index", "$InputDimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                   "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                 "Outputs" -> 
                 Association[
                  "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                Association["Version" -> "11.3.5"]]}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}]}], 
           Association["ID" -> 252432594723554]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "Convolutional"], 
                "NetworkDepth" -> Association["Value" -> 3], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Ramp], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.3247607543475375], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 10], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 11}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {11}, 
                    "$OutputSize" -> {10}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 11}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 2, 5}, NeuralNetworks`RealT]]],
                     "5" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 4, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 4, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 4, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4, 2, 5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 4, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 3, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 4, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 3, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 3, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 3, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 3, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 30}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 30, "$InputDimensions" -> {30}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
                "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8799346220916948, 0.04656364020745896], 
                 "Accuracy" -> 
                 PlusMinus[0.30242733558832113`, 0.06471261839569287], 
                 "EvaluationTime" -> 0.000465094, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.113335, 
                 "TrainingMemory" -> 190016, "ModelMemory" -> 199704, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4857099655934054,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8799346220916948, 0.03292546574742481]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.30242733558832113`, 0.04575873129593174]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6661060738879933, 0.006074014751314758], 
                 "Accuracy" -> 
                 PlusMinus[0.7138927035584292, 0.034487270739457586`], 
                 "EvaluationTime" -> 0.00017374741379310346`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1928416, 
                 "TrainingMemory" -> 273752, "ModelMemory" -> 199704, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6472394925226681,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6661060738879933, 0.004294977019681786]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7138927035584292, 0.024386183004486854`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6745762046790674, 0.015724488585233905`], 
                 "Accuracy" -> 
                 PlusMinus[0.6451224204147037, 0.0750403221509861], 
                 "EvaluationTime" -> 0.0006295060975609756, "TestSize" -> 82, 
                 "TrainingSize" -> 326, "TrainingTime" -> 0.5133752, 
                 "TrainingMemory" -> 379840, "ModelMemory" -> 209056, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.637305355891428, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6745762046790674, 0.011118892509309353`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6451224204147037, 0.053061520655385365`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0006295060975609756, "MeanCrossEntropy" -> 
                PlusMinus[0.6745762046790674, 0.015724488585233905`], 
                "ModelMemory" -> 209056, "TrainingMemory" -> 379840, 
                "TrainingTime" -> 0.7558413852760737], "Index" -> 1], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Tanh], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.6468867345872592], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{7, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {7}, "$OutputSize" -> 7,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {7}, "$OutputSize" -> 7,
                     "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 7}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 4} -> 
                    None}, TargetDevice -> "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 2],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 5], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Ramp], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.43600587256377843`], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                    None, {"probabilities", 1, 12} -> 
                    None, {"probabilities", 1, 14} -> 
                    None, {"probabilities", 1, 16} -> 
                    None, {"probabilities", 1, 18} -> 
                    None, {"probabilities", 1, 20} -> 
                    None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 3],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 4], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Tanh], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.6971892060231675], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{5, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {5}, "$OutputSize" -> 5,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0.}, {0., 1., 0., 0., 
                    0.}, {0., 0., 1., 0., 0.}, {0., 0., 0., 1., 0.}, {0., 0., 
                    0., 0., 1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {5}, "$OutputSize" -> 5,
                     "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 5}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0.}, {0., 1., 0., 0., 
                    0.}, {0., 0., 1., 0., 0.}, {0., 0., 0., 1., 0.}}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 5, "$InputDimensions" -> {5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0.}, {0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}}], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 8} -> 
                    None, {"probabilities", 1, 10} -> 
                    None, {"probabilities", 1, 12} -> 
                    None, {"probabilities", 1, 14} -> 
                    None, {"probabilities", 1, 16} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 4],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 3], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Ramp], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.5056900757367843], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{6, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {6}, "$OutputSize" -> 6,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0.}, {0., 1., 0., 
                    0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {0., 0., 0., 1., 
                    0., 0.}, {0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 6}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0.}, {0., 1., 0., 
                    0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {0., 0., 0., 1., 
                    0., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 6} -> 
                    None, {"probabilities", 1, 8} -> 
                    None, {"probabilities", 1, 10} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 5], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> 
                Association["Value" -> LogisticSigmoid], "L2Regularization" -> 
                Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.23381356885288795`], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0.}, {0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                    None, {"probabilities", 1, 12} -> 
                    None, {"probabilities", 1, 14} -> 
                    None, {"probabilities", 1, 16} -> 
                    None, {"probabilities", 1, 18} -> 
                    None, {"probabilities", 1, 20} -> 
                    None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "Convolutional"], 
                "NetworkDepth" -> Association["Value" -> 3], 
                "NumberOfParameters" -> Association["Value" -> 146], 
                "ActivationFunction" -> Association["Value" -> Tanh], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.36050391236410706`], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 10], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 11}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {2}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 1, "$InputSize" -> {11}, 
                    "$OutputSize" -> {10}, "$MXPoolingConvention" -> "valid", 
                    "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 11}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{1, 10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {1, 2, 5}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1, 2, 5}, NeuralNetworks`RealT]]],
                     "5" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{7, 1, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 7, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 1, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 7, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {7, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 7, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7, 2, 5}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{6, 7, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 6, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 7, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 6, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {6, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 6, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6, 2, 5}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 6, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputChannels" -> 3, "KernelSize" -> {1, 1},
                     "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 6, 
                    "$GroupNumber" -> 1, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 3, "$InputSize" -> {2, 5}, 
                    "$OutputSize" -> {2, 5}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3, 2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "Beta" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "MovingMean" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> False, "Channels" -> 3, 
                    "$SpatialDimensions" -> {2, 5}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3, 2, 5}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3, 2, 5}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 30}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 30, "$InputDimensions" -> {30}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {}, TargetDevice -> "CPU"}], 
                "LossFunction" -> Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 2], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Ramp], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.4257677135725739], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{7, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {7}, "$OutputSize" -> 7,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0., 0.}, {0., 1., 
                    0., 0., 0., 0., 0.}, {0., 0., 1., 0., 0., 0., 0.}, {0., 
                    0., 0., 1., 0., 0., 0.}, {0., 0., 0., 0., 1., 0., 0.}, {
                    0., 0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {7}, "$OutputSize" -> 7,
                     "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{7}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 7}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 7, "$InputDimensions" -> {7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{7}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 4} -> 
                    None}, TargetDevice -> "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.824427111319187, 0.05826194938394207], 
                 "Accuracy" -> 
                 PlusMinus[0.59310714470067, 0.03483061231945531], 
                 "EvaluationTime" -> 0.00006748618090452261, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.1173362, 
                 "TrainingMemory" -> 166968, "ModelMemory" -> 96664, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5166097639383681,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.824427111319187, 0.04119741949453283]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.59310714470067, 0.024628962163966553`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6771399848455026, 0.04592838151586583], 
                 "Accuracy" -> 
                 PlusMinus[0.6300219892541247, 0.036582183511491013`], 
                 "EvaluationTime" -> 0.00008283936781609195, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.2615826, 
                 "TrainingMemory" -> 235408, "ModelMemory" -> 96664, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6293321837802325,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6771399848455026, 0.032476270018791616`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6300219892541247, 0.025867510031586]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6134997391587744, 0.06132921132981753], 
                 "Accuracy" -> 
                 PlusMinus[0.6812669987279566, 0.0731933965337458], 
                 "EvaluationTime" -> 0.00026009756097560976`, "TestSize" -> 
                 82, "TrainingSize" -> 326, "TrainingTime" -> 1.5979484, 
                 "TrainingMemory" -> 362184, "ModelMemory" -> 108360, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6902354286621849,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6134997391587744, 0.04336630121613681]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00026009756097560976`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6134997391587744, 0.06132921132981753], 
                "ModelMemory" -> 108360, "TrainingMemory" -> 362184, 
                "TrainingTime" -> 2.1172225411042946`], "Index" -> 8], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 3], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Tanh], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.36692930388027767`], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{6, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {6}, "$OutputSize" -> 6,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0.}, {0., 1., 0., 
                    0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {0., 0., 0., 1., 
                    0., 0.}, {0., 0., 0., 0., 1., 0.}, {0., 0., 0., 0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {6}, "$OutputSize" -> 6,
                     "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{6}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 6}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0., 0., 0.}, {0., 1., 0., 
                    0., 0., 0.}, {0., 0., 1., 0., 0., 0.}, {0., 0., 0., 1., 
                    0., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 6, "$InputDimensions" -> {6}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 6} -> 
                    None, {"probabilities", 1, 8} -> 
                    None, {"probabilities", 1, 10} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7948483855822952, 0.04691395353458255], 
                 "Accuracy" -> 
                 PlusMinus[0.5428290629404586, 0.03532134311810848], 
                 "EvaluationTime" -> 0.00010340829145728643`, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.1712721, 
                 "TrainingMemory" -> 168512, "ModelMemory" -> 143000, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5370621920329317,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7948483855822952, 0.03317317467657392]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5428290629404586, 0.0249759612394313]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.837378670846139, 0.07108567566355278], 
                 "Accuracy" -> 
                 PlusMinus[0.5493743478617625, 0.03764647129632136], 
                 "EvaluationTime" -> 0.00010170862068965516`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1574629, 
                 "TrainingMemory" -> 160344, "ModelMemory" -> 143000, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5071915058068757,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.837378670846139, 0.0502651633069257]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5493743478617625, 0.026620075141373545`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010170862068965516`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.837378670846139, 0.07108567566355278], 
                "ModelMemory" -> 143000, "TrainingMemory" -> 160344, 
                "TrainingTime" -> 0.8137207320000001], "Index" -> 9], 
            Association[
             "Value" -> "NeuralNetwork", "Options" -> 
              Association[
               "NetworkType" -> Association["Value" -> "FullyConnected"], 
                "NetworkDepth" -> Association["Value" -> 5], 
                "NumberOfParameters" -> Association["Value" -> 100], 
                "ActivationFunction" -> Association["Value" -> Tanh], 
                "L2Regularization" -> Association["Value" -> 0.1], "Dropout" -> 
                Association["Value" -> 0.5797524521188595], 
                "NetInitializationMethod" -> 
                Association["Value" -> Automatic], "OptimizationMethod" -> 
                Association["Value" -> {"ADAM", "L2Regularization" -> 0.1}], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                ValidationSet -> Association["Value" -> Automatic], 
                "EarlyStopping" -> Association["Value" -> Automatic], 
                TrainingProgressReporting -> Association["Value" -> None], 
                "Network" -> Association["Value" -> NetGraph[
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "probabilities" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{4, 11}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 11, "$InputDimensions" -> {11}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}, {0., 0., 0., 1.}}], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {4}, "$OutputSize" -> 4,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0., 0.}, {0., 1., 0., 0.}, {
                    0., 0., 1., 0.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{3, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "22" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    RawArray["Real32",{{1., 0., 0.}, {0., 1., 0.}, {0., 0., 
                    1.}}], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {3}, "$OutputSize" -> 3,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "21" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "23" -> 
                    Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{2, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {2}, "$OutputSize" -> 2,
                     "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "9", "Outputs", "Output"]}], "2" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{11}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "loss" -> Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 2], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[2]]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "probabilities", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}], 
                    Association["Version" -> "11.3.5"]]], "NetTrainOptions" -> 
                Association[
                 "Value" -> {
                   LearningRateMultipliers -> {{"probabilities", 1, 10} -> 
                    None, {"probabilities", 1, 12} -> 
                    None, {"probabilities", 1, 14} -> 
                    None, {"probabilities", 1, 16} -> 
                    None, {"probabilities", 1, 18} -> 
                    None, {"probabilities", 1, 20} -> 
                    None, {"probabilities", 1, 22} -> None}, TargetDevice -> 
                    "CPU"}], "LossFunction" -> 
                Association["Value" -> CrossEntropyLossLayer[
                    Association[
                    "Type" -> "CrossEntropyLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "TargetForm" -> "Index", "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$Classes" -> NeuralNetworks`SizeT], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Target" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`IndexIntegerT[NeuralNetworks`SizeT]]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], 
                    Association["Version" -> "11.3.5"]]]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.4345800833987106`, 0.258164101475553], 
                 "Accuracy" -> 
                 PlusMinus[0.5103481276675296, 0.07070598811609471], 
                 "EvaluationTime" -> 0.000771626, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.1900581, 
                 "TrainingMemory" -> 211360, "ModelMemory" -> 216000, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.29061416947117835`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4345800833987106`, 0.1825495868122955]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5103481276675296, 0.049996683667386015`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.269558912514663, 0.14221491556773747`], 
                 "Accuracy" -> 
                 PlusMinus[0.6482051786050588, 0.036130284887424695`], 
                 "EvaluationTime" -> 0.00016104540229885058`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.3247912, 
                 "TrainingMemory" -> 265104, "ModelMemory" -> 216000, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.3327535913759206,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.269558912514663, 0.10056113118381946`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6482051786050588, 0.025547969450099836`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00016104540229885058`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.269558912514663, 0.14221491556773747`], 
                "ModelMemory" -> 216000, "TrainingMemory" -> 265104, 
                "TrainingTime" -> 1.5152061959999998`], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 15]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 252428299756258]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843916502204272`17.330571064756462*^9, 
         "PreprocessorEvaluationTime" -> 9.41337890625`2.*^-6, 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 1.4928693927964647`, 
             "ElapsedTimes" -> 1.6398779, "ExperimentCounts" -> 4], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 1.8660867409955806`, 
             "ElapsedTimes" -> 1.8261437999999999`, "ExperimentCounts" -> 4], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 2.3326084262444753`, 
             "ElapsedTimes" -> 3.4103013, "ExperimentCounts" -> 2]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[252436889690850]], "ID" -> 
            252441184658146]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 22.1780839, "MaxTrainingMemory" -> 
         3878968, "DataMemory" -> 806280, "FunctionMemory" -> 1266864, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 54, 10.3364066`8.766944546578154}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,
      1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 
     1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 
     2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 
     2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJxdlWk4FIwahlFJtNiSz0ELWo6yZiu7LJGQpRDSniWfKEL4iqKmj5IscSqR
siZL9meyRLJ/trGOMQyDGIOxO87f8+O9nj/Pj/e9rvu63/2XPc5d42BjY8ve
mP9l2L2gnBNe1UjUmE0Qpq1C/2dMUHwwFewjqWb5TBqGSNbO+evjKNh0wfGW
7iDEUh5ySGTl4NLF//DyfdpCdOVsptJd6tHQ8E9ve+si1HX1hLW9KFC+5mPj
f4MOnTSzlaexLRC7fYjF3jSP8iTJWeIpBnZF+0nVRXXjsAf70dW4eizvfa6t
XbKIADpbGNX6PY6l71pQVuUhZrwibxedqcDvb05zcaXrGIzj+aycRoKHRfvI
20IGPuSayo79asJefp+4NycWoP7nl2dCJTTwJGVTq3Op0JS7mZf7vhfJ2nJ6
zebToL2NWSMItEI/kvzGwmMekl91GGTaEPatj3Srvx/FA7/Xn2pZwwgV3psr
cm0EBdy3XkqPjOMJP+vXN6tBVKkmpA7IU6DqwPlLoJSOnjhtjyfeXfi8fRuP
gt0Mzp5cXMkSGQOrVsnoSfAQhCPmVa5MkKFsEsJ8eX8CRs3RpU3S3bCpcl0r
8mFA0HazyZUmElizum2kFAZiWpZMzvoMw9Tu5+drYyNIUxRMPr3WjFK29WFz
Exau5Ri60sl9CDy1GnXo7ylcmcxt8yPXw7LR0kgrdhFlJ8J/hwh0wj81XTNU
nAmeEhcD56gJeGe9n73TTUaiRWH+zsoylFqHzwtmshMVr7+RKPOpQ5ObqtpY
5xIekLzjswKbkea7sI29gIVMzb9Sy5OoIIrzr3Y10FBaygzpduvAmEJSoEQw
E/mx383BasAnI5LYQb5FGFTWkFfnp9Gm9MhUU7kHyY5pp7U+DSK4vtrazmsc
3R8PkVPTN7iI6In31aRg6UWvL2uBgUiuhYpvR0l47tCi+jiTDnLoYYFtGhRY
xQfzctgMgeGwj/O96RjE/SaNTxX0oqqn9NE3w2lYHPh7apvWEC7Hc4ZfvTWG
SZelOHH3FmRz+NKDGfPYcWdVSXOkDs3z0h3mCUuYqqvjVq8hI8y+o/lo9gQ6
Y0RtBZVp6COcZWbIDIN/8mSvi3ELrstk77PdsXF/4JDGinw3vJsdzTK8Gfjk
ezi4RI0GuaHZd1rSw7gQpqcZVdSFCkvdg7ZKMxjuaw5+6V6Bc1/5RtkE2IgT
W/4aC7vbjjgO3yL7PbPo1hDQM7ahgovpXy0sMQqv/MU85/g6FKuzD4tWL6GI
Ty7oJ2McmSz78UtnBtF4/0KO/+4h+Kn/4uRNGEP8fbGawpVpiD5fDxP9dw82
R+b6pTU1IXDELpqhuoDK1//2fBEwjMQ3vHLDQyPQ1M++KlpOQbDHSk4AFx0m
suKTmRc29vE2Znt8ZBZsLRYCiuWjcDOeN1lsHIKko58hn0srQsN3x+HYPGyT
f31fPFwLa5cq/r4jK8gpM30mtOk3KA3cdhU/B7C1UHFAvIwMp7d7svrLJnDY
oi5AIaIXzgTPdE7badSFe2s2fumDRUBmfXnBFLzFI09l8vyAKqmXLhe8iofR
Rm3JsXTELa2+EDWl4KebLbunTz38xc00n9Uvwstg6t3AwgAuiYaNxPVP4l9W
obMqD7phHP+4vtSMgdLO/IFx/yqMTkSVNb9aw+lL+B4VQMFZLydquD0d8709
erOkDhD6Lem9Wkx0/dm2cwf7KNoi1Z8ne1NR4xQ+FpJOxJGcJ3mxrWxELgOp
pzGGY0jL4w/cYj+ERy/slraVk7BjSSQzNouB89p10UvtdJTteSwmLE7Bh4zE
qi93KlFobqeqZ7uOkFMVdw3pNDS6z2wTDKciJ4mgff3YIFJ0PHrkxCbgskUj
2fhkMbbZrak2vecgtvjri/5j3IVN5CTPL3/OwOa7TKjQyWpEOBMmfuxYQ+dZ
d1kPtbvY2uhr83LXbuJRm/RFHf0h2BgmtPc4j4Fb2MhteGCjn7LqfTtxFcW1
Xc6X14bB4Tb52dVxBOKxrg0/VvvgOOm0b+7uFNp2Fc0IBQxiRoVllpc9jvhW
Ym+vQSsIa69YukbzcHzLcuQ0igHn/oO/gi7uJB6+aUMNeUcBLVzjfsMxOmg1
/c/as7pwnc/j6vaTMzDV/JB036Mf9XaEzuI9U1jkMxsvi/kHQvqlZSGWc3gY
J2vylTENrbOHzvrp9MB2rvBBikQPJEQNK2vWpyESWDLAFTSKEw8omcFbqLDK
fJlfqdED9fK2HXeY02B17r09YN4PXvbl2nG5KVyIV4u4HtKLP64YO7Y5TKPZ
MJHqdGcc24/EFrI2PCP4kjkdcTMV6pvVrGT7uIiJBSfSzDY8reBQ0Ziz4e3e
1rzqrZWN+MTJKXny6wIOUUV9VDb+UJCNgjyXPgPLak7HlbxqcUPaXuzB6jLm
jlzNNz1PheFzh4+z+0fhX58a2ucwijqVaZbXASqsy4/YJsaRkTTC0dnEmEDp
X1P6tdeHIF1rLX1PbQz3xqXkY5VISAsUSneYZeCJthfBUaYbUmd2cd27x8CF
gVbb6jUq2GS8BW/fokE29MzYoEQBRL1vTC1PbCIuiOYacIZ1QPyAHN+6BxPv
SG2t8ndbsTLi7ukiNQ/Sh2+Unx8pcJQ+wD0gRceZMNNB+Q9EqPh5aZ7vYCO6
RyVodA9/h4qEuH6KMRuR26kmw6yQilGWgoxIAQ2XwLwNvxE0ZF3K9qcMI2dr
n+5ekSRY7eIt3jfITeT+fsHTYlMDuCL4Cnc/WURW63r/mgMdGVtld33yo+B3
6/Jllcjf+KF1y6VYaACk8TDeaLNmnLJ9mmXWz0KS/fr0K2syFGRDI0ZtJjHi
uNJgqdmF2Msu/D4+MyD88VrHoLMTga8evVnInkFMaXRpnHwNtuoRKvgqVsC4
IvOlaKkb5yuTX6kKMCBys4rPbqoDp2es7rspMhHeWfZUuaYFUcSoD3Zp8zB7
1Z4m3NwI5+0JwWoZC5gqbvoodmIUR5SXd9J0qLgZVvKx2qQNjBvjIi5ds3hz
XVIrRpgE9/pIM/dNM+iOpuq5rXZj+bXU1Sk+BjQOtlR8DKWA+Dika8aMjpSO
wuOkDzTkuPvmLNRSkdA9LaHTTYJZ8DepK+8Y0Gl7RttxuhXqjAPF8QbzGN1p
MfjIchSxrrf3hUlT8TT85rA8Zxju2CpoaDfyEf+2V5r1i6yBOS3PhfJ4BUuv
dw7qCJDhefyE5sOSSWQ7KhyIfRKDGEL6182GO4m5j4OqPke2gPNcjbJG+zzW
9luOVuh1IEpO/G5RLBM/fvvzZz8i4bfexUOq9Qz8Pz9SKiX9eycGIV3J58or
PI7hm6tFBMVISPkW5Cwl8hKRkjyZ8bEI+ZJK+y82cBDPWQkxJd/UQcfDWye3
agm8HGG9z5c7kOXUlGl3lAlvs+xFjcsU8Hydczz/gA4jjT13gqqm0GLw3jnm
XR/YIpnHn78ohczLtXGlFXYiIbyr47XkD/x5zz7+s8cqtj7VzSMYjOCA4mIa
j9AGh3OqM3K1rRCdN89j0eaw9q7RxeNKHY67/rRcoiyBfTCeeKgnE5PNouL5
LE6iOiE/Jv5BG/ZHtl1S+TYLO7enioKnyEh1Y+PT9ZyEJhdbgLYPFX847tku
sUbDfwFO6khw
     "], "CountMatrix" -> {{111, 17, 0}, {30, 17, 0}}, 
    "IndicesMatrix" -> {{{1, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 
       23, 24, 26, 27, 28, 30, 32, 33, 34, 39, 43, 45, 46, 47, 48, 50, 51, 53,
        54, 55, 56, 57, 59, 61, 63, 64, 66, 67, 71, 72, 74, 76, 78, 79, 81, 
       88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 
       107, 108, 110, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 
       130, 131, 134, 135, 137, 138, 140, 141, 142, 146, 147, 149, 150, 152, 
       153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 
       171, 172, 173, 175}, {3, 40, 42, 49, 52, 60, 65, 68, 73, 86, 109, 111, 
       129, 132, 133, 148, 151}, {}}, {{2, 6, 15, 25, 29, 35, 36, 37, 44, 62, 
       69, 70, 75, 77, 83, 85, 87, 89, 115, 117, 118, 119, 127, 136, 139, 144,
        145, 157, 170, 174}, {8, 14, 19, 22, 31, 38, 41, 58, 80, 82, 84, 103, 
       105, 116, 143, 166, 169}, {}}}, "ExtendedClasses" -> {1, 2}, "Weights" -> 
    SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00011931885714285715`, "SingleEvaluationTime" -> 
    0.0081700999999999996`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.7835309104671803`*^9, 3.784231359015707*^9, 
  3.7843915124490767`*^9, 3.7843916614176197`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"7a177e72-3926-4923-8ad0-45c104c2fb31"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{
  3.7842317880536265`*^9},ExpressionUUID->"deaf13e3-61d8-4c90-8b0a-\
341b3ba6240a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ANNtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.7835308567524595`*^9, 3.783530857637949*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"853947b3-d5ff-4e08-9434-a634958f4d43"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.7314285714285714`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8252788104089219`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.41975308641975306`"}]}], 
      "\[RightAssociation]"}]},
    {"0.26857142857142857`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.7872340425531915`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.5`"}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "111"}], ",", 
          RowBox[{"2", "\[Rule]", "17"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "30"}], ",", 
          RowBox[{"2", "\[Rule]", "17"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.7314285714285714, 
    Association[1 -> 0.8252788104089219, 2 -> 0.41975308641975306`], 
    0.26857142857142857`, 
    Association[1 -> 0.7872340425531915, 2 -> 0.5], 
    Association[
    1 -> Association[1 -> 111, 2 -> 17, Indeterminate -> 0], 2 -> 
     Association[1 -> 30, 2 -> 17, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{
  3.783530921872637*^9, 3.7842313654014397`*^9, 3.7842314381522417`*^9, {
   3.7843915186875067`*^9, 3.7843915278211985`*^9}, 3.7843916666483355`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"91d03eb4-8a6b-4362-9870-5ec2f61a1ccf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ANNtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}, {
  3.7835308601585345`*^9, 3.7835308611439695`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"9d41467c-eb70-409d-981a-fc14501508a5"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQMbV5o8uZP+3J7afLH4j6LxH4/av8tseTrP7YV9
tcg694dVV+x3qjEB0Ut7hxwtXsvvN+275t7onHvjpf33m6xHll16YN8kdC/j
1Z9X9lccZYHoif3dE713TvS+sS8NYAeip/Znz4DAG3uYPUWshjubZryxdzO4
eP9k1kv7UDB4a28KlBUXeG0vc7wQiN7YK8948T5l6xv7vscWQPTOHmjZhOL5
b6Hu/mC/75E2EL2D81O37jFs6kTwwd4RfY/Bh7kDAJwokx0=
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
           7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQAWJGIGZiQICNK02e3El/bk9tvlj8R9H4j0ft32W2PJ3n
9sK+WmSd+8OqK/Y71ZiA6KW9Q44Wr+X3m/Zdc290zr3x0v77TdYjyy49sG8S
upfx6s8r+yuOskD0xP7uid47J3rf2JcGsAPRU/uzZ0DgjT3MniJWw51NM97Y
uxlcvH8y66V9KBi8tTcFyooLvLaXOV4IRG/slWe8eJ+y9Y1932MLIHpnD7Rs
QvH8t1B3f7Df90gbiN7B+alb9xg2dSL4YO+IvofzAbcEiks=
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.17142857142857143`, 0.7586206896551724}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7586206896551724`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.17142857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7586206896551724}], 
          Row[{"RejectionRate = ", 0.17142857142857143`}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.32, 0.7815126050420168}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7815126050420168`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.32`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7815126050420168}], 
          Row[{"RejectionRate = ", 0.32}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.4057142857142857, 0.8076923076923077}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8076923076923077`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.4057142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8076923076923077}], 
          Row[{"RejectionRate = ", 0.4057142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.5257142857142857, 0.8433734939759037}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8433734939759037`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.5257142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8433734939759037}], 
          Row[{"RejectionRate = ", 0.5257142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.6285714285714286, 0.8923076923076924}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8923076923076924`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.6285714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8923076923076924}], 
          Row[{"RejectionRate = ", 0.6285714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.6571428571428571, 0.9}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.9`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.6571428571428571`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9}], 
          Row[{"RejectionRate = ", 0.6571428571428571}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.7314285714285714, 0.8936170212765957}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8936170212765957`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8936170212765957}], 
          Row[{"RejectionRate = ", 0.7314285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.7942857142857143, 0.9166666666666666}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9166666666666666`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.7942857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9166666666666666}], 
          Row[{"RejectionRate = ", 0.7942857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8457142857142858, 0.8888888888888888}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8888888888888888`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8457142857142858`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8888888888888888}], 
          Row[{"RejectionRate = ", 0.8457142857142858}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.8971428571428571, 0.9444444444444444}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9444444444444444`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.8971428571428571`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9444444444444444}], 
          Row[{"RejectionRate = ", 0.8971428571428571}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9257142857142857, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9257142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9257142857142857}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9428571428571428, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9428571428571428`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9428571428571428}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9542857142857143, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9542857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9542857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9714285714285714, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9714285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9746794344808964`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9714285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.9746794344808964}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.718},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9714285714285714}, {0.7314285714285714, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7835309263892*^9, 3.7842314415895014`*^9, 
  3.784391673210661*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"1c5dca0f-189d-42bf-9bac-c86b3c1c42bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ANNtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}, {
  3.783530863102845*^9, 3.7835308640862813`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"058a00e6-3860-4316-a6bf-b60087ef8cf6"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8917618849224045, 0.6966670336600804, 0.2780214062791888}, {
   0.9251705142484353, 0.8356829999044861, 0.5799821192282608}}, {{1., 0.42, 
   0.}, {0.9251705142484353, 0.8356829999044861, 0.5799821192282608}}}, {{0, 
   0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["111", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "111", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7872340425531915`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.8671875`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.825278810408922`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{111, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7872340425531915}], 
         Row[{"Recall = ", 0.8671875}], 
         Row[{"FScore = ", 0.825278810408922}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["30", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "30", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2127659574468085`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.6382978723404256`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{30, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.2127659574468085}], 
         Row[{"Row fraction = ", 0.6382978723404256}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.5`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.1328125`"}, "RowDefault"]}},
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.5}], 
         Row[{"Row fraction = ", 0.1328125}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["17", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "17", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.3617021276595745`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.4197530864197531`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{17, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.5}], 
         Row[{"Recall = ", 0.3617021276595745}], 
         Row[{"FScore = ", 0.4197530864197531}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.8671875`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.8671875}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.3617021276595745`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.3617021276595745}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "141", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7872340425531915`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{141, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7872340425531915}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "34", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{34, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.5}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["141", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["34", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.783530929858226*^9, 3.784231445245515*^9, 
  3.784391531068383*^9, 3.7843916766577897`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"fb6dd8a1-67f2-4335-ae2b-1723be48a48b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.784387462825631*^9, 
  3.784387465248563*^9}},ExpressionUUID->"95f61829-4a88-4cb2-93ec-\
95e3ce421689"],

Cell["\<\
1) The Classifier measurements show that 73.14% of the data is classified \
correctly and 26.8% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 111 data correctly predicted to be belonging to Dataset=1 and 17 data \
belonging to Dataset =1 has been incorrectly classified to be belonging to \
Dataset =2
\tb) 17  data correctly predicted to be belonging to Dataset=2 and 30 data \
belonging to Dataset =2 has been incorrectly classified to be belonging to \
Dataset =1
3) F-score of Dataset=1 is calculated as 0.825 and Dataset=2 is 0.419.\
\>", "Text",
 CellChangeTimes->{{3.784231799292537*^9, 3.7842318533845353`*^9}, {
  3.7843874582270193`*^9, 3.784387458427576*^9}, {3.7843915495437202`*^9, 
  3.7843916176586246`*^9}, {3.784391732689317*^9, 
  3.7843917713807993`*^9}},ExpressionUUID->"d8b403f4-1d11-41d6-8076-\
ec597d250ab0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support Vector Machine Algorithm", "Section",
 CellChangeTimes->{{3.78353012529782*^9, 3.7835301376715503`*^9}, {
  3.7835309362845206`*^9, 
  3.783530966974911*^9}},ExpressionUUID->"32a4c136-aebc-45ca-8ec1-\
cc0a756e220f"],

Cell["\<\
\[OpenCurlyDoubleQuote]Support Vector Machine\[CloseCurlyDoubleQuote] (SVM) \
is a supervised machine learning algorithm used mainly in classification \
problems. In this algorithm, each data item is plotted as a point in \
n-dimensional space (where n is number of features the data point has) with \
the value of each feature being the value of a particular coordinate. Then, \
the classification is performed by finding the hyper-plane that differentiate \
the two classes very well.\
\>", "Text",
 CellChangeTimes->{{3.784235588206766*^9, 3.7842356640864625`*^9}, {
  3.784235712930291*^9, 
  3.784235717500638*^9}},ExpressionUUID->"84fdb5f2-3a84-4740-8623-\
e3d53e367abb"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{
  3.7842318651816397`*^9},ExpressionUUID->"4acbb4bd-f9d3-4066-b1b8-\
85b6fda76e84"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SVMtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7835301632855616`*^9, 3.7835301739594564`*^9}, {
  3.783530941558493*^9, 3.7835310000223*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"454ed84b-3faf-47cc-a439-0c215d709617"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0254835, "MaxTrainingMemory" -> 165184, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 56, 15.4797331`8.94233841659669}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
        0.024811954236798855`, "SoftMarginParameter" -> 3, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association["supportVectors" -> CompressedData["
1:eJy1XGlUjlsbrhAlQ+ahY8o8K8PhczxvSOZ5CiFDpk5EZChThEg4mUMpKsqY
SGq/GjRpnudRpUTziL6z1ufaZ639rL3e98f5fr3/9trrfu77uq/ruu/99t+0
e+lWJQUFhZaKCgpt//4tVH93ym9NnvDpf7+kt5JZ1evPlWTxgpHaD9TCSdWY
9ju9bMOI47x1Wsbjcon79xVTgq5LyREHh/kLu74nke4ZmTkPk4niiX3SJ9I8
svzkUr+lQ7MJe655YlsbF+8S4VqN1pk4uyTy4PzLAVvsEsm6lGzzxPa5ZFzf
WUcWbPxIGvvt9N/cEE7yut4oHr+rQLg43DGxw8dcwdX+hjDjERGaDpreH/Kp
iTT+71c4avDG59rkD8RcIc9L1ziVbM2rto8YlEFqzocnGWTlktrktH1jAyNJ
mQu5My33NfnZf9u9NuGx5HjogVTNFDdhykBzTxPneIG9b3f/O+nThiYKCdkJ
I74kxZCwHQUbGyoiyQe3HadbFMUSwXJrWkZwAtEO3N3eTCWOuGZs9pz9LJco
zswqjp6eSNzMYtIKv+uLzi196xR6u0Uz2Tm1uvp3EkfjcPjrwuyEI8/ItG76
V747+5JCxU6P40aHkxCVsHGGaiFCJ5+HrRsbywSVzKuNXU/ViM7VLtF5leFX
SgKemPY03phGFjVv6Ph1VRZ5ZPj7iIenM0nd4C4D/5QGkSSPA1fLz0aRi+OW
avhYZRL1Nff/8zL9k/BFuSAzanaz6NxXgtUU/cpaei7iO1e9PiFtchK50k9f
N9V/gtBBEhBbHRhBjvaaVDH3Ww2973AD47L3f4QQ9rtphjiMmbm9Shi1dOni
vgdT6Lmdniz4+Jt3Btnz2ObG1T6JxC+u9413JnHk8Pj89xvTQkhy95UzVNS9
CO/c4YN6HlospBP23FUbj93Mjk0jRZMNXaNXx5E/fW+GRSfFkvEaust9NDKF
urCXkzvphRO1XXU6eas/i/J3WLBWuzwlBWnfi1sudYqIpd8tvnrX4NUuVcKA
Ex+ffKmJIX1cujflTYsltm9u5nY5WC2KA3vuRdUcNW+NACHPOaC03iqZ3vdO
p+dGTmUpJDqg6Wf6kwh6bmBqXGsn/SLhgm9ydKBGHc0HNg7IBzYOG9YtLzjv
HUfiWyd2aR2TSOPw6sr7F3s7lQtzzRK8F7aqEL4dPHlNySxddK6B9lGltSot
pNtGHVH7tkNN8tO60mbKUjWJttp4X+vRnSX5k1+rF6e0lzTtTtL4NrG1BPgQ
aqSj2/l6HVlRXb7felmT6LtZHL9of6dvrCgfjB+nu11amEzmXHusqaMaT+sN
3w1xaKyYarzXqFF0X/+WHgc+7akTWHyIPmQ98MWFNFrHaiV3jNyV44n3nPJz
G3XeELtzLk4rSz9z6832mfLL5mM/BUnspgRL+1fkwIDEKScrn5KDT29+dD8Z
QO+ra/n5vqdODNHtNmbQvuy2UhXvwU02tcpSo+w5LYeb1oryYcHkdztOTM4U
5UOBf8oXpeX/4Nkedf/xve3DSdD75ErJ8TqKO7z7bp33Vv2Cz2cRPizumeup
dy6M9JladeN9wgeyP/2wVvibaHLecPasQxPLaHxn3xlnlXW1UhTfyCFLvlt+
+CbKsxcG7Q4s3ZlIKpa6lmvfiSH5j8uEM6axZH2WacfXmfWCyoXEHf3aVVFc
Z+9b7d5Y0m50PCl0n/e9ovrv/K+dtG/3sGDiVXR+2I6Qj8Qp9enKheaJ5LiR
/twff+P/G+WZbgGDFKQRwbrqa7ybyYHw+1ciL1aI4gtcZ/OBeNhPWaWURoyu
zFw0Li2JxFbse7xgcjzNM/Xrkzpf0Y/n1nH7BrN7L9wLRN/tSfb9xd/NUynu
qJ4mRUvMYv7pFzL65mLLKycaGxtF8V2RpFAYamZF6mv/rB5k7khCTtklj43y
FiZ9WTi8YUcZaZ1jfqEmu4R7LvB3np7zAI/bieSSW5+71u+TSXxd+Zw2x5Jo
XdSH6y7rMTWO7LOP7porJNPv9v/uQ2yeBZ7+eat+VLgIH+6qufbV+T2feLed
+rmbQhzRd9DxnqYWS8899Wz/4KUxhVxc5/Gdlhs+tO7ZJ4X02G699ezzONIr
wvHzEN0Acmvl99gshSpaF8uN7Ea/PVokisMNDy2T/7wqIj7lajtXDwwlMUsy
R/QdEUvrQsvk2Agbg0DiafLBJKrqI3FRW5PcZnOszD5UsXVgvL1xjSgOx54f
XO+tkUMOB8XkNmyKJ6URUW4nlkUTi8clkkUJPyn+8vIBOGmhvCt4WmYk7W+T
m2ddrlbIo/ng9jLw1AiXWLJ9pW6LSrKDoF/w+INGB70LJ6rriKvmIrPem7yE
3s+rrPdU+AqWewPnndfMI38duVTnrx5Joi9cHVn7MIbGAX0TuMOeq3AubPWo
gDIR79s06OyjSLU3tL+BP0Q4WNeseK4sudwr47bq1Gb63dg8C2/3OLzk2SdR
/tod3Tlb3TWHnou6WFztu8PwgTfFBx6eDc6dbphs+YPy38PB53q6V6XSugBO
4ruhD+Fc9GP23Gd9rH4UdvMS5UN8RaGSW1gOkQ48qXVkZgy5uchk7R/DPlL+
gP7GOxd5xsZ3zLEfqZfNQsmpzG4j1rvGEnv7Xaa3UmMoP0Md8/ABfJ29r0Nk
hVo34RMBjzq+v/N6lQ4x//Q34CTnuy3Y/GXRtk/lonNfDdaZai99K9hKuls8
+EhoH0KeAc9muUY+OpLfKLovdAt7ruet/No9YZ9I6JmTVgE7/IlefLv2DT9D
Ke6gjnn5AL7D5hn0BfDB/vRzg4stQ0jChin5qiq15FyHw5U3vn0lvD4EPGPP
1dw/YXeP80U0f8Gj5m/d+FuKZlvaN3uHfj3r41Quii+v3h7ebe8RVFBG8wx1
bOd496PX3QKavzyeiny4OCkq2X9ZEJn9ztBieLCUKCXqLVd670h5teaGXp9O
X/xIHm3PfV3voCidc23GY++HTVycRL+AznprMttVxyCe6Jx3Sepe70159SXf
6g3Z2e/pfXUnCdm7z1SREV07LQ9SF/MH4LrCzc7+p10TaB0PmbZjwprcL8Ky
pxXGDxbG0j4kr76Abum02ebi+eBoyncUc9fmBYzIoPiLvsnTx7xz2fzt+WhA
9/BbCZSXaHu9atw2PpQ0LjEIC7XIFVDHvHP1p/v6WR9qoviAPLM4GHmlNCWZ
ZPbrvX5XlwQy/054WzfNKBpf9CHwXzYfRkwfp9rB2U6EO8vzupidy84iHpU1
9174xlN+tntLamk/2yLKd3jxBT6w/Ax6CPUGfgYdi/7Gi8PLlCS91LlRNB/Q
N33zN5p19Qgiq8cPKncyiyKnx3ab7bE+gvIo1EXHUWVtOpg6cvEX/Aznll1t
jlN/mk0mbOl7+eCJJFK70lPqlRBMvxvwLLv1MoUKuyour8Z9URdTZiqXHnua
SHUL6lheXcjTm/B38N308kL6t0qI4+Ikey549bp13a+/r60QnD7fP/kyo0q4
13tfenazugR80lhPcZLx7mDaN637Tht591gF4eks6AA2H+BrIH/R31BvHUpT
J2wb2SSs1HQZbtVbUcKrCxZ/Z3boOSPqXjHFSdQF+ib8KF6e2RWpaD2dmCzy
YaBbgDvwz0wsEhROGNUJ3fcYXbxm9kGAHuLVG+IAPJv44XbwML9Umg8b3w3o
O/lrFOU74GdalbPW3DzhzK035APOhR5CfFHHwHX0N16/QH9j8aHb4CePOlf9
wydxX+hN8HUe30EcWD301a7m/POGz6SPb9xB3d4vhAUeqlNfbIkSkA/gURoL
gy8N2Z4pOveHieaQWx75orrwcXlsWPLiGo0D+gXORT7w+DrqmP1uwF/7eSUh
5qFulJeA78A/452LumDzrGp+1yCtT/mUP6CO32juVzKvq6c6ixdf9E3cF37q
ghsVW3TeNQrwf8FToY9xLu++yAf0TeBZm8yxo3Z3TCAjtJWf7enhTXFSLSXI
RWtkOe3zPJ8AvgabZ9BZ4JP7Sp4MS+n/kvolUUrpxb+P/yGscAjY+G7hT1Ec
gjcNlVboZYvONX0ZdOLHnfC/7/l2mZeKj6B6oFWC7r0PJL70ddnbmlYS1UHf
FJIfKEp4+NBHo9egec3fydUZOfXPJviR4pbd20a8f0MMC+Ou3+8cTswLW3R5
ujlOmGj78NvAgGc0Dogvz0+FfmPxDP4Z+AN0IfJMlh5CHKA3kQ9xL8aVW8Tk
0e+WO2mFp6ZqMO3z8Ll4/cLm2sYTxjurRbxE7y/bp6f00qhvBF2I+wIneXGA
fmPxoWj6An2fpjiqu6FbgL+yfK4XTR4Dcsamiu4L3of4oh/DT0Ud8+LA80ug
u3Eu9BDyF7jOu++/Ncdhzy12bLrW5mu1qC6gh/St1jtmmQbTfow+hO/GOxc+
Ldvn57X9anv4VM4//PeXHqL87Bf/5eGZYYdhy6cGKkhYPY+5E/rxNsuZk/3m
SrnzCx5OsnUBXGfrTV6e6qX1zMmuqILgvqxPe7cp72yLgwnCqH6zf1cOfCvI
q2PR39jvBt9ed0lcu26fQ2ldyIsPfnUpmb2NKoX2BopHryxPp3XB6gDwdZ7v
ydYFzwcfcETwPijJJMZGz0/u/BFOz5U3DjjXZZPzvZgT7oLtXxNW+UhdBMmc
nY5TB9YK0BfrI1Z201v1gs4hzx2dXl9wt4HOReTtF7gv8gy6cNXQLm1tj5TI
7Jvgk/DX4XsCd/DdfBpcrBX3B5JHd9oNaTe7hPKofXvNLFvYVIvicCJ2km5O
aRXlO4hvzD6LzCXJBZRPQg/Jm7/QQ66qrk1FJZVCSGSxw/rbtcJMbV9F44K2
kvoLZzdrb+4pSe9pIpiFjpJAd4NP8nQAvpvnlztrTXRqhaGHVFZeKWwQbHWJ
xazNKeS35/NutYgdKDEo9n8lse4vQR8C7sAv4fFJTfsyx7ZTP9A6vhQ47L7D
igQR7sgbB/h9wAf4ytDz7RdJNAb++Q+vhn5bHJ9y8urABu59X89fGT/gR5NI
H9vr2IdU6sVQXo25NHAy0jlJo7JLjbDPouMDx+Tvoj4E/GX7EHQL+C/mZPCr
4e/wdAvm0ogv/BLo+ZSqLjn53TMEdxcV077RIVx84PlyrO7usXWz37QvOdSn
xZyMN4fkfTe2jhFfVdVtyg3zwmk/hp6X5RtBH6cr6+gc0h8k2XL4/rYtOkVC
SnPqgP1RYQLOhc8F3EEcePz3VGnmgX2KP0W65fDkHsel2akC8hfngpegb/Lm
sfAReXNexBe8r/x2c+DdXlWktXOeV7dNmVx9obOmrMnwQZ4oz8AfkGfw7dGP
2TjwfGW2LqJH+1l9GPpeYHnUxJZzBf0ZP4T5xpU95/u1lhj1uJkTaN1Swp6L
vsnqN/Ao3Bc6i4cPPN7H8pJk6cCOcxN9qc6CHoLOYv0z9lzwPnbeXb/KSrqo
Q6MAH6Zb/u6gjQd8iNvpTp08TRoJfGUe/kLHsv34Y1Pv5rW3smgcTqZVZGx0
iqO6RVYdq3fuHatLvgr1aU/a790VQPHh5QeTi0cM1CTIM+gs5Bn6Me++mMey
+Iu9FcznA2z7nNzgH0n5Dvgvzz/Dd2PzzHf08K6KHbPofBM6AHXM6gDePgEv
vtAtyDPwatyXN9+E3+ddYqW/4WU8xcmcWQfbt+ueTuc4mGfJy/tQF9i7Qnyx
fwb/AfsPFB9+5QNPv11w1u41cX+DyOd6lW5+221dLGmr7+g9Yc57ci8//bd7
t9wpngF3JkmmTG29oFR0LvZ3IvzCN1wtfEyuGn7KGmF5SMD84v77DP9HS18S
ZY/ZSdcOv6f8DP1tdnMT0S2u4/I+Vgegv+G+wEl591agN1mcDPKy7By0JJLO
u9dVbu1vExZG57zIM57fh3pjz3VKLxiZP+OoAL6O/EV/A57x5nozLFLO9LFW
lLJ80tzXc83OskyKv9s3xKg/cHxH+Q7yl5cPPF4CPYT5Jvau5J2jQ79hn2DR
gXr/jAAH8jnXqUN0Yh/qV8/1+KnkfeE5rWP0eZ4uhK/M3reV/jvpm+15lFfD
V5ZXtwDP2Lo47ysJG6P8XABOwkeUtw/x5rxbnyqvL9iRTfkvfBh58Qy8GriO
eSHO9b2027jz4Gg6zyr44RCfcLma6iHeuTz+cKhx059XC9MproOvg09iLo19
T95+FBtfzBlaTmyMI0OTSD+V2kNTYuPpvifbL+TtmysyVEcNG/6Z3hc8FfkA
X5nXh9j5Mbtng/0o4Dr0EHRW75WLY04fKBDVG29PobzzzvptTum0z8P/xX3h
98k776bfrXr14AnjCuleG3QA9jJl6ax/a++Kt1/Cnot9T/S3tYr9Jly7G08G
GxUttHv7U2D3Vnh1AR8c/cLfMOLmrrtSAd8N+0bgv8qLJFd07Gq4fAd8Hf0Y
vif0xeG1Vvr9oxyFF1snBd1r4S2gv6EueN/NfeKpwmUvikV6CDoW+btw25GY
NXse0jrGfXl6CHEwPGqnO8hKSn3w1jdM4/MNc6hfAv+MN9/k7UexPi38auQv
zsW8W5ZfjfxleZ/xg1jDsTdzqV+NfIDe7F77n+yUg+nc/B0bc9tqjlsunYuA
n6G/Qc/DN0I/hv/LyzP4iJgfIx/OhSxfVb4ng2w7bPra9pUX3dcAj4Jfwosv
7subH7N7IMAHzHF4+wTwNVgfcZh5F8VBgxJpPmAPGnHAnLfMNtj1alclkX5b
tIcUjy2voXsrqLcuWgG/Jxh8pXsg4KnwS5APvPxl5xeIQ35QnvZmlWTq7yDP
UMfoF7z9Hfgl8DXQh56m3lBxCMinfYjdi5e1JzbPoWz/rHVuovwFruO7pZ7e
ZuPZ7bXc+yXIh5ZLvq1z3BsnpFsk2LSpixVQb7+V+RSfSo4mve5+udxqzRO5
+zz8HfAzzAvhy4Gfsf0NPIoXB96cF74G6g3nIr7AHZ4v9/+KA+Z6bJ4d0W4/
eePwAtF+H/SFrHnLt9VLpkQYlov6PPCX3SumPswvncXrm9hjYuebb+869bL5
kSMcNgi62VPnLd0DQR/Cd+PxdcSB9UvAdxAH1AWNwy/85ekW6CHsn0HHwkcM
+3ox4v75ZIrr2HMEf+DFF+eyePZ04KZHZwaXCehDwHX4O/BhJnVxHnc//Dt3
X44370aeYY4jr1/N2z971G23zdv+QXSOjvzlzRnY+GLvisUd7K9jzwb6DX0e
eCZrzsDyyY816m+aCorpu6Sdlov3+gzwE7CXibrIvG/cs7JOWbQXhL7Jnou9
YuQZ5k4XRmokbznfku5lniodvWyfRb7ou2Vc/z69xZNCkV+NOQ70G7t/hjjw
+jwPH47XTnqjExFP+wV8T+wVY97NO3fl0K4XqjZXiPIMPte7bDeNxZofSFye
z3WdLWFynwucRD6gLmqS/jKfM72U+gRsXQB3eDwV+bvdxsmo+1YfqucPvnLu
rPp7seg9GebomIvw8IE378Zc5Lp0R7sSrWRS2PGjf1aLBKo3sdd2QCEpKHp9
sQgnwR9YPIPehI94rWFOecWueKIwZZPXducKmXsgVlmqWe619dx3gNAXOBe8
T5avccm+dr1qK0Upy6uvhdqu0g+vFnBfzIfAHxBfns/Fe+cD3oc+BF951n2P
MZofm+i5svZWWDzDe5FXLmOcJma9oToW+2clz3anEXclCW8uwtsHx7tF4A67
/8DySd78gj0X+1ys/4s+BB+cNx8CnsH/BY/Snj5Ef1/Xf+oC/jrmIkNvmgz5
6qQg4fmIPN8IPAp8kn1/IavPo47Zukjav3b3etM4uk/AvrPE3JQ314MPI2s+
j30Y1Bv8Et59eXvQ7D44/F/4RuDVPNwBT2XrGOeijvEeEv469Dy+G09nsfcF
T8V9MRfBXhD05uDL88dftfnE5TvsuZhfoM+jLuTVx7w86+Q247SfQhHNB/Q3
3h6/vHMcvPOBv466YH1EHk4iH9j7Dq66Z29imU/PhT8p714x+jx77vZRplZT
1qVTPxW8mu7LyYjv5SDtVW6L34nwYajWCtebB3JF71Dk9ZWvWprNeRXWQsLr
m9iLRz/m+Z6y9qOAD6gLvPO5NFPBe2Tf6aJ3avczlX6sIa1EvA/7MCz+Ir7Y
K8Y7H7bPy/IJRO++mPeb8AkwN0W/4Pm/uC/bj5Fn0AHYVwavBl/n6VheP4bv
yb7Dhg5AP+b5GjycfNZjoUaIby5x89SwOXMrjPLfC3MWjOtp8IP6Rrx6w7yb
9VORZ+jzz/Rebz5/4hXlk6gLHi+BD8POA+CfIQ7IXx6uy3rPCx3A+pPob8gz
1IX/kFbv1FrL/14Pvhx0C3AS95W1Zw6fAP+nAHzAnmN56S23ZUdeE4ehGxY3
envRc6FbePkAPcTzacEnWVyX5cPw3rnjXT7bN+m8m9kjlfddHd0/+1Vv6JvQ
F/D7SjoGtFmX5s+dx/L2tpEPyDPM31iflr0v5mSsrwH+C58LfBLzFsSBpy+g
31hfOWiH196UsnhBdcCUuw57Muj++gpJh35lyxspP+PhOvb72PjifQv4L/gZ
cAf5y8Nf/I8LW8fYs2HfO2EfXJa+4Olj7Csjz6BboC9Qx7w9JtQxy0vg77A6
C3wd8ZW1r4E9BdSxkXNltGazM/VTizouTc/YHS5gnwD3lfV/Cqxfjf0HxBf1
hvxFf+PhDvome26RbbdGlw3v6H2h34APsuYimAew+Du4wT09SiuV7sXjf3Lc
q9cHuJ2rkPk/AiWeUWPi6hvo/wWhD2HfCHwH/Bc8Cu9QeHjGqwvkA3g18oHV
87z/N+LtkeK9E/YRsV8CnSVrDwT6jcUz9n8PWH9H1vwYe9Ds/zxhH8ax/7A+
kz89FiyODh00cZef3DyV93826JuY4yB/5d274u1zIR/YPTHUm6xzzUs0La9f
aCllv5vp9qYc9SmxdA8E8ZXX/83w6DKx1kpBysYh8ltr09tjXgp414H9KPR5
8CheHzLz3bpa3SlHpLPw7gvzY8xbeP9LxZv7Q7egv2HfE749qy9kzdHBU1k9
tN+iXk+oziZXw8Ncm9oHUZ6K+YWsPUfsGyF/gTuoC+gs1qdFfMEf5P0fLfAo
5C/OZd8lbZ5jYNlsGyHKB96cAXN/3BdzBoeip/3z/74X4suLA3g1fFrse+J/
MKLKN34dfvqacCR3xJsHKu50X4PyVE5dIM8QX7yTQL0dv/FHV23rkL+/l7tm
uksQrTfkGc/v+7fmWTwexfs/PPRN6DfgJOLA41Hom3gvApzEexzwPvAo+yML
osOiW0hdG519f+YpStUmBHXIOVvJzV82zzCHBO6gD8E3kuXLYa+CvS/0PPoF
fER5/5eKN59vXpk52iPKi94Xcxz4Z9j3jDYbeqa7eQ3XT2XP/TJ3otbgeR9E
fhR8RFk+AXQA+78+8AmwH4V8uB1+NGR0lxbStk9mrj/75Af3XPg7vD0m+LTw
d3j7XGz+8v53BvyX9bkwj5Xlc/HyDL4yqwvl7m+/9CbrG0EPIc+QD9gLkvU+
i+VR7ByHzV/oFllzMt6eLng14gt9AR+RnePw8IzV3cCdNUrTjm9680xg92xk
zXHY/xlh/88R+1HwudDfZO2XgJ+x98U+LeabmM/Tdwe/5oU83od9cDa+eIcN
/oA5GfgO6oI35+X54NqzxznGh2dSnwDvvvA/ZYgvD9fhy5mad9GICcgT8H7I
ul3Z/AV5XSXgvy5p8/fteRRA+xCdQ3L0Jvbt2fvi/wbhc7F1Ab6DPVLe3iBb
b3jfzfISOr+ALpTBf9nvpjKg3LrRv0g4/qyjZ9KjVGG6S71n+ctkro6V158M
HFjTY4GQQ3Ed/i/8SfTNrB2//bE6r14Uh39rX449l7dXkRHa7rP3wGyKO9jb
5s15Zb13Yv8fEboQ++uoY+y98t5RYY7Ongv8Zc+VFydZfx34cFF4NaHQM4/O
Y8FLwKOQD5hn/Rd2Zaym
          "], "supportVectorCoefficients" -> CompressedData["
1:eJxTTMoPSmVkYGBgARFgwOFAK9pIOCKea84Be3RxA13xdpOT/+xnfJa+9Vfu
GVy+bl741TTB7xjqqU3v2qK6++9XNpzyBdKF548b/IC746R2EueU0wj1E3zs
ZlwN+mrPuU+Vxcr+D0732of+nZe4ihlD3Ooz610uJ0z7jQ5FBfMKf8BpXoPV
vQmpcU8Iho9Zd/H1Ff9vwNXJW7MuPLHxF059Qp5rNyXte4Mhn620s19tByNO
e7TljqtMrmZy8Gi6UyQawoQh/87kfNTKOx8xzJ137yWTxaKnRMeztOIb9Q1P
MM2B0YteWhxarX/Enmen4Fz+/M323dzzq1lO447fu06rFynXMMD5HLHrpl2e
/cs+o1UoZofLVpLTX/zkRe8YJb/C9e04e1p0Ihvx6fibR3201bVr9g5WLvxH
QjYRrc9yf1as6rTP9p1Jmx62b3xF9XzjnxazZX8TIpzitS+92NL41X7fjEni
5UzfiLXvwCg9So/SQ48GANtBBLU=
          "], "rho" -> -0.8813167941265689]}, 
      "ProbabilityCoefficients" -> {{-2.5946173667907715`, 
       0.6675013303756714}}, "MulticlassStrategy" -> "OneVersusOne", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 11.], 
         "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "SupportVectorMachine", "Options" -> 
      Association[
       "KernelType" -> 
        Association[
         "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association[
         "Value" -> 0.024811954236798855`, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5810206639467216, 0.03802822627562723], "Accuracy" -> 
         PlusMinus[0.7245309620798946, 0.03399936957742625], "EvaluationTime" -> 
         0.000033448563218390805`, "TestSize" -> 348, "TrainingSize" -> 60, 
         "TrainingTime" -> 0.1947427, "TrainingMemory" -> 130824, 
         "ModelMemory" -> 22824, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.7338004881210973, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.5810206639467216, 0.026890016675992456`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.7245309620798946, 0.0240411847842657]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
           "GammaScalingParameter" -> 0.024811954236798855`, 
           "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}, 
         "FinalTrainingSize" -> 408], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 226375028138853]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.005065321849613141], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6457880601206751, 0.05018685148025907], "Accuracy" -> 
              PlusMinus[0.705766914420397, 0.032403554926881364`], 
              "EvaluationTime" -> 0.0000311678391959799, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5376507, 
              "TrainingMemory" -> 160912, "ModelMemory" -> 13096, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6586131496090126, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6457880601206751, 0.03548746300809331]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.705766914420397, 0.022912773423348572`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6008593335277715, 0.04167280922522768], "Accuracy" -> 
              PlusMinus[0.7144280896555192, 0.03440483238424247], 
              "EvaluationTime" -> 0.00003484051724137931, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.1230033, 
              "TrainingMemory" -> 137616, "ModelMemory" -> 21800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7090261059310736, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6008593335277715, 0.02946712599425181]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7144280896555192, 0.024327890284484382`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003484051724137931, "MeanCrossEntropy" -> 
             PlusMinus[0.6008593335277715, 0.04167280922522768], 
             "ModelMemory" -> 21800, "TrainingMemory" -> 137616, 
             "TrainingTime" -> 1.039504164], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.0012395275981530174`], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6049187946313934, 0.04150357626877674], "Accuracy" -> 
              PlusMinus[0.7144280896555192, 0.03440483238424247], 
              "EvaluationTime" -> 0.000027642816091954018`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.1032137, 
              "TrainingMemory" -> 125656, "ModelMemory" -> 21800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7043715529908742, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6049187946313934, 0.0293474602231451]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7144280896555192, 0.024327890284484382`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7225260042063886, 0.13061828543079218`], "Accuracy" -> 
              PlusMinus[0.6812669987279566, 0.0731933965337458], 
              "EvaluationTime" -> 0.00005576707317073171, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.1378298, 
              "TrainingMemory" -> 529856, "ModelMemory" -> 55592, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5769467219727841, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7225260042063886, 0.09236107537507317]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005576707317073171, "MeanCrossEntropy" -> 
             PlusMinus[0.7225260042063886, 0.13061828543079218`], 
             "ModelMemory" -> 55592, "TrainingMemory" -> 529856, 
             "TrainingTime" -> 0.27571234539877304`], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.08752492768840528], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6478713705702833, 0.05033703424394076], "Accuracy" -> 
              PlusMinus[0.705766914420397, 0.032403554926881364`], 
              "EvaluationTime" -> 0.00004580678391959799, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1219571, 
              "TrainingMemory" -> 100216, "ModelMemory" -> 13096, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.656497626863922, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6478713705702833, 0.03559365825870996]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.705766914420397, 0.022912773423348572`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6027906652134958, 0.04123657996782225], "Accuracy" -> 
              PlusMinus[0.7138927035584292, 0.034487270739457586`], 
              "EvaluationTime" -> 0.00003775632183908046, "TestSize" -> 348, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.0978529, 
              "TrainingMemory" -> 136544, "ModelMemory" -> 21800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7068862941718941, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6027906652134958, 0.029158665328188452`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7138927035584292, 0.024386183004486854`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7220034181542947, 0.13104047742840283`], "Accuracy" -> 
              PlusMinus[0.6812669987279566, 0.0731933965337458], 
              "EvaluationTime" -> 0.00006006219512195122, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.3620361, 
              "TrainingMemory" -> 534032, "ModelMemory" -> 55592, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5772845756305892, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7220034181542947, 0.09265961019954636]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006006219512195122, "MeanCrossEntropy" -> 
             PlusMinus[0.7220034181542947, 0.13104047742840283`], 
             "ModelMemory" -> 55592, "TrainingMemory" -> 534032, 
             "TrainingTime" -> 0.5750574950920246], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.01660344841839695], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6004595563800597, 0.041283554811731814`], 
              "Accuracy" -> 
              PlusMinus[0.7144280896555192, 0.03440483238424247], 
              "EvaluationTime" -> 0.000033920689655172414`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.1224859, 
              "TrainingMemory" -> 137112, "ModelMemory" -> 21800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7095824425331322, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6004595563800597, 0.029191881558862084`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7144280896555192, 0.024327890284484382`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7065800901754956, 0.12548483313567974`], "Accuracy" -> 
              PlusMinus[0.6812669987279566, 0.0731933965337458], 
              "EvaluationTime" -> 0.00005137926829268293, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.2477565, 
              "TrainingMemory" -> 534032, "ModelMemory" -> 55592, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.590330072356651, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7065800901754956, 0.08873117644630152]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005137926829268293, "MeanCrossEntropy" -> 
             PlusMinus[0.7065800901754956, 0.12548483313567974`], 
             "ModelMemory" -> 55592, "TrainingMemory" -> 534032, 
             "TrainingTime" -> 0.4325615196319018], "Index" -> 4], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.06937168695424864], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.024811954236798855`], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7102010194549082, 0.07025206386054944], "Accuracy" -> 
              PlusMinus[0.7160790433574457, 0.03206061146597384], 
              "EvaluationTime" -> 0.00003308718592964824, "TestSize" -> 398, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.3530354, 
              "TrainingMemory" -> 113856, "ModelMemory" -> 13608, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5963884650839475, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7102010194549082, 0.04967571074814489]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7160790433574457, 0.02267027577657728]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5810206639467216, 0.03802822627562723], "Accuracy" -> 
              PlusMinus[0.7245309620798946, 0.03399936957742625], 
              "EvaluationTime" -> 0.000033448563218390805`, "TestSize" -> 348,
               "TrainingSize" -> 60, "TrainingTime" -> 0.1947427, 
              "TrainingMemory" -> 130824, "ModelMemory" -> 22824, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7338004881210973, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5810206639467216, 0.026890016675992456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7245309620798946, 0.0240411847842657]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6954541377880135, 0.12884202371398448`], "Accuracy" -> 
              PlusMinus[0.6812669987279566, 0.0731933965337458], 
              "EvaluationTime" -> 0.00004764024390243903, "TestSize" -> 82, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.1625382, 
              "TrainingMemory" -> 567128, "ModelMemory" -> 59688, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5988866599511063, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6954541377880135, 0.0911050686699564]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004764024390243903, "MeanCrossEntropy" -> 
             PlusMinus[0.6954541377880135, 0.12884202371398448`], 
             "ModelMemory" -> 59688, "TrainingMemory" -> 567128, 
             "TrainingTime" -> 0.5564574417177914], "Index" -> 6], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.08723174723912364], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.014786439367996479`], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.04767826166722683], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.013603878244656475`], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["RadialBasisFunction"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, 
          {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 226370733171557]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843917811063183`17.33057107977685*^9, 
      "PreprocessorEvaluationTime" -> 0.0000123722665148064`2., 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.9370240000000001, 
          "ElapsedTimes" -> 1.7515945, "ExperimentCounts" -> 3], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 1.1712800000000003`, 
          "ElapsedTimes" -> 1.5356171, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 1.4641000000000006`, 
          "ElapsedTimes" -> 1.4116265000000001`, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[226379323106149]], "ID" -> 
         226383618073445]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.9278475, "MaxTrainingMemory" -> 1179392, 
      "DataMemory" -> 806280, "FunctionMemory" -> 310320, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 56, 21.3062656`9.081082268436207}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783531004902497*^9, 3.7842314559995813`*^9, 
  3.784391781402243*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"67f5a61c-da03-421b-becd-ca86ffa299c8"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{
  3.784231872465569*^9},ExpressionUUID->"9d7e326b-1966-4b40-a5a6-\
4197b01e97d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "SVMtraining", "]"}]], "Input",
 CellChangeTimes->{{3.7835309742397766`*^9, 3.783530975773865*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"fbaecc21-013a-4857-90a5-1d72331bfab8"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"SupportVectorMachine\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 6, "InitialType" -> 
                    TypeSystem`Struct[{
                    "KernelType", "GammaScalingParameter", 
                    "SoftMarginParameter", "PolynomialDegree", 
                    "BiasParameter", "MulticlassStrategy"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[String]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"KernelType"} -> 
                    TypeSystem`PackageScope`AtomShape[182.40000000000003`], {
                    "GammaScalingParameter"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {
                    "SoftMarginParameter"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "PolynomialDegree"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {"BiasParameter"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "MulticlassStrategy"} -> 
                    TypeSystem`PackageScope`AtomShape[115.20000000000002`]], 
                    1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[665530466], "Type" -> 
                    TypeSystem`Struct[{
                    "KernelType", "GammaScalingParameter", 
                    "SoftMarginParameter", "PolynomialDegree", 
                    "BiasParameter", "MulticlassStrategy"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[String]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[665530466]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"KernelType\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"KernelType\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["KernelType"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["KernelType"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["RadialBasisFunction", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["KernelType"]]], "Mouse"], 
                    ImageSize -> {{182.40000000000003`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"GammaScalingParameter\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"GammaScalingParameter\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["GammaScalingParameter"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["GammaScalingParameter"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.024812"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["GammaScalingParameter"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"SoftMarginParameter\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"SoftMarginParameter\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["SoftMarginParameter"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["SoftMarginParameter"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["3"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["SoftMarginParameter"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"PolynomialDegree\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"PolynomialDegree\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["PolynomialDegree"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["PolynomialDegree"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["3"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["PolynomialDegree"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"BiasParameter\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"BiasParameter\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["BiasParameter"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["BiasParameter"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["1"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["BiasParameter"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MulticlassStrategy\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"MulticlassStrategy\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][{
                    Key["MulticlassStrategy"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["MulticlassStrategy"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation["OneVersusOne", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    GeneralUtilities`Slice[
                    Key["MulticlassStrategy"]]], "Mouse"], 
                    ImageSize -> {{115.20000000000002`, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1431450775][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1431450775]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    1431450775][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "KernelType" -> "RadialBasisFunction", 
                  "GammaScalingParameter" -> 0.024811954236798855`, 
                  "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
                  "BiasParameter" -> 1, "MulticlassStrategy" -> 
                  "OneVersusOne"], 
                 
                 TypeSystem`Struct[{
                  "KernelType", "GammaScalingParameter", 
                   "SoftMarginParameter", "PolynomialDegree", "BiasParameter",
                    "MulticlassStrategy"}, {
                   TypeSystem`Atom[String], 
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[String]}], 
                 Association["ID" -> 257212893324136]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "72.4530962079894607086`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "3.3999369577426246103`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6565322229250420971`3.",
                   "\", \"", "0.792529701234747197`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6565322229250420971`3., 
                  ", ", 0.792529701234747197`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5810206639467215828`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0380282262756272277`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5049642113954670997`3.",
                   "\", \"", "0.6570771164979760659`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5049642113954670997`3., 
                  ", ", 0.6570771164979760659`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "8.79`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "14.6`",
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"312.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"5.92`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4372839093382061}, {
                    4.0943445622221, -0.5429689565893282}, {
                    5.786897381366708, -0.36319021114726807`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.5455117679412226}, {
                    2.302585092994046, -0.3606473997953736}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4372839093382061}}, {{
                    4.0943445622221, -0.5429689565893282}}, {{
                    5.786897381366708, -0.36319021114726807`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5455117679412226}}, {{
                    2.302585092994046, -0.3606473997953736}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5181839488922466}, {
                    2.302585092994046, -0.36244166584779186`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.6106598860860767}, {
                    4.0943445622221, -0.4795710268278927}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5680803115212493}, {
                    5.786897381366708, -0.19322539434976757`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5589293430485828}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5557820106159921, -0.3606473997953736}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5589293430485828}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5557820106159921, -0.3606473997953736}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.705766914420397}, {
                    4.0943445622221, 0.7245309620798946}, {5.786897381366708, 
                    0.6812669987279566}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6037758017332455}, {
                    2.302585092994046, 0.8175203984735478}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.705766914420397}}, {{4.0943445622221,
                     0.7245309620798946}}, {{5.786897381366708, 
                    0.6812669987279566}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6037758017332455}}, {{
                    2.302585092994046, 
                    0.8175203984735478}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5850072870785046}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.6037758017332455, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5850072870785046}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.6037758017332455, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4372839093382061}, {
                    4.0943445622221, -0.5093944258721789}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, -0.5026610537098721}, {
                    5.786897381366708, -0.325001867662085}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4340631045403858}, {
                    4.0943445622221, -0.5061852980605579}, {
                    5.786897381366708, -0.3257254058147908}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, -0.5100599896385161}, {
                    5.786897381366708, -0.34731872139223036`}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3422072230265478}, {
                    4.0943445622221, -0.5429689565893282}, {
                    5.786897381366708, -0.36319021114726807`}}]}, 
                    "SupportVectorMachine"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.558789148527596}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5550782393075084, -0.325001867662085}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.558789148527596}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5550782393075084, -0.325001867662085}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4372839093382061}, {
                    4.0943445622221, -0.5429689565893282}, {
                    5.786897381366708, -0.36319021114726807`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.5455117679412226}, {
                    2.302585092994046, -0.3606473997953736}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.4372839093382061}}, {{
                    4.0943445622221, -0.5429689565893282}}, {{
                    5.786897381366708, -0.36319021114726807`}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5455117679412226}}, {{
                    2.302585092994046, -0.3606473997953736}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5181839488922466}, {
                    2.302585092994046, -0.36244166584779186`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.6106598860860767}, {
                    4.0943445622221, -0.4795710268278927}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5680803115212493}, {
                    5.786897381366708, -0.19322539434976757`}}]}}}, {}, {}, \
{}, {}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5589293430485828}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5557820106159921, -0.3606473997953736}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5589293430485828}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5557820106159921, -0.3606473997953736}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.705766914420397}, {
                    4.0943445622221, 0.7245309620798946}, {5.786897381366708, 
                    0.6812669987279566}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.6037758017332455}, {
                    2.302585092994046, 0.8175203984735478}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.705766914420397}}, {{4.0943445622221,
                     0.7245309620798946}}, {{5.786897381366708, 
                    0.6812669987279566}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.6037758017332455}}, {{
                    2.302585092994046, 
                    0.8175203984735478}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5850072870785046}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.6037758017332455, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5850072870785046}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.6037758017332455, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4372839093382061}, {
                    4.0943445622221, -0.5093944258721789}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, -0.5026610537098721}, {
                    5.786897381366708, -0.325001867662085}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.4340631045403858}, {
                    4.0943445622221, -0.5061852980605579}, {
                    5.786897381366708, -0.3257254058147908}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.0943445622221, -0.5100599896385161}, {
                    5.786897381366708, -0.34731872139223036`}}]}, 
                    "SupportVectorMachine"], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.3422072230265478}, {
                    4.0943445622221, -0.5429689565893282}, {
                    5.786897381366708, -0.36319021114726807`}}]}, 
                    "SupportVectorMachine"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.558789148527596}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5550782393075084, -0.325001867662085}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.558789148527596}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5550782393075084, -0.325001867662085}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.783531008994149*^9, 3.7842314595357313`*^9, 
  3.7843917848453693`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"1929c8bf-f6d2-4d74-94af-e19c1c87a4be"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{
  3.784231882717141*^9},ExpressionUUID->"a2baec24-c5bb-402f-839d-\
ad90ccb330d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SVMtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"SVMtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7835302259436216`*^9, 3.783530230981742*^9}, {
  3.783530977994622*^9, 3.783530982958741*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"c264edbf-1b95-4dcd-8031-4be784f4ed6b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7314285714285714279`4.080468980712039", "\[PlusMinus]", 
                    "0.0336001519159240536`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0254835, "MaxTrainingMemory" -> 
                    165184, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 56, 15.4797331`8.94233841659669}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "SVMParameters" -> 
         Association[
          "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
           0.024811954236798855`, "SoftMarginParameter" -> 3, 
           "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
           "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
           "KernelCacheSize" -> 100], "TrainedModel" -> {
           Association["supportVectors" -> CompressedData["
1:eJy1XGlUjlsbrhAlQ+ahY8o8K8PhczxvSOZ5CiFDpk5EZChThEg4mUMpKsqY
SGq/GjRpnudRpUTziL6z1ufaZ639rL3e98f5fr3/9trrfu77uq/ruu/99t+0
e+lWJQUFhZaKCgpt//4tVH93ym9NnvDpf7+kt5JZ1evPlWTxgpHaD9TCSdWY
9ju9bMOI47x1Wsbjcon79xVTgq5LyREHh/kLu74nke4ZmTkPk4niiX3SJ9I8
svzkUr+lQ7MJe655YlsbF+8S4VqN1pk4uyTy4PzLAVvsEsm6lGzzxPa5ZFzf
WUcWbPxIGvvt9N/cEE7yut4oHr+rQLg43DGxw8dcwdX+hjDjERGaDpreH/Kp
iTT+71c4avDG59rkD8RcIc9L1ziVbM2rto8YlEFqzocnGWTlktrktH1jAyNJ
mQu5My33NfnZf9u9NuGx5HjogVTNFDdhykBzTxPneIG9b3f/O+nThiYKCdkJ
I74kxZCwHQUbGyoiyQe3HadbFMUSwXJrWkZwAtEO3N3eTCWOuGZs9pz9LJco
zswqjp6eSNzMYtIKv+uLzi196xR6u0Uz2Tm1uvp3EkfjcPjrwuyEI8/ItG76
V747+5JCxU6P40aHkxCVsHGGaiFCJ5+HrRsbywSVzKuNXU/ViM7VLtF5leFX
SgKemPY03phGFjVv6Ph1VRZ5ZPj7iIenM0nd4C4D/5QGkSSPA1fLz0aRi+OW
avhYZRL1Nff/8zL9k/BFuSAzanaz6NxXgtUU/cpaei7iO1e9PiFtchK50k9f
N9V/gtBBEhBbHRhBjvaaVDH3Ww2973AD47L3f4QQ9rtphjiMmbm9Shi1dOni
vgdT6Lmdniz4+Jt3Btnz2ObG1T6JxC+u9413JnHk8Pj89xvTQkhy95UzVNS9
CO/c4YN6HlospBP23FUbj93Mjk0jRZMNXaNXx5E/fW+GRSfFkvEaust9NDKF
urCXkzvphRO1XXU6eas/i/J3WLBWuzwlBWnfi1sudYqIpd8tvnrX4NUuVcKA
Ex+ffKmJIX1cujflTYsltm9u5nY5WC2KA3vuRdUcNW+NACHPOaC03iqZ3vdO
p+dGTmUpJDqg6Wf6kwh6bmBqXGsn/SLhgm9ydKBGHc0HNg7IBzYOG9YtLzjv
HUfiWyd2aR2TSOPw6sr7F3s7lQtzzRK8F7aqEL4dPHlNySxddK6B9lGltSot
pNtGHVH7tkNN8tO60mbKUjWJttp4X+vRnSX5k1+rF6e0lzTtTtL4NrG1BPgQ
aqSj2/l6HVlRXb7felmT6LtZHL9of6dvrCgfjB+nu11amEzmXHusqaMaT+sN
3w1xaKyYarzXqFF0X/+WHgc+7akTWHyIPmQ98MWFNFrHaiV3jNyV44n3nPJz
G3XeELtzLk4rSz9z6832mfLL5mM/BUnspgRL+1fkwIDEKScrn5KDT29+dD8Z
QO+ra/n5vqdODNHtNmbQvuy2UhXvwU02tcpSo+w5LYeb1oryYcHkdztOTM4U
5UOBf8oXpeX/4Nkedf/xve3DSdD75ErJ8TqKO7z7bp33Vv2Cz2cRPizumeup
dy6M9JladeN9wgeyP/2wVvibaHLecPasQxPLaHxn3xlnlXW1UhTfyCFLvlt+
+CbKsxcG7Q4s3ZlIKpa6lmvfiSH5j8uEM6axZH2WacfXmfWCyoXEHf3aVVFc
Z+9b7d5Y0m50PCl0n/e9ovrv/K+dtG/3sGDiVXR+2I6Qj8Qp9enKheaJ5LiR
/twff+P/G+WZbgGDFKQRwbrqa7ybyYHw+1ciL1aI4gtcZ/OBeNhPWaWURoyu
zFw0Li2JxFbse7xgcjzNM/Xrkzpf0Y/n1nH7BrN7L9wLRN/tSfb9xd/NUynu
qJ4mRUvMYv7pFzL65mLLKycaGxtF8V2RpFAYamZF6mv/rB5k7khCTtklj43y
FiZ9WTi8YUcZaZ1jfqEmu4R7LvB3np7zAI/bieSSW5+71u+TSXxd+Zw2x5Jo
XdSH6y7rMTWO7LOP7porJNPv9v/uQ2yeBZ7+eat+VLgIH+6qufbV+T2feLed
+rmbQhzRd9DxnqYWS8899Wz/4KUxhVxc5/Gdlhs+tO7ZJ4X02G699ezzONIr
wvHzEN0Acmvl99gshSpaF8uN7Ea/PVokisMNDy2T/7wqIj7lajtXDwwlMUsy
R/QdEUvrQsvk2Agbg0DiafLBJKrqI3FRW5PcZnOszD5UsXVgvL1xjSgOx54f
XO+tkUMOB8XkNmyKJ6URUW4nlkUTi8clkkUJPyn+8vIBOGmhvCt4WmYk7W+T
m2ddrlbIo/ng9jLw1AiXWLJ9pW6LSrKDoF/w+INGB70LJ6rriKvmIrPem7yE
3s+rrPdU+AqWewPnndfMI38duVTnrx5Joi9cHVn7MIbGAX0TuMOeq3AubPWo
gDIR79s06OyjSLU3tL+BP0Q4WNeseK4sudwr47bq1Gb63dg8C2/3OLzk2SdR
/tod3Tlb3TWHnou6WFztu8PwgTfFBx6eDc6dbphs+YPy38PB53q6V6XSugBO
4ruhD+Fc9GP23Gd9rH4UdvMS5UN8RaGSW1gOkQ48qXVkZgy5uchk7R/DPlL+
gP7GOxd5xsZ3zLEfqZfNQsmpzG4j1rvGEnv7Xaa3UmMoP0Md8/ABfJ29r0Nk
hVo34RMBjzq+v/N6lQ4x//Q34CTnuy3Y/GXRtk/lonNfDdaZai99K9hKuls8
+EhoH0KeAc9muUY+OpLfKLovdAt7ruet/No9YZ9I6JmTVgE7/IlefLv2DT9D
Ke6gjnn5AL7D5hn0BfDB/vRzg4stQ0jChin5qiq15FyHw5U3vn0lvD4EPGPP
1dw/YXeP80U0f8Gj5m/d+FuKZlvaN3uHfj3r41Quii+v3h7ebe8RVFBG8wx1
bOd496PX3QKavzyeiny4OCkq2X9ZEJn9ztBieLCUKCXqLVd670h5teaGXp9O
X/xIHm3PfV3voCidc23GY++HTVycRL+AznprMttVxyCe6Jx3Sepe70159SXf
6g3Z2e/pfXUnCdm7z1SREV07LQ9SF/MH4LrCzc7+p10TaB0PmbZjwprcL8Ky
pxXGDxbG0j4kr76Abum02ebi+eBoyncUc9fmBYzIoPiLvsnTx7xz2fzt+WhA
9/BbCZSXaHu9atw2PpQ0LjEIC7XIFVDHvHP1p/v6WR9qoviAPLM4GHmlNCWZ
ZPbrvX5XlwQy/054WzfNKBpf9CHwXzYfRkwfp9rB2U6EO8vzupidy84iHpU1
9174xlN+tntLamk/2yLKd3jxBT6w/Ax6CPUGfgYdi/7Gi8PLlCS91LlRNB/Q
N33zN5p19Qgiq8cPKncyiyKnx3ab7bE+gvIo1EXHUWVtOpg6cvEX/Aznll1t
jlN/mk0mbOl7+eCJJFK70lPqlRBMvxvwLLv1MoUKuyour8Z9URdTZiqXHnua
SHUL6lheXcjTm/B38N308kL6t0qI4+Ikey549bp13a+/r60QnD7fP/kyo0q4
13tfenazugR80lhPcZLx7mDaN637Tht591gF4eks6AA2H+BrIH/R31BvHUpT
J2wb2SSs1HQZbtVbUcKrCxZ/Z3boOSPqXjHFSdQF+ib8KF6e2RWpaD2dmCzy
YaBbgDvwz0wsEhROGNUJ3fcYXbxm9kGAHuLVG+IAPJv44XbwML9Umg8b3w3o
O/lrFOU74GdalbPW3DzhzK035APOhR5CfFHHwHX0N16/QH9j8aHb4CePOlf9
wydxX+hN8HUe30EcWD301a7m/POGz6SPb9xB3d4vhAUeqlNfbIkSkA/gURoL
gy8N2Z4pOveHieaQWx75orrwcXlsWPLiGo0D+gXORT7w+DrqmP1uwF/7eSUh
5qFulJeA78A/452LumDzrGp+1yCtT/mUP6CO32juVzKvq6c6ixdf9E3cF37q
ghsVW3TeNQrwf8FToY9xLu++yAf0TeBZm8yxo3Z3TCAjtJWf7enhTXFSLSXI
RWtkOe3zPJ8AvgabZ9BZ4JP7Sp4MS+n/kvolUUrpxb+P/yGscAjY+G7hT1Ec
gjcNlVboZYvONX0ZdOLHnfC/7/l2mZeKj6B6oFWC7r0PJL70ddnbmlYS1UHf
FJIfKEp4+NBHo9egec3fydUZOfXPJviR4pbd20a8f0MMC+Ou3+8cTswLW3R5
ujlOmGj78NvAgGc0Dogvz0+FfmPxDP4Z+AN0IfJMlh5CHKA3kQ9xL8aVW8Tk
0e+WO2mFp6ZqMO3z8Ll4/cLm2sYTxjurRbxE7y/bp6f00qhvBF2I+wIneXGA
fmPxoWj6An2fpjiqu6FbgL+yfK4XTR4Dcsamiu4L3of4oh/DT0Ud8+LA80ug
u3Eu9BDyF7jOu++/Ncdhzy12bLrW5mu1qC6gh/St1jtmmQbTfow+hO/GOxc+
Ldvn57X9anv4VM4//PeXHqL87Bf/5eGZYYdhy6cGKkhYPY+5E/rxNsuZk/3m
SrnzCx5OsnUBXGfrTV6e6qX1zMmuqILgvqxPe7cp72yLgwnCqH6zf1cOfCvI
q2PR39jvBt9ed0lcu26fQ2ldyIsPfnUpmb2NKoX2BopHryxPp3XB6gDwdZ7v
ydYFzwcfcETwPijJJMZGz0/u/BFOz5U3DjjXZZPzvZgT7oLtXxNW+UhdBMmc
nY5TB9YK0BfrI1Z201v1gs4hzx2dXl9wt4HOReTtF7gv8gy6cNXQLm1tj5TI
7Jvgk/DX4XsCd/DdfBpcrBX3B5JHd9oNaTe7hPKofXvNLFvYVIvicCJ2km5O
aRXlO4hvzD6LzCXJBZRPQg/Jm7/QQ66qrk1FJZVCSGSxw/rbtcJMbV9F44K2
kvoLZzdrb+4pSe9pIpiFjpJAd4NP8nQAvpvnlztrTXRqhaGHVFZeKWwQbHWJ
xazNKeS35/NutYgdKDEo9n8lse4vQR8C7sAv4fFJTfsyx7ZTP9A6vhQ47L7D
igQR7sgbB/h9wAf4ytDz7RdJNAb++Q+vhn5bHJ9y8urABu59X89fGT/gR5NI
H9vr2IdU6sVQXo25NHAy0jlJo7JLjbDPouMDx+Tvoj4E/GX7EHQL+C/mZPCr
4e/wdAvm0ogv/BLo+ZSqLjn53TMEdxcV077RIVx84PlyrO7usXWz37QvOdSn
xZyMN4fkfTe2jhFfVdVtyg3zwmk/hp6X5RtBH6cr6+gc0h8k2XL4/rYtOkVC
SnPqgP1RYQLOhc8F3EEcePz3VGnmgX2KP0W65fDkHsel2akC8hfngpegb/Lm
sfAReXNexBe8r/x2c+DdXlWktXOeV7dNmVx9obOmrMnwQZ4oz8AfkGfw7dGP
2TjwfGW2LqJH+1l9GPpeYHnUxJZzBf0ZP4T5xpU95/u1lhj1uJkTaN1Swp6L
vsnqN/Ao3Bc6i4cPPN7H8pJk6cCOcxN9qc6CHoLOYv0z9lzwPnbeXb/KSrqo
Q6MAH6Zb/u6gjQd8iNvpTp08TRoJfGUe/kLHsv34Y1Pv5rW3smgcTqZVZGx0
iqO6RVYdq3fuHatLvgr1aU/a790VQPHh5QeTi0cM1CTIM+gs5Bn6Me++mMey
+Iu9FcznA2z7nNzgH0n5Dvgvzz/Dd2PzzHf08K6KHbPofBM6AHXM6gDePgEv
vtAtyDPwatyXN9+E3+ddYqW/4WU8xcmcWQfbt+ueTuc4mGfJy/tQF9i7Qnyx
fwb/AfsPFB9+5QNPv11w1u41cX+DyOd6lW5+221dLGmr7+g9Yc57ci8//bd7
t9wpngF3JkmmTG29oFR0LvZ3IvzCN1wtfEyuGn7KGmF5SMD84v77DP9HS18S
ZY/ZSdcOv6f8DP1tdnMT0S2u4/I+Vgegv+G+wEl591agN1mcDPKy7By0JJLO
u9dVbu1vExZG57zIM57fh3pjz3VKLxiZP+OoAL6O/EV/A57x5nozLFLO9LFW
lLJ80tzXc83OskyKv9s3xKg/cHxH+Q7yl5cPPF4CPYT5Jvau5J2jQ79hn2DR
gXr/jAAH8jnXqUN0Yh/qV8/1+KnkfeE5rWP0eZ4uhK/M3reV/jvpm+15lFfD
V5ZXtwDP2Lo47ysJG6P8XABOwkeUtw/x5rxbnyqvL9iRTfkvfBh58Qy8GriO
eSHO9b2027jz4Gg6zyr44RCfcLma6iHeuTz+cKhx059XC9MproOvg09iLo19
T95+FBtfzBlaTmyMI0OTSD+V2kNTYuPpvifbL+TtmysyVEcNG/6Z3hc8FfkA
X5nXh9j5Mbtng/0o4Dr0EHRW75WLY04fKBDVG29PobzzzvptTum0z8P/xX3h
98k776bfrXr14AnjCuleG3QA9jJl6ax/a++Kt1/Cnot9T/S3tYr9Jly7G08G
GxUttHv7U2D3Vnh1AR8c/cLfMOLmrrtSAd8N+0bgv8qLJFd07Gq4fAd8Hf0Y
vif0xeG1Vvr9oxyFF1snBd1r4S2gv6EueN/NfeKpwmUvikV6CDoW+btw25GY
NXse0jrGfXl6CHEwPGqnO8hKSn3w1jdM4/MNc6hfAv+MN9/k7UexPi38auQv
zsW8W5ZfjfxleZ/xg1jDsTdzqV+NfIDe7F77n+yUg+nc/B0bc9tqjlsunYuA
n6G/Qc/DN0I/hv/LyzP4iJgfIx/OhSxfVb4ng2w7bPra9pUX3dcAj4Jfwosv
7subH7N7IMAHzHF4+wTwNVgfcZh5F8VBgxJpPmAPGnHAnLfMNtj1alclkX5b
tIcUjy2voXsrqLcuWgG/Jxh8pXsg4KnwS5APvPxl5xeIQ35QnvZmlWTq7yDP
UMfoF7z9Hfgl8DXQh56m3lBxCMinfYjdi5e1JzbPoWz/rHVuovwFruO7pZ7e
ZuPZ7bXc+yXIh5ZLvq1z3BsnpFsk2LSpixVQb7+V+RSfSo4mve5+udxqzRO5
+zz8HfAzzAvhy4Gfsf0NPIoXB96cF74G6g3nIr7AHZ4v9/+KA+Z6bJ4d0W4/
eePwAtF+H/SFrHnLt9VLpkQYlov6PPCX3SumPswvncXrm9hjYuebb+869bL5
kSMcNgi62VPnLd0DQR/Cd+PxdcSB9UvAdxAH1AWNwy/85ekW6CHsn0HHwkcM
+3ox4v75ZIrr2HMEf+DFF+eyePZ04KZHZwaXCehDwHX4O/BhJnVxHnc//Dt3
X44370aeYY4jr1/N2z971G23zdv+QXSOjvzlzRnY+GLvisUd7K9jzwb6DX0e
eCZrzsDyyY816m+aCorpu6Sdlov3+gzwE7CXibrIvG/cs7JOWbQXhL7Jnou9
YuQZ5k4XRmokbznfku5lniodvWyfRb7ou2Vc/z69xZNCkV+NOQ70G7t/hjjw
+jwPH47XTnqjExFP+wV8T+wVY97NO3fl0K4XqjZXiPIMPte7bDeNxZofSFye
z3WdLWFynwucRD6gLmqS/jKfM72U+gRsXQB3eDwV+bvdxsmo+1YfqucPvnLu
rPp7seg9GebomIvw8IE378Zc5Lp0R7sSrWRS2PGjf1aLBKo3sdd2QCEpKHp9
sQgnwR9YPIPehI94rWFOecWueKIwZZPXducKmXsgVlmqWe619dx3gNAXOBe8
T5avccm+dr1qK0Upy6uvhdqu0g+vFnBfzIfAHxBfns/Fe+cD3oc+BF951n2P
MZofm+i5svZWWDzDe5FXLmOcJma9oToW+2clz3anEXclCW8uwtsHx7tF4A67
/8DySd78gj0X+1ys/4s+BB+cNx8CnsH/BY/Snj5Ef1/Xf+oC/jrmIkNvmgz5
6qQg4fmIPN8IPAp8kn1/IavPo47Zukjav3b3etM4uk/AvrPE3JQ314MPI2s+
j30Y1Bv8Et59eXvQ7D44/F/4RuDVPNwBT2XrGOeijvEeEv469Dy+G09nsfcF
T8V9MRfBXhD05uDL88dftfnE5TvsuZhfoM+jLuTVx7w86+Q247SfQhHNB/Q3
3h6/vHMcvPOBv466YH1EHk4iH9j7Dq66Z29imU/PhT8p714x+jx77vZRplZT
1qVTPxW8mu7LyYjv5SDtVW6L34nwYajWCtebB3JF71Dk9ZWvWprNeRXWQsLr
m9iLRz/m+Z6y9qOAD6gLvPO5NFPBe2Tf6aJ3avczlX6sIa1EvA/7MCz+Ir7Y
K8Y7H7bPy/IJRO++mPeb8AkwN0W/4Pm/uC/bj5Fn0AHYVwavBl/n6VheP4bv
yb7Dhg5AP+b5GjycfNZjoUaIby5x89SwOXMrjPLfC3MWjOtp8IP6Rrx6w7yb
9VORZ+jzz/Rebz5/4hXlk6gLHi+BD8POA+CfIQ7IXx6uy3rPCx3A+pPob8gz
1IX/kFbv1FrL/14Pvhx0C3AS95W1Zw6fAP+nAHzAnmN56S23ZUdeE4ehGxY3
envRc6FbePkAPcTzacEnWVyX5cPw3rnjXT7bN+m8m9kjlfddHd0/+1Vv6JvQ
F/D7SjoGtFmX5s+dx/L2tpEPyDPM31iflr0v5mSsrwH+C58LfBLzFsSBpy+g
31hfOWiH196UsnhBdcCUuw57Muj++gpJh35lyxspP+PhOvb72PjifQv4L/gZ
cAf5y8Nf/I8LW8fYs2HfO2EfXJa+4Olj7Csjz6BboC9Qx7w9JtQxy0vg77A6
C3wd8ZW1r4E9BdSxkXNltGazM/VTizouTc/YHS5gnwD3lfV/Cqxfjf0HxBf1
hvxFf+PhDvome26RbbdGlw3v6H2h34APsuYimAew+Du4wT09SiuV7sXjf3Lc
q9cHuJ2rkPk/AiWeUWPi6hvo/wWhD2HfCHwH/Bc8Cu9QeHjGqwvkA3g18oHV
87z/N+LtkeK9E/YRsV8CnSVrDwT6jcUz9n8PWH9H1vwYe9Ds/zxhH8ax/7A+
kz89FiyODh00cZef3DyV93826JuY4yB/5d274u1zIR/YPTHUm6xzzUs0La9f
aCllv5vp9qYc9SmxdA8E8ZXX/83w6DKx1kpBysYh8ltr09tjXgp414H9KPR5
8CheHzLz3bpa3SlHpLPw7gvzY8xbeP9LxZv7Q7egv2HfE749qy9kzdHBU1k9
tN+iXk+oziZXw8Ncm9oHUZ6K+YWsPUfsGyF/gTuoC+gs1qdFfMEf5P0fLfAo
5C/OZd8lbZ5jYNlsGyHKB96cAXN/3BdzBoeip/3z/74X4suLA3g1fFrse+J/
MKLKN34dfvqacCR3xJsHKu50X4PyVE5dIM8QX7yTQL0dv/FHV23rkL+/l7tm
uksQrTfkGc/v+7fmWTwexfs/PPRN6DfgJOLA41Hom3gvApzEexzwPvAo+yML
osOiW0hdG519f+YpStUmBHXIOVvJzV82zzCHBO6gD8E3kuXLYa+CvS/0PPoF
fER5/5eKN59vXpk52iPKi94Xcxz4Z9j3jDYbeqa7eQ3XT2XP/TJ3otbgeR9E
fhR8RFk+AXQA+78+8AmwH4V8uB1+NGR0lxbStk9mrj/75Af3XPg7vD0m+LTw
d3j7XGz+8v53BvyX9bkwj5Xlc/HyDL4yqwvl7m+/9CbrG0EPIc+QD9gLkvU+
i+VR7ByHzV/oFllzMt6eLng14gt9AR+RnePw8IzV3cCdNUrTjm9680xg92xk
zXHY/xlh/88R+1HwudDfZO2XgJ+x98U+LeabmM/Tdwe/5oU83od9cDa+eIcN
/oA5GfgO6oI35+X54NqzxznGh2dSnwDvvvA/ZYgvD9fhy5mad9GICcgT8H7I
ul3Z/AV5XSXgvy5p8/fteRRA+xCdQ3L0Jvbt2fvi/wbhc7F1Ab6DPVLe3iBb
b3jfzfISOr+ALpTBf9nvpjKg3LrRv0g4/qyjZ9KjVGG6S71n+ctkro6V158M
HFjTY4GQQ3Ed/i/8SfTNrB2//bE6r14Uh39rX449l7dXkRHa7rP3wGyKO9jb
5s15Zb13Yv8fEboQ++uoY+y98t5RYY7Ongv8Zc+VFydZfx34cFF4NaHQM4/O
Y8FLwKOQD5hn/Rd2Zaym
             "], "supportVectorCoefficients" -> CompressedData["
1:eJxTTMoPSmVkYGBgARFgwOFAK9pIOCKea84Be3RxA13xdpOT/+xnfJa+9Vfu
GVy+bl741TTB7xjqqU3v2qK6++9XNpzyBdKF548b/IC746R2EueU0wj1E3zs
ZlwN+mrPuU+Vxcr+D0732of+nZe4ihlD3Ooz610uJ0z7jQ5FBfMKf8BpXoPV
vQmpcU8Iho9Zd/H1Ff9vwNXJW7MuPLHxF059Qp5rNyXte4Mhn620s19tByNO
e7TljqtMrmZy8Gi6UyQawoQh/87kfNTKOx8xzJ137yWTxaKnRMeztOIb9Q1P
MM2B0YteWhxarX/Enmen4Fz+/M323dzzq1lO447fu06rFynXMMD5HLHrpl2e
/cs+o1UoZofLVpLTX/zkRe8YJb/C9e04e1p0Ihvx6fibR3201bVr9g5WLvxH
QjYRrc9yf1as6rTP9p1Jmx62b3xF9XzjnxazZX8TIpzitS+92NL41X7fjEni
5UzfiLXvwCg9So/SQ48GANtBBLU=
             "], "rho" -> -0.8813167941265689]}, 
         "ProbabilityCoefficients" -> {{-2.5946173667907715`, 
          0.6675013303756714}}, "MulticlassStrategy" -> "OneVersusOne", 
         "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 11.], "Key" -> 
            "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> "Perfect", 
            "Missing" -> "Allowed"]], "Method" -> "SupportVectorMachine", 
         "Options" -> 
         Association[
          "KernelType" -> 
           Association[
            "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
           "GammaScalingParameter" -> 
           Association[
            "Value" -> 0.024811954236798855`, "Options" -> Association[]], 
           "SoftMarginParameter" -> 
           Association["Value" -> 3, "Options" -> Association[]], 
           "PolynomialDegree" -> 
           Association["Value" -> 3, "Options" -> Association[]], 
           "BiasParameter" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "MulticlassStrategy" -> 
           Association["Value" -> "OneVersusOne", "Options" -> Association[]],
            "Shrinking" -> 
           Association["Value" -> True, "Options" -> Association[]], 
           "KernelCacheSize" -> 
           Association["Value" -> 100, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.5810206639467216, 0.03802822627562723], "Accuracy" -> 
            PlusMinus[0.7245309620798946, 0.03399936957742625], 
            "EvaluationTime" -> 0.000033448563218390805`, "TestSize" -> 348, 
            "TrainingSize" -> 60, "TrainingTime" -> 0.1947427, 
            "TrainingMemory" -> 130824, "ModelMemory" -> 22824, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.7338004881210973, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.5810206639467216, 0.026890016675992456`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.7245309620798946, 0.0240411847842657]}, 
            "Configuration" -> {
             "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
              "GammaScalingParameter" -> 0.024811954236798855`, 
              "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
              "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
              "Shrinking" -> True, "KernelCacheSize" -> 100}, 
            "FinalTrainingSize" -> 408], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 226375028138853]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.005065321849613141], 
                "SoftMarginParameter" -> Association["Value" -> 1.], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6457880601206751, 0.05018685148025907], 
                 "Accuracy" -> 
                 PlusMinus[0.705766914420397, 0.032403554926881364`], 
                 "EvaluationTime" -> 0.0000311678391959799, "TestSize" -> 398,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.5376507, 
                 "TrainingMemory" -> 160912, "ModelMemory" -> 13096, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6586131496090126,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6457880601206751, 0.03548746300809331]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.705766914420397, 0.022912773423348572`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6008593335277715, 0.04167280922522768], 
                 "Accuracy" -> 
                 PlusMinus[0.7144280896555192, 0.03440483238424247], 
                 "EvaluationTime" -> 0.00003484051724137931, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1230033, 
                 "TrainingMemory" -> 137616, "ModelMemory" -> 21800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7090261059310736,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6008593335277715, 0.02946712599425181]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7144280896555192, 0.024327890284484382`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00003484051724137931, "MeanCrossEntropy" -> 
                PlusMinus[0.6008593335277715, 0.04167280922522768], 
                "ModelMemory" -> 21800, "TrainingMemory" -> 137616, 
                "TrainingTime" -> 1.039504164], "Index" -> 1], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.0012395275981530174`], 
                "SoftMarginParameter" -> Association["Value" -> 0.1], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6049187946313934, 0.04150357626877674], 
                 "Accuracy" -> 
                 PlusMinus[0.7144280896555192, 0.03440483238424247], 
                 "EvaluationTime" -> 0.000027642816091954018`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1032137, 
                 "TrainingMemory" -> 125656, "ModelMemory" -> 21800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7043715529908742,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6049187946313934, 0.0293474602231451]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7144280896555192, 0.024327890284484382`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7225260042063886, 0.13061828543079218`], 
                 "Accuracy" -> 
                 PlusMinus[0.6812669987279566, 0.0731933965337458], 
                 "EvaluationTime" -> 0.00005576707317073171, "TestSize" -> 82,
                  "TrainingSize" -> 326, "TrainingTime" -> 0.1378298, 
                 "TrainingMemory" -> 529856, "ModelMemory" -> 55592, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5769467219727841,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7225260042063886, 0.09236107537507317]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005576707317073171, "MeanCrossEntropy" -> 
                PlusMinus[0.7225260042063886, 0.13061828543079218`], 
                "ModelMemory" -> 55592, "TrainingMemory" -> 529856, 
                "TrainingTime" -> 0.27571234539877304`], "Index" -> 2], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.08752492768840528], 
                "SoftMarginParameter" -> Association["Value" -> 0.1], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6478713705702833, 0.05033703424394076], 
                 "Accuracy" -> 
                 PlusMinus[0.705766914420397, 0.032403554926881364`], 
                 "EvaluationTime" -> 0.00004580678391959799, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.1219571, 
                 "TrainingMemory" -> 100216, "ModelMemory" -> 13096, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.656497626863922, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6478713705702833, 0.03559365825870996]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.705766914420397, 0.022912773423348572`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6027906652134958, 0.04123657996782225], 
                 "Accuracy" -> 
                 PlusMinus[0.7138927035584292, 0.034487270739457586`], 
                 "EvaluationTime" -> 0.00003775632183908046, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.0978529, 
                 "TrainingMemory" -> 136544, "ModelMemory" -> 21800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7068862941718941,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6027906652134958, 0.029158665328188452`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7138927035584292, 0.024386183004486854`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7220034181542947, 0.13104047742840283`], 
                 "Accuracy" -> 
                 PlusMinus[0.6812669987279566, 0.0731933965337458], 
                 "EvaluationTime" -> 0.00006006219512195122, "TestSize" -> 82,
                  "TrainingSize" -> 326, "TrainingTime" -> 0.3620361, 
                 "TrainingMemory" -> 534032, "ModelMemory" -> 55592, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5772845756305892,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7220034181542947, 0.09265961019954636]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006006219512195122, "MeanCrossEntropy" -> 
                PlusMinus[0.7220034181542947, 0.13104047742840283`], 
                "ModelMemory" -> 55592, "TrainingMemory" -> 534032, 
                "TrainingTime" -> 0.5750574950920246], "Index" -> 3], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.01660344841839695], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6004595563800597, 0.041283554811731814`], 
                 "Accuracy" -> 
                 PlusMinus[0.7144280896555192, 0.03440483238424247], 
                 "EvaluationTime" -> 0.000033920689655172414`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1224859, 
                 "TrainingMemory" -> 137112, "ModelMemory" -> 21800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7095824425331322,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6004595563800597, 0.029191881558862084`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7144280896555192, 0.024327890284484382`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7065800901754956, 0.12548483313567974`], 
                 "Accuracy" -> 
                 PlusMinus[0.6812669987279566, 0.0731933965337458], 
                 "EvaluationTime" -> 0.00005137926829268293, "TestSize" -> 82,
                  "TrainingSize" -> 326, "TrainingTime" -> 0.2477565, 
                 "TrainingMemory" -> 534032, "ModelMemory" -> 55592, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.590330072356651, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7065800901754956, 0.08873117644630152]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00005137926829268293, "MeanCrossEntropy" -> 
                PlusMinus[0.7065800901754956, 0.12548483313567974`], 
                "ModelMemory" -> 55592, "TrainingMemory" -> 534032, 
                "TrainingTime" -> 0.4325615196319018], "Index" -> 4], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.06937168695424864], 
                "SoftMarginParameter" -> Association["Value" -> 1.], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 5],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.024811954236798855`], 
                "SoftMarginParameter" -> Association["Value" -> 3], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7102010194549082, 0.07025206386054944], 
                 "Accuracy" -> 
                 PlusMinus[0.7160790433574457, 0.03206061146597384], 
                 "EvaluationTime" -> 0.00003308718592964824, "TestSize" -> 
                 398, "TrainingSize" -> 10, "TrainingTime" -> 0.3530354, 
                 "TrainingMemory" -> 113856, "ModelMemory" -> 13608, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5963884650839475,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7102010194549082, 0.04967571074814489]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7160790433574457, 0.02267027577657728]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5810206639467216, 0.03802822627562723], 
                 "Accuracy" -> 
                 PlusMinus[0.7245309620798946, 0.03399936957742625], 
                 "EvaluationTime" -> 0.000033448563218390805`, "TestSize" -> 
                 348, "TrainingSize" -> 60, "TrainingTime" -> 0.1947427, 
                 "TrainingMemory" -> 130824, "ModelMemory" -> 22824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7338004881210973,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5810206639467216, 0.026890016675992456`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7245309620798946, 0.0240411847842657]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6954541377880135, 0.12884202371398448`], 
                 "Accuracy" -> 
                 PlusMinus[0.6812669987279566, 0.0731933965337458], 
                 "EvaluationTime" -> 0.00004764024390243903, "TestSize" -> 82,
                  "TrainingSize" -> 326, "TrainingTime" -> 0.1625382, 
                 "TrainingMemory" -> 567128, "ModelMemory" -> 59688, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5988866599511063,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6954541377880135, 0.0911050686699564]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6812669987279566, 0.051755547027087595`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004764024390243903, "MeanCrossEntropy" -> 
                PlusMinus[0.6954541377880135, 0.12884202371398448`], 
                "ModelMemory" -> 59688, "TrainingMemory" -> 567128, 
                "TrainingTime" -> 0.5564574417177914], "Index" -> 6], 
            Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.08723174723912364], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.014786439367996479`], 
                "SoftMarginParameter" -> Association["Value" -> 1.], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.04767826166722683], 
                "SoftMarginParameter" -> Association["Value" -> 0.4], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "SupportVectorMachine", "Options" -> 
              Association[
               "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
                "GammaScalingParameter" -> 
                Association["Value" -> 0.013603878244656475`], 
                "SoftMarginParameter" -> Association["Value" -> 3], 
                "PolynomialDegree" -> Association["Value" -> 3], 
                "BiasParameter" -> Association["Value" -> 1], 
                "MulticlassStrategy" -> Association["Value" -> Automatic], 
                "Shrinking" -> Association["Value" -> True], 
                "KernelCacheSize" -> Association["Value" -> 100]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 
              10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["SupportVectorMachine"]], 
              
              TypeSystem`Struct[{
               "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                "Shrinking", "KernelCacheSize"}, {
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[TypeSystem`Boolean]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}]}]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 226370733171557]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843917811063183`17.33057107977685*^9, 
         "PreprocessorEvaluationTime" -> 0.0000123722665148064`2., 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.9370240000000001, 
             "ElapsedTimes" -> 1.7515945, "ExperimentCounts" -> 3], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 1.1712800000000003`, 
             "ElapsedTimes" -> 1.5356171, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 1.4641000000000006`, 
             "ElapsedTimes" -> 1.4116265000000001`, "ExperimentCounts" -> 4]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[226379323106149]], "ID" -> 
            226383618073445]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 5.9278475, "MaxTrainingMemory" -> 
         1179392, "DataMemory" -> 806280, "FunctionMemory" -> 310320, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 56, 21.3062656`9.081082268436207}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJxllXk81XkfxX/3XlupUVIiEyJiHqFGEVFIRkXZclEmSzVopCxZK7mVUJQ0
MqKbKGWJyH6+d8G1NTItolCRVJSS3b2P5+/nj8/r/HX+Oee83h9VzwB7HzpF
UYVz9z91u/HxJz/7GkSrDnzraqSRl7ZZQmk9Pjpol673NwvRzZ7MXKXWgpvW
4QdUxydhu69ryrq9Di9PRGRfzpmFS+Xm/WMONdCdtNAOmfMzH/XQGLc58KE6
5Lp8KOK4yNXp2oVK5C6QkZy5QCdGX0w1T9nysa39/YbCUiHYl1xv2vjlg/az
J3veUklySO2b+9f6Grw/f1lL4T6N2IT6blnwoxy2nxRTmugMcmOh5eV57VVI
++ouytClk30Wmp5eSZVIHvAucoijkzWy6oVdso2YYmqoTWdO4+H1a+adaQQ9
o5d+T+ykiLXHsb02z0sR4X1pSkxKjGg1a96Q9yAYCawTWf6giN+EqkWgYTsK
H19X1XMYw76u4sgNky0IbrxDFiZMQiJ9IGCnPxejVl7nY5dQZEyGPdidU4t3
+aduGwfRyI6/rijJtzbCzCcoedmGaezSUvt9/Fw1DDMq30JIIzqiqRMX3Tlg
xvyWz42liFbFmZ+ucDkYXbBj2odJEe/kB+YD3+qQpDfY8TBpFk3UmRTxRCDz
/UmbRBMaWaUfFb1IjYv+XUh00qfIN/PTxR75HOQs3sSx96RI3/hYYmZXNjrv
L//Hkz+PBP1qyfhxUwDHWAb7+ZtpuKpYXojJfojTj+XyY0LECCfa/+vEIPDn
Zx2XCxo0IqPEM920rwqlojDvB3Z0cvdujG9fIh8F6f7b+88J4avf1v3YuQbv
LH7LqRTQSGoky0XZgOBCTqBsmhSNvLFjd0r9WgfFzcNdebJCyEJax8OBB79E
WsX6QBHM1NOfNXq0QsuhrXOMOQkFq4gXkP4XjvEJGR1lP8BUKPbubapHYn+s
ggNjFset4vf5b62Hdkno4Zvus9Cdd2bs/sYa6ESk6nPbaGSv+llDrjNBfVmm
tfwkRcxc3azsZAgs1pj16ynSSGBQd4b/w0cg2z5J2h5iEBcnRccPf1TA6a+L
gaE9dKIXKx8yX7cOW3bdsV61TIg7PI3NI4xSeI9kZTs4iBGGy047e1o1/tyW
4dm0ik4sv0k8zspuwMGJlynHwmeg9nytb+xwOcyXaso0ijFI3lqHx6/6yhEp
uIRqSQaxy0zaOLSMC7F5uisdNlBEU3HbRi/feggX2MTVbZ1Fgfj8MSc1Nkp1
SvJVX88nmktVjinm18HgQ77yPcxiomCvYESWg3pHqRWPsilyQUTH7pQGpDt8
Cz8TO4N0v4QggQ0HbYtiov0TKPJVfSbcRK4OHZzsNy1rhIj5rbJN/wQPXewb
IbJOIjgpPflHTL4MF4OKI46OMIjEI/MsWm4jdtoaLgjbMY3v6gFW6x5UICnv
i65pE50sHBdIJ66phOBedZVpLp0MK5ycH7SwAS564f3vOmZABpwErI8cLJls
v11iTRGjfd2bTWy4iP40f8helSJXPRRX7D7JhWvwk5guaYrsWJ7EPvGBi/g4
E28tvgineq/xhEZNkH3Xp1AwOQVa7ptgi2BgtfWJXENzGjGrTnLff5gHOtPm
yKoDIoS8sLoaPUTQ2rn+kn4pRULjRJ32BwiSvDoOmY1SZCUrxe3YIT48I51F
124J4SyXpTUZ8QizF63yroQxiGLn/t4zik2wuJ2VLik9jdoV/TKZ4OBc84eE
W64UsfE/vEtiZTNKSjMs2dFTUAvjhI7Zc0AZ16T0nacIczuVw5bjoSqhqjnn
pgjXAn4pPUUrhoqNH2fyjDhZrLg3ISWsAScD4x2WXJ1Bo7F6Ws49gq9Dlclx
7RQJtswv/Ol0JSJdnz4qS5zj12f5qZgxAVQe9pv7FE0j/uztcYNoDjZ233ru
HEIR1d5dhWUWPGydXhFgHCVCPIPKU6XzkG1U0rq4SATNDQ59cqEVYLfaFp3t
opNfRE9T8bIBw0cN7vcwZ3B53PRJwnEOTr5eIN8fThFWeix3gMZDy4UPDLM5
f7jj+RKBAR+yDXdSSxqEOJLL7Emuy8EqrxdRPnLziHtCy8jdTXUwjHLTlP1J
iNyMDSZhonpUuAS3cN7M4GbUibamYYKCZ5EVNx7O9bv3nLd4Lwctqn6Hluyi
yJPksrxLJs9AY6c4ORmPold7lPVa+iHwUsFft0iM3K0U6qjmNKG7iVLi1U5B
OTUmtSSPi0LlOCfqhwiZqTPqzZ48pM6u5nr7iDDULNhlGDK3p6ows1gZiqwg
96nlqx+D9ezvK1XTExhkSu3ZezIPXk2da0P6Jcn5chhy1fkQeromaT8V4upC
VvvKl5XoFad/yg2iE3tlZ420wRoU2zWUO9+ikYtdrSp6KsVQaA4OfhUiThob
Ih2OZNSALbV74+0yGtEXC/s7KqsRnQXK/1ltN41Wcf2FM248HA46tu66rwgX
+YJahjUPcnktgZ/DRPD3CPkyL7UKxsmbn4pvoRN/180BhRkcuJ458nb0MEW2
tEzIMNw4uLO2/6k/iyJ1xwIqnrJqkHm0YiyvmkZ8mas2GLJqUft+cjQ2kkaM
LOiunCKCcHQ3m7ZRZFuTlZLEai4C6pblnNOjSE009/333CrkzzwZWWFMJ6FX
5PcXDfJRM9mvfMtKiOTVDP/I0kf4PBgTNXaQQWq1QhQ0D/ChOEQ30LgjxMbx
T6+/i/GwPjlueXe+CJdt6eX8sFqw2PKSzJM00hbf0yOpNZeHnY5lwlMakRr8
vtzSvQH8zclTDrkziIg7fNAjiQuP4YmtDHGK3NPZ5OVhxAVzh0X7ujUUES37
8m75YYKlMpNGGiMU2UqxYqwDCYSO5pWjnymi197T+8yND8O1Sjep+0KsCdFm
PVjJQbbpbOaVTIoMdOt+fFtUiWs5R/pkTtFJgumy2h3vq2A0z8tVSXuOz0f9
6AMfq7HBzU+9rI9G9qyu3Bl9vBl7dTLX5+2ZwpP9gx8uLuHA+LylzbE5nrrl
nugu53GR5lYspfZGhErJkAMeG6thZb6+xkSOToK/uLP1tHnQMLz7y3CSCG8P
uY/+sK6DWseWch0xIfTzGuLDlwCXvXQjapk0sps56c4U1KLAZXGThP/cfzKv
9j0tEKD8605lg+ZpFBCNnKjQYqy0XjoiZS9Omv5lrXshKodH9sSqUyI6kVio
p/ysiSD+tHRTCp8i7sWLb90YFyDITPcGKZxG4e1FLA/9WjhpGw45JtNItsz3
PfvmePFFUk3aao4XQ+1M33veBNbXnx559I36v/2sGzm4rnOEixIF5qXWahH2
NRx4zNzOQ98ro5UB4SJsbzAdfq1yBwrqZrZXsqRI2oKRq273i6B5gbB0lCSI
qq920IvhatyU2PKg4B2NeCn9vsnuOQcqMtqeqnsoMrLC4lbcuTYcsuWfjSgY
hzNfXclYswaOo3eyGM9oxK7i+PEMlWq8YQ/UMxXpRMOgS/L4i3p8cvrXetv0
DGrr9C/nDFchumFsU4cmndT5ih0KWn8ffd+jjm76Q5IUbTPp9E8rgaOCe1j6
KzESs/3nDNbLKmQvjixN0aETfZfKAik+Dz9vLZp+tkKEzqAJg4lQAVamdobe
nZrGfwG6TdEQ
     "], "CountMatrix" -> {{128, 0, 0}, {47, 0, 0}}, 
    "IndicesMatrix" -> {{{1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 
       21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 39, 40, 42, 43, 45, 46, 47, 48,
        49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 
       68, 71, 72, 73, 74, 76, 78, 79, 81, 86, 88, 90, 91, 92, 93, 94, 95, 96,
        97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 
       113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 
       133, 134, 135, 137, 138, 140, 141, 142, 146, 147, 148, 149, 150, 151, 
       152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 
       168, 171, 172, 173, 175}, {}, {}}, {{2, 6, 8, 14, 15, 19, 22, 25, 29, 
       31, 35, 36, 37, 38, 41, 44, 58, 62, 69, 70, 75, 77, 80, 82, 83, 84, 85,
        87, 89, 103, 105, 115, 116, 117, 118, 119, 127, 136, 139, 143, 144, 
       145, 157, 166, 169, 170, 174}, {}, {}}}, "ExtendedClasses" -> {1, 2}, 
    "Weights" -> SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00013147714285714285`, "SingleEvaluationTime" -> 
    0.0076130249999999998`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783531013249019*^9, 3.7842314646759777`*^9, 
  3.7843917891322885`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"342e0a01-5ef6-494b-a83d-007eeda441a5"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{
  3.784231891107178*^9},ExpressionUUID->"138f8b12-325b-4c6f-b48f-\
b8a8e1ff4649"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SVMtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.783530233108503*^9, 3.78353023408994*^9}, {
  3.783530985739179*^9, 3.783530987179329*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"89807caa-a472-4389-b349-775760292e62"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.7314285714285714`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8448844884488449`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.`"}]}], "\[RightAssociation]"}]},
    {"0.26857142857142857`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.7314285714285714`"}], ",", 
       RowBox[{"2", "\[Rule]", "Indeterminate"}]}], "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "128"}], ",", 
          RowBox[{"2", "\[Rule]", "0"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "47"}], ",", 
          RowBox[{"2", "\[Rule]", "0"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.7314285714285714, 
    Association[1 -> 0.8448844884488449, 2 -> 0.], 0.26857142857142857`, 
    Association[1 -> 0.7314285714285714, 2 -> Indeterminate], 
    Association[
    1 -> Association[1 -> 128, 2 -> 0, Indeterminate -> 0], 2 -> 
     Association[1 -> 47, 2 -> 0, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{3.7835310154627523`*^9, 3.7842314671914253`*^9, 
  3.7843917949668207`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"295b4a6d-401f-48a5-ba23-0666b4369296"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SVMtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530237544989*^9, 3.7835302385823627`*^9}, {
  3.7835309894673543`*^9, 3.7835309909774857`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"3dc0ce77-d5aa-4adb-97cc-423cabcbacaa"],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQMbV5o8uZP+3H6w8yF0uf2JJRWNPl0w/nR7pxr2
j7JHYPzl9seD1A6uO/TcXiz+o2j8x6P2lyq7Feduf2H/3G53w42QW/Z63T9Y
gk6+tAdLi763h5kP42fFym1rjH5r/2XH/+nrdjyD8wH8vnwr
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{11, 17, 18, 19, 16, 15, 14, 13, 
          12}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
         19}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBmJGIGZiQICNK02e3El/bj/Y+RC63P7EkopGny4Yf7q9
Uw37R9kjMP5y++NBagfXHXpuLxb/UTT+41H7S5XdinO3v7B/bre74UbILXu9
7h8sQSdf2q9+2ivo8+W5/UVX8diSi2/tC225ri8ueGufd3tb7u1tb+3B2kXf
Q93xwR4A9F94/A==
        "]]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7314285714285714}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7314285714285714`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7314285714285714}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.005714285714285714, 0.735632183908046}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.735632183908046`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.005714285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7416198487095663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.735632183908046}], 
          Row[{"RejectionRate = ", 0.005714285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.7416198487095663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.022857142857142857`, 0.7426900584795322}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7426900584795322`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.022857142857142857`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7745966692414834`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7426900584795322}], 
          Row[{"RejectionRate = ", 0.022857142857142857`}], 
          Row[{IndeterminateThreshold, " = ", 0.7745966692414834}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.045714285714285714`, 0.7425149700598802}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7425149700598802`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.045714285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.806225774829855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7425149700598802}], 
          Row[{"RejectionRate = ", 0.045714285714285714`}], 
          Row[{IndeterminateThreshold, " = ", 0.806225774829855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.17142857142857143`, 0.7724137931034483}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7724137931034483`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.17142857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8366600265340756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7724137931034483}], 
          Row[{"RejectionRate = ", 0.17142857142857143`}], 
          Row[{IndeterminateThreshold, " = ", 0.8366600265340756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.4114285714285714, 0.8058252427184465}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8058252427184465`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.4114285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8660254037844386`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8058252427184465}], 
          Row[{"RejectionRate = ", 0.4114285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.8660254037844386}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.7485714285714286, 0.9318181818181818}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9318181818181818`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.7485714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8944271909999159`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9318181818181818}], 
          Row[{"RejectionRate = ", 0.7485714285714286}], 
          Row[{IndeterminateThreshold, " = ", 0.8944271909999159}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.92, 0.9285714285714286}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9285714285714286`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.92`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9219544457292888`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9285714285714286}], 
          Row[{"RejectionRate = ", 0.92}], 
          Row[{IndeterminateThreshold, " = ", 0.9219544457292888}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.9714285714285714, 1.}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.9714285714285714`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9486832980505138`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 0.9714285714285714}], 
          Row[{IndeterminateThreshold, " = ", 0.9486832980505138}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.722128987517337},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9714285714285714}, {0.7314285714285714, 
    0.9174202496532591}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.783531019301567*^9, 3.7842314701092997`*^9, 
  3.7843917987858734`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"20c85939-8952-43d7-82bc-4effb29d1030"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SVMtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835302417385836`*^9, 3.7835302426640215`*^9}, {
  3.7835309926615295`*^9, 3.783530994001752*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"2369fb85-d9ae-4385-af73-b72aeb099876"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8973079289604659, 0.720920579259567, 0.3257175408971311}, {
   1., 1., 1.}}, {{1., 0.42, 0.}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["128", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "128", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7314285714285714`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8448844884488449`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{128, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7314285714285714}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.8448844884488449}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["47", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "47", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.26857142857142857`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "1.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{47, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.26857142857142857`}], 
         Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.}], 
         Row[{"Recall = ", 0.}], 
         Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "175", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7314285714285714`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{175, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7314285714285714}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "0", "\" example\"", "\"\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{0, " example", "", " classified as ", 2}], 
        Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["175", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["0", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.783531022933464*^9, 3.7842314729528685`*^9, 
  3.7843918021530027`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"b9a9c6ea-b26a-4ed0-8f48-027111063729"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.7843874829866457`*^9, 
  3.784387485447521*^9}},ExpressionUUID->"9ffe71af-e3ae-40ec-82f7-\
e5a162e4c35d"],

Cell["\<\
1) The Classifier measurements show that 73.2% of the data is classified \
correctly and 26.8% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) All of 128 data correctly predicted to be belonging to Dataset=1 
\tb) All of 47  data are incorrectly predicted to be belonging to Dataset=1. \
The output with Dataset as \[OpenCurlyDoubleQuote]2\[CloseCurlyDoubleQuote] \
has not been identified in any of the cases.
3) F-score of Dataset=1 is calculated as 0.844 and Dataset=2 is 0 because \
this class has not been identified.\
\>", "Text",
 CellChangeTimes->{{3.784231902237776*^9, 3.7842319668904076`*^9}, {
  3.7842340920480814`*^9, 3.784234147574272*^9}, {3.7843874774540777`*^9, 
  3.7843874795448*^9}},ExpressionUUID->"8b37d3ce-ab2f-4da0-81a6-4dded0cceb6f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Forest Algorithm", "Section",
 CellChangeTimes->{{3.7835287181233077`*^9, 
  3.7835287255540447`*^9}},ExpressionUUID->"d5fcb3bd-f62d-42ac-a8a6-\
a916cfbb452d"],

Cell["\<\
An ensemble method or ensemble learning algorithm consists of aggregating \
multiple outputs made by a diverse set of predictors to obtain better \
results. Formally, based on a set of \[OpenCurlyDoubleQuote]weak\
\[CloseCurlyDoubleQuote] learners, a \[OpenCurlyDoubleQuote]strong\
\[CloseCurlyDoubleQuote] learner for a model is used. Therefore, the purpose \
of using ensemble methods is: to average out the outcome of individual \
predictions by diversifying the set of predictors, thus lowering the \
variance, to arrive at a powerful prediction model that reduces over-fitting \
of the training dataset.
A Random Forest (strong learner) is built as an ensemble of Decision Trees \
(weak learners) to perform different tasks such as classification.\
\>", "Text",
 CellChangeTimes->{{3.784235904604581*^9, 3.784236010315958*^9}, {
   3.7842360578259244`*^9, 3.784236059446972*^9}, 
   3.784392109938721*^9},ExpressionUUID->"c67dcd21-171c-4950-a8c0-\
93f7753f5c7c"],

Cell["\<\
1) The training dataset is fed into the classifier algorithm to train the \
model.\
\>", "Text",
 CellChangeTimes->{
  3.784231977358426*^9},ExpressionUUID->"6d7a65c4-8c7b-49c6-992b-\
9afe328a107e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RFtraining", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingdata", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<RandomForest\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783521051733893*^9, 3.783521079915762*^9}, {
  3.7835221743529973`*^9, 3.7835221855983515`*^9}, {3.7835283123928185`*^9, 
  3.783528313953946*^9}, {3.783528690223378*^9, 3.783528691238634*^9}, {
  3.783528729354864*^9, 3.7835287681685724`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"911ea479-e292-4215-b53c-34d9cbafcbad"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                     "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", "Numerical",
                     "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["408", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
           Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
           Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Aspartate_Aminotransferase" -> 
           Association["Type" -> "Numerical"], "Total_Proteins" -> 
           Association["Type" -> "Numerical"], "Albumin" -> 
           Association["Type" -> "Numerical"], "Albumin_and_Globulin_Ratio" -> 
           Association["Type" -> "Numerical"], "Male" -> 
           Association["Type" -> "Boolean"], "Female" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["FromNamedFeatures", 
               Association[
               "FeatureNames" -> {
                 "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                  "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                  "Aspartate_Aminotransferase", "Total_Proteins", "Albumin", 
                  "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 11]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11"}, "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9], 
               "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Numerical", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                   Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                 "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "(f10f11)" -> 
                   Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                 "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "BooleanVector", "Weight" -> 2]], 
             "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f10f11)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2], 
               "(f1f2f3f4f5f6f7f8f9)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 9]], 
             "Spans" -> {
               Span[1, 2], 
               Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             7033924897365318974]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association[
                "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                 "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 408, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                   11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                   "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 9, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0256462, "MaxTrainingMemory" -> 165240, 
                  "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 12, 3, 19, 57, 11.121699`8.798746096219892}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 11, "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             8654400506150804376]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
              44.754901960784316`, 3.3656862745098044`, 1.4818627450980406`, 
              284.25, 77.93872549019608, 111.17892156862744`, 
              6.503431372549016, 3.161764705882353, 0.9594803921568622}, 
             "StandardDeviation" -> {0.43158834842826654`, 0.4315883484282666,
               15.866283325310173`, 6.7106294830246105`, 2.9146039418802396`, 
              236.83978668885752`, 184.66743736215392`, 323.52800110172257`, 
              1.091651918862863, 0.7879663720363956, 0.32758536472828104`}, 
             "Output" -> 
             Association[
              "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
             "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 6, 6, 7, 8, 6, 3, 11, 7, 10, 3, 4, 8, 4, 4,
             4, 3, 4, 3, 3, 5, 10, 11, 5, 3, 6, 4, 4, 4, 5, 6, 8, 10, 8, 9, 4,
             11, 5, 6, 7}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2107357680797577, -0.34728118777275085`, \
-0.6512841582298279, -0.31916144490242004`, -0.28800883889198303`, \
-0.5161716938018799, -0.4257394075393677, 
            0.6731668710708618, -0.308331161737442, -0.8398387432098389, \
-0.11060573905706406`, -0.41213515400886536`, -0.2323722243309021, \
-0.3525282144546509, -0.39723342657089233`, -0.3823316991329193, 
            0.645715057849884, -0.39723342657089233`, 0.015447728335857391`, 
            0.8347952365875244, -0.40549686551094055`, -1.0936566591262817`, 
            0.7342196106910706, -0.43980684876441956`, 
            0.07847446203231812, -0.2543913722038269, -0.20351091027259827`, \
-0.09919878095388412, -0.1439039707183838, -0.33687689900398254`, \
-0.42750418186187744`, -0.17673562467098236`, 
            0.9368867874145508, -0.13655363023281097`, \
-0.0031432844698429108`, -0.26311782002449036`, 
            0.42895570397377014`, -0.23394696414470673`, 
            3.233198404312134, -0.24334947764873505`}], "Children" -> 
          RawArray["Integer16",{{2, 28}, {3, 21}, {-1, 4}, {5, 9}, {6, 
            7}, {-2, -3}, {-4, 8}, {-5, -6}, {10, 11}, {-7, -8}, {12, 
            17}, {-9, 13}, {14, -14}, {15, -13}, {-10, 16}, {-11, -12}, {18, 
            20}, {-15, 19}, {-16, -17}, {-18, -19}, {22, 27}, {-20, 23}, {
            24, -25}, {25, -24}, {26, -23}, {-21, -22}, {-26, -27}, {29, 
            39}, {30, -38}, {31, 36}, {32, 33}, {-28, -29}, {34, -33}, {
            35, -32}, {-30, -31}, {37, 38}, {-34, -35}, {-36, -37}, {
            40, -41}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 
            2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 6, 7, 6, 9, 3, 11, 3, 8, 3, 2, 8, 10, 4, 6,
             11, 6, 3, 6, 10, 10, 10, 4, 9, 3, 9, 3, 10, 5, 3, 7, 10, 9, 3, 6,
             6, 9, 8, 10, 6, 6, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.34728118777275085`, -0.6512841582298279, \
-0.28667059540748596`, -0.575283408164978, -0.6443732976913452, 
            0.2675546705722809, 
            0.12369175255298615`, -1.245086908340454, -0.1798265427350998, \
-1.4971938133239746`, -0.5735766887664795, -0.2540086805820465, \
-0.586020827293396, -0.3823316991329193, -0.47817134857177734`, 
            0.12369175255298615`, -0.41061511635780334`, 
            0.7087417840957642, -0.5035049319267273, 
            0.6830688714981079, -0.07838495075702667, -0.33220288157463074`, \
-0.39723342657089233`, -1.1939990520477295`, -0.4257394075393677, 
            0.45487818121910095`, 0.07847446203231812, 
            0.9368867874145508, -0.23394696414470673`, -1.3711403608322144`, \
-0.16753752529621124`, 0.42925092577934265`, 
            0.7296910285949707, -0.7408730387687683, -0.03905593603849411, \
-0.16150158643722534`, -0.6443732976913452, -0.29109975695610046`, 
            0.8099778294563293, 0.43805983662605286`, 0.8687307238578796, 
            2.8616390228271484`}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 4}, {-1, -2}, {5, 8}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 11}, {10, -9}, {-7, -8}, {12, 23}, {
            13, 18}, {14, 15}, {-10, -11}, {16, 17}, {-12, -13}, {-14, -15}, {
            19, 22}, {-16, 20}, {21, -19}, {-17, -18}, {-20, -21}, {24, 
            26}, {-22, 25}, {-23, -24}, {27, 28}, {-25, -26}, {-27, -28}, {30,
             40}, {31, 34}, {32, -32}, {-29, 33}, {-30, -31}, {-33, 35}, {
            36, -39}, {37, -38}, {-34, 38}, {-35, 39}, {-36, -37}, {-40, 
            41}, {-41, 42}, {-42, -43}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 
            2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 6, 10, 11, 9, 8, 7, 6, 10, 4, 11, 6, 8, 
            5, 1, 10, 3, 5, 6, 3, 5, 1, 9, 11, 7, 9, 7, 4, 4, 8, 5, 1, 3, 9, 
            5}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.30256691575050354`, 
            1.339009165763855, -0.42750418186187744`, 
            0.04852401837706566, -1.097364068031311, -0.4611647427082062, \
-0.2818269729614258, -0.302916020154953, -0.5879502296447754, \
-0.2052939236164093, -0.41213515400886536`, 
            1.0394835472106934`, -0.5499498248100281, -0.2416449934244156, \
-0.47411683201789856`, -1.7434459924697876`, 0.9368867874145508, 
            0.8347952365875244, -0.33687689900398254`, -0.29239174723625183`, \
-0.36271268129348755`, -0.40549686551094055`, -1.7434459924697876`, 
            0.8212953209877014, 1.2836947441101074`, -0.22168892621994019`, 
            1.0961081981658936`, -0.32457658648490906`, -0.26311782002449036`,
             0.586280882358551, -0.21382668614387512`, -0.0967070460319519, \
-1.7434459924697876`, -0.4257394075393677, -0.8275818824768066, 
            0.006222888361662626}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 28}, {4, 15}, {5, 11}, {-1, 6}, {
            7, 10}, {-2, 8}, {-3, 9}, {-4, -5}, {-6, -7}, {-8, 12}, {
            13, -12}, {14, -11}, {-9, -10}, {16, 17}, {-13, -14}, {18, 23}, {
            19, 22}, {20, -18}, {21, -17}, {-15, -16}, {-19, -20}, {24, 
            25}, {-21, -22}, {26, -26}, {
            27, -25}, {-23, -24}, {-27, -28}, {-29, 30}, {31, -37}, {-30, 
            32}, {33, 35}, {-31, 34}, {-32, -33}, {36, -36}, {-34, -35}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 
            2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 7, 5, 10, 9, 10, 10, 6, 10, 8, 3, 10, 7, 3,
             7, 1, 4, 7, 6, 4, 11, 6, 8, 7, 10, 3, 8, 6, 8, 7, 11, 8, 5, 8, 9,
             6, 3, 6, 10, 3}], "NumericalThresholds" -> 
          RawArray["Real32",{
            0.330581396818161, -0.24334947764873505`, -0.23394696414470673`, \
-0.33220288157463074`, -0.7359775900840759, -0.9667477607727051, 
            0.3023419678211212, -0.5035049319267273, -0.2052939236164093, \
-0.2509177625179291, -1.1820602416992188`, 
            0.9368867874145508, -0.2595949172973633, 
            0.20452792942523956`, -0.31374630331993103`, \
-1.7434459924697876`, -0.3823316991329193, 0.07072862982749939, 
            2.426745891571045, -0.3078230321407318, 
            0.3068501055240631, -0.42750418186187744`, -0.24782684445381165`, \
-0.22168892621994019`, 0.42925092577934265`, 0.20452792942523956`, 
            0.0890837237238884, 0.4465043842792511, 0.3672667443752289, 
            0.47686412930488586`, 
            0.12369175255298615`, -0.23855407536029816`, \
-0.26825693249702454`, -0.29109975695610046`, -0.18635186553001404`, \
-0.27972495555877686`, 1.0238754749298096`, -0.4063928723335266, 
            0.1754329800605774, 0.9608487486839294}], "Children" -> 
          RawArray["Integer16",{{2, 31}, {3, 18}, {4, -16}, {5, 7}, {
            6, -3}, {-1, -2}, {8, 10}, {-4, 9}, {-5, -6}, {11, 16}, {12, 
            13}, {-7, -8}, {14, -12}, {15, -11}, {-9, -10}, {-13, 
            17}, {-14, -15}, {19, 29}, {20, -27}, {21, 26}, {22, 
            23}, {-17, -18}, {-19, 24}, {-20, 25}, {-21, -22}, {27, -26}, {
            28, -25}, {-23, -24}, {-28, 30}, {-29, -30}, {32, 38}, {
            33, -37}, {34, -36}, {-31, 35}, {36, -35}, {
            37, -34}, {-32, -33}, {39, -41}, {-38, 40}, {-39, -40}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 
            1, 1, 2, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 3, 8, 3, 8, 5, 7, 10, 1, 9, 5, 8, 6, 10,
             11, 11, 5, 8, 3, 6, 8, 7, 9, 6, 5, 4, 3, 9, 3, 4, 7, 11, 4, 8, 
            10, 5, 4}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2323722243309021, -0.23546314239501953`, \
-1.4341671466827393`, -0.27873605489730835`, 
            0.5826883316040039, -0.2756451368331909, -0.40549686551094055`, \
-0.35706740617752075`, -0.45911186933517456`, -1.7434459924697876`, \
-0.36956045031547546`, -0.26825693249702454`, -0.2663723826408386, \
-0.5035049319267273, 0.6830688714981079, -0.18157218396663666`, 
            0.42895570397377014`, -0.40549686551094055`, -0.2540086805820465, 
            1.339009165763855, -0.41483739018440247`, -0.29109975695610046`, \
-0.08089528977870941, -1.285603404045105, -0.5077272057533264, \
-0.30256691575050354`, -0.32272475957870483`, -0.29968592524528503`, 
            0.8212953209877014, -1.1190334558486938`, -0.39723342657089233`, \
-0.10797099024057388`, -0.028940219432115555`, -0.3823316991329193, 
            0.2436298429965973, -0.8398387432098389, 0.5894925594329834, 
            0.6458877921104431}], "Children" -> 
          RawArray["Integer16",{{2, 23}, {3, -22}, {4, 5}, {-1, -2}, {6, 
            18}, {7, 13}, {8, 12}, {-3, 9}, {-4, 10}, {-5, 
            11}, {-6, -7}, {-8, -9}, {14, 15}, {-10, -11}, {16, 
            17}, {-12, -13}, {-14, -15}, {19, -21}, {20, -20}, {
            21, -19}, {-16, 22}, {-17, -18}, {24, 34}, {25, 26}, {-23, -24}, {
            27, 32}, {28, -30}, {29, 31}, {
            30, -27}, {-25, -26}, {-28, -29}, {-31, 33}, {-32, -33}, {35, 
            37}, {36, -36}, {-34, -35}, {-37, 38}, {-38, -39}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 
            1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 8, 6, 9, 3, 2, 7, 8, 8, 7, 9, 10, 11, 8, 4,
             11, 8, 3, 9, 7, 9, 6, 3, 7, 10, 9, 6, 6, 9, 5, 3, 6, 11, 8, 6, 8,
             9, 3, 7, 5, 9}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.4401709735393524, -0.2540086805820465, \
-0.575283408164978, -0.6443732976913452, 
            1.086902141571045, -0.5735766887664795, -0.32457658648490906`, \
-0.2756451368331909, -0.2972815930843353, -0.28667059540748596`, \
-0.9191861748695374, -0.9667477607727051, 
            1.2836947441101074`, -0.17673562467098236`, -0.3525282144546509, \
-0.18157218396663666`, -0.14582639932632446`, -1.1190334558486938`, 
            0.2716695964336395, -0.2650100290775299, 1.0961081981658936`, 
            2.8616390228271484`, -0.11060573905706406`, -0.3354068696498871, \
-0.7129297852516174, -0.4611647427082062, -0.3515034317970276, \
-0.4063928723335266, 0.9128996133804321, -0.43980684876441956`, 
            0.8347952365875244, -0.31350305676460266`, 
            0.001586175407283008, -0.2849179208278656, -0.3726147711277008, \
-0.24473591148853302`, -0.7359775900840759, -2.06443452835083, \
-0.09172556549310684, -0.30256691575050354`, -0.36956045031547546`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 17}, {3, 11}, {4, 5}, {-1, -2}, {6, -9}, {
            7, 9}, {-3, 8}, {-4, -5}, {-6, 10}, {-7, -8}, {12, 
            13}, {-10, -11}, {14, -16}, {15, -15}, {16, -14}, {-12, -13}, {18,
             38}, {19, 22}, {-17, 20}, {-18, 21}, {-19, -20}, {23, -37}, {24, 
            30}, {-21, 25}, {-22, 26}, {-23, 27}, {28, -27}, {-24, 
            29}, {-25, -26}, {31, 36}, {32, 35}, {33, 
            34}, {-28, -29}, {-30, -31}, {-32, -33}, {
            37, -36}, {-34, -35}, {-38, 39}, {40, -42}, {
            41, -41}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
            2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 
            1, 2, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 7, 11, 8, 3, 11, 8, 7, 9, 3, 6, 8, 6, 8, 3,
             11, 5, 9, 9, 8, 8, 6, 5, 6, 7, 8, 6, 6, 1, 5, 3, 9, 2, 8, 7, 
            10}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.26311782002449036`, -0.3462371528148651, \
-0.18157218396663666`, -0.2107357680797577, 1.339009165763855, 
            1.650011420249939, -0.2849179208278656, -0.31374630331993103`, \
-0.27795615792274475`, 
            0.45663484930992126`, -0.5035049319267273, -0.2663723826408386, \
-0.5246162414550781, -0.2323722243309021, 0.645715057849884, 
            0.12369175255298615`, -0.43980684876441956`, 
            
            0.7296910285949707, -0.4611647427082062, -0.24473591148853302`, \
-0.2725542187690735, -0.41483739018440247`, -0.47411683201789856`, \
-0.34728118777275085`, -0.16753752529621124`, -0.18600839376449585`, \
-0.42750418186187744`, -0.42750418186187744`, -1.7434459924697876`, \
-0.0967070460319519, -1.1820602416992188`, -0.8275818824768066, \
-0.5735766887664795, -0.22619037330150604`, -0.16212238371372223`, 
            0.3023419678211212}], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 25}, {
            6, -23}, {7, 24}, {8, 11}, {-3, 9}, {-4, 10}, {-5, -6}, {12, 
            15}, {-7, 13}, {14, -10}, {-8, -9}, {16, 21}, {17, 20}, {
            18, -14}, {19, -13}, {-11, -12}, {-15, -16}, {22, 
            23}, {-17, -18}, {-19, -20}, {-21, -22}, {26, 28}, {-24, 
            27}, {-25, -26}, {-27, 29}, {-28, -29}, {31, -37}, {-30, 32}, {33,
             35}, {34, -33}, {-31, -32}, {36, -36}, {-34, -35}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 
            1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 
            1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11, 7, 5, 10, 8, 7, 9, 3, 7, 2, 5, 5, 11, 8, 
            3, 2, 6, 3, 7, 9, 11, 6, 6, 9, 11, 10, 10, 5, 5, 8, 9, 8, 4, 8, 
            11, 10, 11, 7, 10, 8, 9, 11}], "NumericalThresholds" -> 
          RawArray["Real32",{
            0.12369175255298615`, -0.2271040678024292, -0.23394696414470673`, \
-0.2052939236164093, -0.29109975695610046`, -0.3462371528148651, \
-1.1023948192596436`, 
            0.2675546705722809, -0.2704251706600189, -0.5735766887664795, \
-0.43980684876441956`, -0.43980684876441956`, -1.158416748046875, \
-0.25709959864616394`, 
            0.5826883316040039, -0.5735766887664795, -0.33039212226867676`, \
-0.36271268129348755`, -0.32457658648490906`, 
            1.279316782951355, -0.12051939964294434`, -0.5035049319267273, \
-0.3515034317970276, -0.9191861748695374, -0.48683613538742065`, \
-0.33220288157463074`, -0.07838495075702667, -0.23394696414470673`, \
-0.37118688225746155`, -0.019098568707704544`, -0.8275818824768066, \
-0.05928056314587593, -0.2929213047027588, -0.2818269729614258, 
            1.0394835472106934`, 1.063795804977417, 
            0.42895570397377014`, -0.308331161737442, 
            1.4445226192474365`, -0.24782684445381165`, 0.7296910285949707, 
            0.7342196106910706}], "Children" -> 
          RawArray["Integer16",{{2, 31}, {3, 23}, {4, -21}, {5, 15}, {6, 
            8}, {-1, 7}, {-2, -3}, {9, 13}, {10, -8}, {11, 
            12}, {-4, -5}, {-6, -7}, {-9, 14}, {-10, -11}, {16, -20}, {17, 
            21}, {18, 20}, {-12, 19}, {-13, -14}, {-15, -16}, {-17, 
            22}, {-18, -19}, {24, 25}, {-22, -23}, {26, 28}, {-24, 
            27}, {-25, -26}, {29, -30}, {30, -29}, {-27, -28}, {-31, 32}, {
            33, -43}, {34, 42}, {-32, 35}, {36, 39}, {37, -36}, {
            38, -35}, {-33, -34}, {40, 
            41}, {-37, -38}, {-39, -40}, {-41, -42}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 
            2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 
            2, 1, 1, 2, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 4, 8, 9, 7, 3, 5, 7, 8, 9, 3, 6, 8, 2, 10, 
            6, 7, 7, 7, 6, 10, 10, 3, 3, 5, 6, 10, 2, 4, 7, 11, 4, 9, 5, 3, 9,
             3, 3, 8, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.24876461923122406`, -0.39723342657089233`, \
-0.2756451368331909, 0.45487818121910095`, -0.31374630331993103`, 
            0.330581396818161, -0.47411683201789856`, -0.28667059540748596`, \
-0.24473591148853302`, -0.6443732976913452, 
            1.27598237991333, -0.3515034317970276, -0.2540086805820465, \
-0.5735766887664795, 
            0.6830688714981079, -0.41061511635780334`, -0.28667059540748596`, \
-0.31916144490242004`, -0.28667059540748596`, -0.4401709735393524, \
-0.586020827293396, -0.2052939236164093, 
            0.14150118827819824`, -0.5517928600311279, -0.23394696414470673`, 
            0.007388961035758257, 
            0.6830688714981079, -0.5735766887664795, -0.2184126377105713, \
-0.2271040678024292, -0.18157218396663666`, -0.26311782002449036`, \
-0.8275818824768066, -0.30256691575050354`, 0.2675546705722809, 
            1.0961081981658936`, -0.8038998246192932, -1.308113694190979, \
-0.20764485001564026`, -0.22905780375003815`}], "Children" -> 
          RawArray["Integer16",{{2, 27}, {3, 11}, {4, 7}, {5, -4}, {
            6, -3}, {-1, -2}, {8, 9}, {-5, -6}, {10, -9}, {-7, -8}, {
            12, -26}, {13, 22}, {14, 20}, {15, 18}, {16, -13}, {-10, 
            17}, {-11, -12}, {-14, 19}, {-15, -16}, {21, -19}, {-17, -18}, {
            23, 26}, {24, 25}, {-20, -21}, {-22, -23}, {-24, -25}, {28, 34}, {
            29, 33}, {30, -31}, {31, 
            32}, {-27, -28}, {-29, -30}, {-32, -33}, {35, 40}, {36, -39}, {37,
             39}, {38, -36}, {-34, -35}, {-37, -38}, {-40, -41}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
            2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 
            2, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 7, 6, 8, 3, 11, 8, 7, 7, 6, 7, 8, 11, 7, 9,
             8, 8, 8, 10, 7, 10, 11, 9, 11, 4, 11, 6, 11, 2, 6, 6, 4, 5, 5, 9,
             4, 8, 6, 8, 6, 8, 8}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.26311782002449036`, -0.31916144490242004`, \
-0.3515034317970276, -0.28800883889198303`, -0.9929800033569336, 
            0.12369175255298615`, -0.2540086805820465, -0.3462371528148651, 
            0.4443732798099518, -0.3515034317970276, -0.28667059540748596`, \
-0.21382668614387512`, -0.18157218396663666`, -0.308331161737442, \
-0.27795615792274475`, -0.28800883889198303`, -0.26946330070495605`, \
-0.2107357680797577, -0.8398387432098389, -0.16212238371372223`, 
            0.3023419678211212, 
            0.42895570397377014`, -0.18635186553001404`, \
-1.3415751457214355`, -0.3823316991329193, -0.18157218396663666`, \
-0.17416837811470032`, 1.1615891456604004`, -0.5735766887664795, 
            0.26916930079460144`, -0.06438951939344406, -0.3674299418926239, \
-0.40549686551094055`, -0.23394696414470673`, -1.8352291584014893`, \
-0.2333143651485443, -0.16437192261219025`, -0.5246162414550781, \
-0.13346269726753235`, 
            3.5456457138061523`, -0.16746285557746887`, \
-0.18291746079921722`}], "Children" -> 
          RawArray["Integer16",{{2, 34}, {3, 9}, {4, 8}, {5, 7}, {-1, 
            6}, {-2, -3}, {-4, -5}, {-6, -7}, {10, -33}, {11, 24}, {12, 17}, {
            13, -13}, {14, 15}, {-8, -9}, {-10, 16}, {-11, -12}, {-14, 18}, {
            19, 23}, {-15, 20}, {21, -19}, {-16, 
            22}, {-17, -18}, {-20, -21}, {-22, 25}, {26, 29}, {27, 
            28}, {-23, -24}, {-25, -26}, {30, -32}, {31, -31}, {
            32, -30}, {-27, 33}, {-28, -29}, {35, 38}, {-34, 36}, {
            37, -37}, {-35, -36}, {39, 40}, {-38, -39}, {41, -43}, {
            42, -42}, {-40, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 
            1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 11, 8, 2, 3, 3, 7, 3, 7, 6, 9, 8, 5, 9, 7, 
            11, 8, 8, 8, 2, 3, 10, 8, 6, 3, 3, 8, 8, 6, 9, 10, 8, 2, 6, 5, 7, 
            6, 10, 5}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.20764485001564026`, 
            0.42895570397377014`, -0.2632814645767212, -0.5735766887664795, 
            0.015447728335857391`, -0.9929800033569336, -0.292085736989975, 
            0.5826883316040039, -0.31374630331993103`, -0.4190596640110016, \
-0.4611647427082062, -0.28800883889198303`, -0.43980684876441956`, \
-1.7436248064041138`, -0.24334947764873505`, -0.6394681334495544, \
-0.22619037330150604`, -0.23855407536029816`, -0.2416449934244156, \
-0.5735766887664795, -0.17363247275352478`, -0.586020827293396, \
-0.29109975695610046`, -0.41483739018440247`, 
            
            0.45663484930992126`, -1.245086908340454, -0.26946330070495605`, \
-0.05928056314587593, -0.42750418186187744`, -0.9191861748695374, 
            0.04852401837706566, -0.118008092045784, -0.5735766887664795, \
-0.3219476044178009, -0.23394696414470673`, -0.292085736989975, \
-0.5246162414550781, -0.07838495075702667, -0.40549686551094055`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 28}, {3, 22}, {4, 14}, {5, 10}, {6, 
            8}, {-1, 7}, {-2, -3}, {-4, 9}, {-5, -6}, {11, 13}, {-7, 
            12}, {-8, -9}, {-10, -11}, {15, 16}, {-12, -13}, {17, 
            18}, {-14, -15}, {19, -20}, {20, -19}, {-16, 
            21}, {-17, -18}, {-21, 23}, {24, 25}, {-22, -23}, {26, -27}, {-24,
             27}, {-25, -26}, {29, 36}, {30, 32}, {-28, 31}, {-29, -30}, {33, 
            35}, {34, -33}, {-31, -32}, {-34, -35}, {-36, 37}, {-37, 
            38}, {-38, 39}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 
            1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 4, 9, 8, 10, 6, 1, 3, 3, 6, 3, 3, 9, 7, 10,
             10, 6, 4, 8, 9, 7, 11, 10, 8, 7, 8, 10, 2, 6, 5, 4, 9, 8, 6, 7, 
            11, 8, 6, 9, 4}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2271040678024292, -0.2929213047027588, \
-1.9268333911895752`, -0.21382668614387512`, -1.0936566591262817`, \
-0.4063928723335266, -1.7434459924697876`, -1.245086908340454, \
-0.8669265508651733, -0.5330607891082764, -0.17363247275352478`, 
            0.20452792942523956`, -0.4611647427082062, -0.297500878572464, 
            0.5561599135398865, -0.586020827293396, -0.2881694734096527, \
-0.3525282144546509, -0.30037251114845276`, -0.18635186553001404`, \
-0.302916020154953, 0.7342196106910706, 
            0.42925092577934265`, -0.18909931182861328`, -0.308331161737442, \
-0.16746285557746887`, -0.45911186933517456`, -0.5735766887664795, \
-0.48239362239837646`, -0.0967070460319519, -0.1439039707183838, \
-0.09474757313728333, -0.21382668614387512`, -0.4063928723335266, 
            0.06531348824501038, 
            0.12369175255298615`, -0.16437192261219025`, \
-0.15727931261062622`, 0.7296910285949707, -0.3674299418926239}], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 28}, {-1, 4}, {5, 24}, {6, 
            7}, {-2, -3}, {8, 16}, {-4, 9}, {10, 11}, {-5, -6}, {-7, 12}, {-8,
             13}, {-9, 14}, {15, -12}, {-10, -11}, {-13, 17}, {18, 23}, {19, 
            22}, {-14, 20}, {
            21, -17}, {-15, -16}, {-18, -19}, {-20, -21}, {-22, 25}, {-23, 
            26}, {-24, 27}, {-25, -26}, {29, -29}, {-27, -28}, {31, -41}, {
            32, -40}, {33, 35}, {-30, 34}, {-31, -32}, {36, 40}, {37, 
            38}, {-33, -34}, {39, -37}, {-35, -36}, {-38, -39}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 
            1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            2, 1, 1, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 10, 5, 10, 9, 10, 10, 8, 3, 8, 10, 9, 2, 8,
             3, 7, 6, 7, 6, 8, 7, 8, 10, 6, 8, 3, 7, 2, 5, 11, 4, 6, 9, 7, 8, 
            7, 5, 7, 4, 7, 7, 9, 10, 3}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.09172556549310684, 
            0.3023419678211212, -0.26825693249702454`, -1.601292610168457, \
-1.9268333911895752`, 
            0.1754329800605774, -0.2052939236164093, -0.3034634590148926, 
            0.2675546705722809, -0.2663723826408386, -0.7129297852516174, \
-0.7359775900840759, -0.5735766887664795, -0.25709959864616394`, 
            0.645715057849884, -0.292085736989975, -0.4063928723335266, \
-0.32999172806739807`, -0.5330607891082764, -0.26019051671028137`, \
-0.10797099024057388`, -0.07164425402879715, -0.45911186933517456`, 
            0.27339157462120056`, -0.20455391705036163`, 
            0.9608487486839294, -0.28667059540748596`, -0.5735766887664795, \
-0.43980684876441956`, 
            0.12369175255298615`, -0.2929213047027588, -0.5119494795799255, 
            0.63808673620224, -0.20544350147247314`, -0.23546314239501953`, \
-0.2595949172973633, -0.43980684876441956`, -0.12421640753746033`, \
-0.3078230321407318, 0.04365292936563492, 0.07072862982749939, 
            1.554129719734192, -0.07838495075702667, -1.245086908340454}], 
          "Children" -> 
          RawArray["Integer16",{{2, 40}, {3, 25}, {4, 21}, {5, 6}, {-1, -2}, {
            7, -18}, {8, 16}, {-3, 9}, {10, 14}, {11, 12}, {-4, -5}, {
            13, -8}, {-6, -7}, {15, -11}, {-9, -10}, {17, 19}, {
            18, -14}, {-12, -13}, {-15, 20}, {-16, -17}, {22, -23}, {
            23, -22}, {-19, 24}, {-20, -21}, {26, 37}, {27, -35}, {28, 32}, {
            29, -28}, {-24, 30}, {-25, 31}, {-26, -27}, {33, 
            34}, {-29, -30}, {35, -34}, {36, -33}, {-31, -32}, {-36, 38}, {
            39, -39}, {-37, -38}, {-40, 41}, {-41, 42}, {43, -45}, {-42, 
            44}, {-43, -44}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 
            2, 1, 1, 2, 1, 2, 1, 1, 1, 2}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 11, 8, 5, 7, 2, 5, 10, 7, 8, 7, 6, 8, 9, 4,
             6, 9, 8, 9, 9, 9, 7, 10, 6, 10, 8, 11, 10, 6, 10, 4, 3, 9, 3, 9, 
            5, 4, 10, 4, 4}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.3078230321407318, 
            0.4594821035861969, -0.06546240299940109, -0.43980684876441956`, \
-0.24334947764873505`, -0.5735766887664795, -0.47411683201789856`, \
-0.9667477607727051, -0.3408220112323761, -0.2509177625179291, \
-0.28667059540748596`, -0.5161716938018799, -0.28800883889198303`, 
            0.0884610041975975, -0.39723342657089233`, -0.5035049319267273, \
-1.1939990520477295`, -0.2725542187690735, -0.6443732976913452, 
            0.1800653040409088, 
            1.3709211349487305`, -0.302916020154953, -0.33220288157463074`, 
            0.036944806575775146`, -0.2052939236164093, -0.2818269729614258, 
            1.3142211437225342`, 0.42925092577934265`, -0.35994797945022583`, 
            1.4445226192474365`, -0.39723342657089233`, -0.7408730387687683, \
-0.7359775900840759, -0.5517928600311279, -2.659667730331421, \
-0.23394696414470673`, 
            0.3627549111843109, -0.07838495075702667, -0.2184126377105713, \
-0.24821609258651733`}], "Children" -> 
          RawArray["Integer16",{{2, 33}, {3, 25}, {4, 24}, {5, 21}, {6, 19}, {
            7, 14}, {-1, 8}, {-2, 9}, {-3, 10}, {11, -8}, {12, -7}, {-4, 
            13}, {-5, -6}, {15, 18}, {16, 
            17}, {-9, -10}, {-11, -12}, {-13, -14}, {-15, 20}, {-16, -17}, {
            22, -21}, {23, -20}, {-18, -19}, {-22, -23}, {-24, 26}, {-25, 
            27}, {28, 30}, {-26, 29}, {-27, -28}, {31, 
            32}, {-29, -30}, {-31, -32}, {34, 38}, {-33, 35}, {-34, 36}, {-35,
             37}, {-36, -37}, {-38, 39}, {40, -41}, {-39, -40}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 
            1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 3, 6, 7, 11, 8, 9, 3, 4, 4, 8, 11, 4, 6, 9,
             6, 6, 5, 11, 11, 3, 8, 4, 6, 7, 3, 11, 9, 7, 9, 11, 6, 8, 9, 5, 
            1, 5, 8, 4, 10, 6}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.26311782002449036`, 
            0.015447728335857391`, -0.36417022347450256`, \
-0.24876461923122406`, 
            0.001586175407283008, -0.28800883889198303`, \
-0.27795615792274475`, -0.6148195862770081, -0.3674299418926239, \
-0.39723342657089233`, -0.23855407536029816`, 
            0.12369175255298615`, -0.3078230321407318, 0.036944806575775146`, 
            0.7296910285949707, -0.17416837811470032`, 
            0.3113919496536255, -0.43980684876441956`, 
            0.12369175255298615`, -0.18157218396663666`, 
            1.27598237991333, -0.24473591148853302`, -0.3823316991329193, \
-0.4063928723335266, -0.35706740617752075`, 0.45663484930992126`, 
            1.0394835472106934`, 
            0.5464824438095093, -0.28667059540748596`, -0.27795615792274475`, 
            0.6731668710708618, 
            4.499877452850342, -0.2756451368331909, -0.5527690052986145, \
-0.23394696414470673`, -1.7434459924697876`, 0.21208275854587555`, 
            0.22817523777484894`, -0.158805713057518, 
            0.04852401837706566, -0.3346143960952759}], "Children" -> 
          RawArray["Integer16",{{2, 32}, {3, 19}, {4, 13}, {5, 10}, {6, 
            7}, {-1, -2}, {-3, 8}, {9, -6}, {-4, -5}, {11, -10}, {-7, 
            12}, {-8, -9}, {14, -17}, {15, 17}, {16, -13}, {-11, -12}, {
            18, -16}, {-14, -15}, {20, 26}, {21, -24}, {22, -23}, {23, -22}, {
            24, -21}, {25, -20}, {-18, -19}, {27, 28}, {-25, -26}, {
            29, -31}, {30, -30}, {31, -29}, {-27, -28}, {33, -42}, {-32, 
            34}, {35, 39}, {-33, 36}, {-34, 37}, {-35, 38}, {-36, -37}, {
            40, -41}, {41, -40}, {-38, -39}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 
            1, 1, 1, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 11, 8, 1, 8, 4, 6, 10, 3, 7, 8, 6, 10, 11, 
            6, 8, 3, 10, 8, 7, 8, 10, 10, 4, 5, 11, 6, 8, 4, 7, 4, 3, 5, 11, 
            8, 5, 4, 6, 2, 11, 6, 10}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.3525282144546509, -1.5552599430084229`, \
-0.2509177625179291, -1.7434459924697876`, -0.30655437707901, \
-0.39723342657089233`, -0.4739490747451782, -0.2052939236164093, \
-0.17363247275352478`, -0.24876461923122406`, -0.28800883889198303`, \
-0.4063928723335266, 0.04852401837706566, 
            0.001586175407283008, -0.36417022347450256`, \
-0.16128100454807281`, -0.4257394075393677, 
            0.42925092577934265`, -0.2230994552373886, -0.20544350147247314`, \
-0.23855407536029816`, 
            0.6830688714981079, -0.07838495075702667, -0.39723342657089233`, \
-0.23394696414470673`, -1.0668376684188843`, -0.3515034317970276, \
-0.2632814645767212, -0.2929213047027588, -0.2325192093849182, \
-0.33762648701667786`, -0.36271268129348755`, -0.33687689900398254`, \
-0.18157218396663666`, -0.22000853717327118`, -0.37118688225746155`, \
-0.26311782002449036`, -0.5879502296447754, -0.5735766887664795, \
-1.097364068031311, 1.328957438468933, -0.33220288157463074`}], "Children" -> 
          RawArray["Integer16",{{2, 25}, {-1, 3}, {4, 16}, {5, 10}, {-2, 6}, {
            7, 8}, {-3, -4}, {-5, 9}, {-6, -7}, {11, -14}, {12, 
            13}, {-8, -9}, {14, -13}, {15, -12}, {-10, -11}, {17, 23}, {18, 
            22}, {19, 20}, {-15, -16}, {-17, 
            21}, {-18, -19}, {-20, -21}, {-22, 24}, {-23, -24}, {26, 
            38}, {-25, 27}, {28, 32}, {29, 30}, {-26, -27}, {-28, 
            31}, {-29, -30}, {33, 35}, {-31, 34}, {-32, -33}, {36, -37}, {-34,
             37}, {-35, -36}, {-38, 39}, {40, 42}, {
            41, -41}, {-39, -40}, {-42, -43}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 
            1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 10, 9, 8, 6, 7, 9, 10, 3, 8, 1, 9, 4, 6,
             3, 8, 9, 10, 3, 8, 3, 9, 5, 6, 9, 6, 7, 8, 10, 9, 7, 4, 9, 10, 3,
             3, 2, 8, 10, 4, 8, 6, 5, 6, 6, 6, 7}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.33039212226867676`, -1.245086908340454, 
            1.063795804977417, -0.09474757313728333, -0.2509177625179291, \
-0.4866158664226532, -0.3462371528148651, -0.6443732976913452, 
            0.5561599135398865, -0.4257394075393677, -0.2725542187690735, \
-1.7434459924697876`, 
            0.7296910285949707, -0.3674299418926239, -0.4359486997127533, 
            0.45663484930992126`, -0.30037251114845276`, -0.4611647427082062, 
            1.063795804977417, 
            0.20452792942523956`, -0.23855407536029816`, -0.6148195862770081, 
            
            0.0884610041975975, -0.30256691575050354`, -0.5583943724632263, \
-0.8275818824768066, -0.4401709735393524, -0.2650100290775299, \
-0.13346269726753235`, 
            0.5561599135398865, -1.377207636833191, -0.308331161737442, \
-0.3078230321407318, -0.4611647427082062, -0.45911186933517456`, \
-0.4257394075393677, -2.06443452835083, -0.5735766887664795, \
-0.2818269729614258, -0.07838495075702667, 
            0.5117722153663635, -0.14582639932632446`, -0.03905593603849411, \
-0.43980684876441956`, -0.11083441972732544`, 0.10872329026460648`, 
            0.9489537477493286, -0.21085864305496216`}], "Children" -> 
          RawArray["Integer16",{{2, 32}, {3, 5}, {4, -3}, {-1, -2}, {6, 20}, {
            7, 13}, {-4, 8}, {-5, 9}, {10, 11}, {-6, -7}, {
            12, -10}, {-8, -9}, {14, 19}, {15, -16}, {16, 
            17}, {-11, -12}, {-13, 18}, {-14, -15}, {-17, -18}, {21, 30}, {22,
             24}, {-19, 23}, {-20, -21}, {25, 29}, {-22, 26}, {-23, 27}, {-24,
             28}, {-25, -26}, {-27, -28}, {31, -31}, {-29, -30}, {33, 37}, {
            34, -36}, {-32, 35}, {-33, 36}, {-34, -35}, {-37, 38}, {39, 
            46}, {-38, 40}, {41, 43}, {-39, 42}, {-40, -41}, {44, -45}, {-42, 
            45}, {-43, -44}, {-46, 47}, {48, -49}, {-47, -48}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 
            2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}], "NominalSplits" -> {},
           "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 7, 10, 7, 6, 10, 7, 10, 9, 6, 3, 11, 8, 4, 
            8, 7, 2, 11, 3, 11, 11, 3, 9, 10, 6, 11, 6, 10, 9, 7, 7, 11, 8, 3,
             6, 9, 3, 8}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.23394696414470673`, -0.3462371528148651, 
            0.04852401837706566, -0.2271040678024292, -0.37683701515197754`, 
            0.3023419678211212, -0.292085736989975, -0.8398387432098389, 
            0.0884610041975975, -0.5879502296447754, 
            
            0.07847446203231812, -1.097364068031311, -0.2540086805820465, \
-0.39723342657089233`, -0.2941906750202179, -0.2650100290775299, \
-0.5735766887664795, 
            0.12369175255298615`, -1.1190334558486938`, \
-0.18157218396663666`, -0.7921000719070435, 1.27598237991333, 
            0.0884610041975975, 1.063795804977417, -0.3515034317970276, 
            0.12369175255298615`, -0.42750418186187744`, -0.07838495075702667,
             0.0884610041975975, 0.038237787783145905`, -0.16753752529621124`,
             1.344747543334961, -0.16437192261219025`, 
            0.2675546705722809, -0.5246162414550781, -0.8275818824768066, \
-0.4257394075393677, -0.16746285557746887`}], "Children" -> 
          RawArray["Integer16",{{2, 35}, {3, 4}, {-1, -2}, {5, 26}, {6, 19}, {
            7, 15}, {8, 12}, {-3, 9}, {10, -7}, {-4, 11}, {-5, -6}, {-8, 
            13}, {14, -11}, {-9, -10}, {-12, 16}, {17, 
            18}, {-13, -14}, {-15, -16}, {-17, 20}, {21, 24}, {22, 
            23}, {-18, -19}, {-20, -21}, {25, -24}, {-22, -23}, {27, 
            31}, {-25, 28}, {-26, 29}, {-27, 30}, {-28, -29}, {-30, 32}, {
            33, -34}, {34, -33}, {-31, -32}, {36, 37}, {-35, -36}, {
            38, -39}, {-37, -38}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 
            2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 
            1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 7, 10, 3, 4, 9, 10, 11, 7, 2, 4, 3, 6, 3, 
            5, 6, 10, 6, 3, 11, 2, 8, 6, 8, 8, 10, 6, 3, 4, 5, 7, 7, 7, 3, 4, 
            5, 5, 11, 7, 7, 3, 7, 6}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.2107357680797577, -0.3462371528148651, 
            0.04852401837706566, 
            0.015447728335857391`, -0.20351091027259827`, \
-0.5527690052986145, -0.45911186933517456`, -1.3415751457214355`, \
-0.308331161737442, -0.5735766887664795, -0.3823316991329193, \
-0.29968592524528503`, -0.5837279558181763, 
            0.5826883316040039, -0.47411683201789856`, -0.4401709735393524, \
-0.33220288157463074`, -0.3515034317970276, 0.20452792942523956`, 
            0.42895570397377014`, -0.5735766887664795, -0.2509177625179291, \
-0.4190596640110016, -0.29109975695610046`, -0.26946330070495605`, 
            0.9368867874145508, -0.5161716938018799, 
            1.27598237991333, -0.39723342657089233`, -0.47411683201789856`, \
-0.308331161737442, -0.24876461923122406`, -0.3354068696498871, 
            0.20452792942523956`, -0.3078230321407318, -0.0967070460319519, \
-0.40549686551094055`, -0.18157218396663666`, -0.048404447734355927`, \
-0.10255584865808487`, -0.36271268129348755`, 0.43895813822746277`, 
            2.1860768795013428`}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 5}, {4, -3}, {-1, -2}, {
            6, -28}, {7, 14}, {8, 13}, {-4, 9}, {10, 11}, {-5, -6}, {
            12, -9}, {-7, -8}, {-10, -11}, {15, 26}, {16, 
            17}, {-12, -13}, {-14, 18}, {19, 24}, {20, -20}, {21, -19}, {22, 
            23}, {-15, -16}, {-17, -18}, {-21, 25}, {-22, -23}, {
            27, -27}, {-24, 28}, {-25, -26}, {30, 32}, {-29, 
            31}, {-30, -31}, {33, 36}, {-32, 34}, {35, -35}, {-33, -34}, {37, 
            43}, {38, 40}, {39, -38}, {-36, -37}, {41, 
            42}, {-39, -40}, {-41, -42}, {-43, -44}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 
            1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 4, 7, 1, 8, 11, 3, 7, 8, 7, 5, 3, 9, 3, 5, 
            11, 8, 11, 5, 3, 7, 8, 9, 10, 1, 6, 6, 10, 6, 7, 7, 7, 6, 3, 6, 
            11, 9, 8, 8, 6, 5, 6, 10, 10, 11, 8, 11}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.19837208092212677`, -0.2184126377105713, \
-0.3462371528148651, -1.7434459924697876`, -0.28800883889198303`, \
-0.18157218396663666`, 
            0.5826883316040039, -0.32457658648490906`, -0.2540086805820465, \
-0.2595949172973633, -0.33687689900398254`, 0.9608487486839294, 
            0.8212953209877014, 
            0.015447728335857391`, -0.47411683201789856`, \
-0.48683613538742065`, -0.2725542187690735, -0.48683613538742065`, \
-0.47411683201789856`, 
            1.339009165763855, -0.24876461923122406`, -0.2416449934244156, 
            0.45487818121910095`, -0.7129297852516174, -1.7434459924697876`, \
-0.5541720986366272, -0.5330607891082764, 
            0.6830688714981079, -0.4021705985069275, -0.2704251706600189, \
-0.292085736989975, -0.20544350147247314`, 
            0.03272254392504692, -1.81232750415802, -0.4063928723335266, \
-0.48683613538742065`, 
            0.5464824438095093, -0.16437192261219025`, -0.05928056314587593, 
            3.5456457138061523`, -0.0967070460319519, 0.2438357174396515, 
            0.6830688714981079, -0.07838495075702667, 
            0.12369175255298615`, -0.14273546636104584`, -1.097364068031311}],
           "Children" -> 
          RawArray["Integer16",{{2, 34}, {3, 33}, {4, 5}, {-1, -2}, {6, 9}, {
            7, 8}, {-3, -4}, {-5, -6}, {10, 22}, {11, 21}, {12, -17}, {13, 
            19}, {14, -13}, {15, 17}, {-7, 16}, {-8, -9}, {-10, 
            18}, {-11, -12}, {-14, 20}, {-15, -16}, {-18, -19}, {23, 25}, {
            24, -22}, {-20, -21}, {26, 27}, {-23, -24}, {-25, 28}, {29, 32}, {
            30, 31}, {-26, -27}, {-28, -29}, {-30, -31}, {-32, -33}, {-34, 
            35}, {36, 40}, {-35, 37}, {38, -39}, {-36, 39}, {-37, -38}, {
            41, -48}, {42, -47}, {43, 47}, {44, 46}, {-40, 
            45}, {-41, -42}, {-43, -44}, {-45, -46}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 
            2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 9, 3, 7, 4, 6, 1, 1, 8, 10, 9, 10, 7, 8, 
            11, 7, 8, 11, 6, 9, 3, 1, 10, 11, 3, 5, 8, 6, 9, 10, 11, 7, 9, 5, 
            10, 10, 4, 3}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.43980684876441956`, 1.187712550163269, 
            
            0.015447728335857391`, -0.20002835988998413`, \
-0.41213515400886536`, -0.600616991519928, -1.7434459924697876`, \
-1.7434459924697876`, -0.27873605489730835`, 
            0.5561599135398865, -0.36956045031547546`, -0.7129297852516174, \
-0.31374630331993103`, -0.1798265427350998, 
            0.12369175255298615`, -0.32457658648490906`, \
-0.28800883889198303`, -0.27315136790275574`, -0.27972495555877686`, \
-0.27795615792274475`, 0.5196616053581238, -1.7434459924697876`, 
            0.5561599135398865, 
            0.42895570397377014`, -0.6778463125228882, -0.0967070460319519, \
-0.0005530327325686812, -0.4063928723335266, -0.36956045031547546`, \
-0.33220288157463074`, 
            0.42895570397377014`, -0.2704251706600189, -0.7359775900840759, \
-0.1653270125389099, 1.063795804977417, 
            0.8099778294563293, -0.33762648701667786`, 
            0.015447728335857391`}], "Children" -> 
          RawArray["Integer16",{{2, 26}, {3, 25}, {4, 15}, {5, 14}, {6, 
            8}, {-1, 7}, {-2, -3}, {9, 11}, {-4, 10}, {-5, -6}, {12, 
            13}, {-7, -8}, {-9, -10}, {-11, -12}, {16, 21}, {17, 
            18}, {-13, -14}, {19, 20}, {-15, -16}, {-17, -18}, {22, 
            23}, {-19, -20}, {24, -23}, {-21, -22}, {-24, -25}, {27, -39}, {
            28, -38}, {29, 33}, {30, 31}, {-26, -27}, {32, -30}, {-28, -29}, {
            34, 35}, {-31, -32}, {36, 38}, {-33, 
            37}, {-34, -35}, {-36, -37}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 
            2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
            2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 7, 10, 8, 6, 11, 10, 8, 3, 11, 4, 1, 8, 8, 
            3, 7, 11, 4, 8, 10, 8, 9, 3, 3, 3, 9, 6, 10, 5, 3, 10, 11, 3, 7, 
            7, 7, 8, 9, 3, 5, 8, 7, 11, 5, 4}], "NumericalThresholds" -> 
          RawArray["Real32",{-1.245086908340454, -0.16753752529621124`, 
            1.063795804977417, -0.27873605489730835`, -0.27972495555877686`, 
            0.12369175255298615`, 
            0.04852401837706566, -0.2107357680797577, -0.6148195862770081, \
-0.12051939964294434`, -0.39723342657089233`, -1.7434459924697876`, \
-0.25709959864616394`, -0.2540086805820465, -0.4257394075393677, \
-0.31916144490242004`, 
            1.0394835472106934`, -0.3525282144546509, -0.28800883889198303`, 
            0.1754329800605774, -0.2756451368331909, -0.18635186553001404`, 
            0.5826883316040039, -0.17363247275352478`, 0.45663484930992126`, 
            0.45487818121910095`, -0.5330607891082764, -0.7129297852516174, \
-0.23394696414470673`, 
            1.27598237991333, -0.8398387432098389, -1.158416748046875, 
            0.2675546705722809, -0.2595949172973633, -0.17836780846118927`, \
-0.308331161737442, -0.1705537736415863, -0.5527690052986145, \
-0.4257394075393677, 
            0.28070271015167236`, -0.08400794118642807, -0.1458769589662552, 
            0.6121140718460083, -0.23394696414470673`, \
-0.33762648701667786`}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, -5}, {-1, 5}, {-2, 
            6}, {-3, -4}, {-6, -7}, {9, 36}, {10, 14}, {11, 
            12}, {-8, -9}, {-10, 13}, {-11, -12}, {15, 29}, {-13, 16}, {17, 
            21}, {18, -18}, {19, -17}, {20, -16}, {-14, -15}, {22, 26}, {23, 
            25}, {24, -21}, {-19, -20}, {-22, -23}, {27, -27}, {-24, 
            28}, {-25, -26}, {30, -35}, {31, -34}, {32, 33}, {-28, -29}, {34, 
            35}, {-30, -31}, {-32, -33}, {37, 38}, {-36, -37}, {39, 43}, {40, 
            41}, {-38, -39}, {42, -42}, {-40, -41}, {44, -46}, {
            45, -45}, {-43, -44}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 
            1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 
            1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 10, 10, 3, 5, 8, 4, 2, 8, 6, 3, 9, 7, 3, 6,
             3, 5, 7, 10, 10, 9, 11, 6, 8, 8, 5, 9, 5, 5, 11, 7, 8, 8, 11, 4, 
            3, 11, 4, 3}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.3177253305912018, 
            1.8252495527267456`, -1.3474746942520142`, 0.9608487486839294, 
            0.28070271015167236`, -0.2632814645767212, -0.2929213047027588, \
-0.5735766887664795, -0.2941906750202179, -0.4359486997127533, 
            0.015447728335857391`, -0.9191861748695374, -0.27584031224250793`,
             0.20452792942523956`, -0.4908381402492523, -0.4257394075393677, \
-0.47411683201789856`, -0.28125545382499695`, 
            0.1754329800605774, -0.7129297852516174, 
            0.5464824438095093, -0.27315136790275574`, -0.47817134857177734`, \
-0.1705537736415863, -0.23855407536029816`, -0.33687689900398254`, \
-0.4611647427082062, -0.43980684876441956`, -0.40549686551094055`, \
-1.3415751457214355`, -0.308331161737442, -0.24782684445381165`, \
-0.19528114795684814`, 
            0.12369175255298615`, -0.11410051584243774`, -0.4257394075393677, \
-0.48683613538742065`, -0.2333143651485443, -0.9299532771110535}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, -28}, {4, 5}, {-1, -2}, {
            6, -27}, {7, 17}, {8, 16}, {9, 12}, {-3, 10}, {
            11, -6}, {-4, -5}, {-7, 13}, {14, -11}, {
            15, -10}, {-8, -9}, {-12, -13}, {18, 20}, {
            19, -16}, {-14, -15}, {-17, 21}, {22, 28}, {-18, 23}, {24, 
            25}, {-19, -20}, {26, 27}, {-21, -22}, {-23, -24}, {-25, -26}, {
            30, 35}, {-29, 31}, {-30, 32}, {-31, 33}, {-32, 34}, {-33, -34}, {
            36, -40}, {37, -39}, {-35, 38}, {39, -38}, {-36, -37}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 
            1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 3, 8, 4, 1, 8, 11, 8, 7, 6, 7, 9, 10, 10, 
            5, 4, 7, 7, 4, 1, 8, 3, 1, 6, 3, 8, 10, 8, 5, 4, 5, 10, 5, 10, 6, 
            4, 7, 5, 8, 3, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2271040678024292, -0.04757900536060333, \
-0.30037251114845276`, -0.2929213047027588, -1.7434459924697876`, \
-0.28800883889198303`, 
            0.12369175255298615`, -0.2540086805820465, -0.27584031224250793`, \
-0.6512841582298279, -0.31374630331993103`, 0.2716695964336395, 
            0.3023419678211212, -0.586020827293396, -0.1310170292854309, \
-0.24821609258651733`, -0.31916144490242004`, -0.32457658648490906`, \
-0.3823316991329193, -1.7434459924697876`, -0.29109975695610046`, 
            0.645715057849884, -1.7434459924697876`, -0.43172645568847656`, 
            1.339009165763855, -0.2107357680797577, -1.7282015085220337`, \
-0.26946330070495605`, -0.0967070460319519, -0.1439039707183838, \
-0.23394696414470673`, 1.063795804977417, -0.40549686551094055`, 
            0.3023419678211212, -0.34728118777275085`, -0.33762648701667786`, \
-0.08089528977870941, -0.30256691575050354`, -0.19837208092212677`, \
-0.4257394075393677, 1.9665192365646362`}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 17}, {-1, 4}, {5, 15}, {6, 
            9}, {-2, 7}, {8, -5}, {-3, -4}, {10, 13}, {-6, 11}, {
            12, -9}, {-7, -8}, {14, -12}, {-10, -11}, {16, -15}, {-13, -14}, {
            18, 21}, {19, -19}, {20, -18}, {-16, -17}, {-20, 22}, {23, 25}, {
            24, -23}, {-21, -22}, {26, -28}, {27, -27}, {-24, 
            28}, {-25, -26}, {30, 41}, {31, -40}, {32, -39}, {33, 39}, {34, 
            36}, {-29, 35}, {-30, -31}, {-32, 37}, {
            38, -35}, {-33, -34}, {-36, 40}, {-37, -38}, {-41, -42}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 
            1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 
            2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 6, 4, 4, 10, 6, 7, 11, 3, 3, 10, 10, 8, 8,
             9, 7, 6, 3, 6, 4, 4, 11, 6, 6, 3, 6, 11, 6, 10, 11, 6, 7, 4, 7, 
            4, 10, 7, 8, 3, 9, 8, 3, 5, 2}], "NumericalThresholds" -> 
          RawArray["Real32",{
            0.3023419678211212, -0.34728118777275085`, -0.2184126377105713, \
-0.3674299418926239, -1.0936566591262817`, -0.575283408164978, \
-0.27584031224250793`, 0.12369175255298615`, 
            0.2675546705722809, -0.29968592524528503`, -0.2052939236164093, \
-0.33220288157463074`, -0.28800883889198303`, -0.2230994552373886, \
-1.1939990520477295`, -0.3678976893424988, -0.29239174723625183`, 
            0.14150118827819824`, -0.33039212226867676`, \
-0.11410051584243774`, -0.158805713057518, -0.48683613538742065`, 
            0.9025088548660278, -0.11083441972732544`, -0.7408730387687683, 
            2.8616390228271484`, 1.650011420249939, -0.35994797945022583`, 
            1.3176137208938599`, 
            0.42895570397377014`, -0.5161716938018799, -0.24334947764873505`, \
-0.3823316991329193, -0.302916020154953, -0.33762648701667786`, 
            0.9368867874145508, -0.292085736989975, -0.118008092045784, \
-1.4971938133239746`, 
            0.8212953209877014, -0.29109975695610046`, -1.4971938133239746`, \
-0.37118688225746155`, -0.5735766887664795}], "Children" -> 
          RawArray["Integer16",{{2, 27}, {3, 16}, {4, 15}, {5, 14}, {-1, 6}, {
            7, 8}, {-2, -3}, {9, -10}, {10, 13}, {11, 
            12}, {-4, -5}, {-6, -7}, {-8, -9}, {-11, -12}, {-13, -14}, {-15, 
            17}, {18, 20}, {-16, 19}, {-17, -18}, {21, 26}, {22, -24}, {23, 
            24}, {-19, -20}, {-21, 25}, {-22, -23}, {-25, -26}, {28, 44}, {29,
             38}, {30, 37}, {31, 34}, {-27, 32}, {33, -30}, {-28, -29}, {-31, 
            35}, {36, -34}, {-32, -33}, {-35, -36}, {39, 42}, {40, 
            41}, {-37, -38}, {-39, -40}, {-41, 43}, {-42, -43}, {-44, -45}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 
            1, 2, 1, 1, 1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 6, 7, 2, 6, 11, 9, 4, 6, 6, 8, 3, 6, 7, 11,
             6, 4, 5, 7, 6, 7, 3, 4, 6, 10, 8, 9, 5, 4, 4, 6, 6, 11, 7, 7, 11,
             8}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2632814645767212, -0.575283408164978, \
-0.32457658648490906`, -0.5735766887664795, -0.29239174723625183`, 
            1.0394835472106934`, 
            0.8212953209877014, -0.39723342657089233`, -0.4401709735393524, \
-0.17416837811470032`, -0.28800883889198303`, -0.6778463125228882, \
-0.34728118777275085`, -0.3516522943973541, -0.18157218396663666`, \
-0.44861549139022827`, -0.09919878095388412, -0.47411683201789856`, \
-0.28667059540748596`, -0.4570600390434265, 
            0.02199236862361431, -0.4257394075393677, -0.18860916793346405`, \
-0.38105928897857666`, 
            0.42925092577934265`, -0.24473591148853302`, -0.4611647427082062, \
-0.40549686551094055`, -0.24821609258651733`, -0.39723342657089233`, \
-0.43172645568847656`, -0.4697268307209015, 
            0.12369175255298615`, -0.16212238371372223`, \
-0.24876461923122406`, -1.402627944946289, -0.14582639932632446`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 17}, {3, 4}, {-1, -2}, {5, 12}, {6, 10}, {
            7, -7}, {8, 9}, {-3, -4}, {-5, -6}, {-8, 11}, {-9, -10}, {13, 
            14}, {-11, -12}, {-13, 15}, {16, -16}, {-14, -15}, {18, 35}, {19, 
            21}, {-17, 20}, {-18, -19}, {22, -34}, {23, 30}, {24, -27}, {25, 
            29}, {26, 28}, {-20, 
            27}, {-21, -22}, {-23, -24}, {-25, -26}, {-28, 31}, {32, 
            33}, {-29, -30}, {-31, 34}, {-32, -33}, {36, 
            37}, {-35, -36}, {-37, -38}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 
            1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 4, 7, 9, 8, 7, 4, 3, 11, 10, 6, 9, 6, 6, 7,
             1, 8, 3, 8, 7, 5, 10, 8, 11, 6, 3, 8, 6, 6, 5, 8, 7, 3, 8, 5, 3, 
            4, 3, 5, 7, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.11083441972732544`, -0.26311782002449036`, \
-0.3516522943973541, -0.18635186553001404`, -0.2725542187690735, \
-0.32457658648490906`, -0.39723342657089233`, 
            1.5911160707473755`, -0.48683613538742065`, -0.8398387432098389, \
-0.4992826581001282, -1.377207636833191, -0.44439324736595154`, \
-0.5372830629348755, -0.25417977571487427`, -1.7434459924697876`, \
-0.2756451368331909, 
            0.2675546705722809, -0.2540086805820465, -0.27584031224250793`, \
-0.47411683201789856`, 1.1907047033309937`, -0.16437192261219025`, 
            0.42895570397377014`, -0.42750418186187744`, 
            0.8347952365875244, -0.08091702312231064, -0.3177253305912018, \
-0.3726147711277008, -0.1653270125389099, -0.2756451368331909, \
-0.17836780846118927`, -0.5517928600311279, -0.29109975695610046`, \
-0.23394696414470673`, -0.6148195862770081, -0.26311782002449036`, \
-1.6862740516662598`, -0.43980684876441956`, 0.038237787783145905`, 
            1.14317786693573}], "Children" -> 
          RawArray["Integer16",{{2, 34}, {3, 28}, {-1, 4}, {5, 16}, {6, 
            8}, {-2, 7}, {-3, -4}, {9, -13}, {10, 12}, {
            11, -7}, {-5, -6}, {-8, 13}, {14, -12}, {15, -11}, {-9, -10}, {17,
             20}, {18, 19}, {-14, -15}, {-16, -17}, {21, 23}, {-18, 
            22}, {-19, -20}, {24, 27}, {25, -24}, {
            26, -23}, {-21, -22}, {-25, -26}, {29, -33}, {30, -32}, {31, 
            33}, {-27, 32}, {-28, -29}, {-30, -31}, {-34, 35}, {36, 40}, {
            37, -39}, {38, -38}, {39, -37}, {-35, -36}, {-40, 
            41}, {-41, -42}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 7, 8, 2, 10, 3, 11, 7, 10, 4, 8, 6, 9, 
            9, 10, 9, 7, 7, 11, 9, 3, 7, 7, 5, 4, 5, 4, 6, 4, 3, 7, 5, 10, 7, 
            10, 9, 11}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2881694734096527, -1.308113694190979, \
-0.2704251706600189, -0.2632814645767212, -0.5735766887664795, \
-0.586020827293396, 1.27598237991333, 
            1.3142211437225342`, -0.31374630331993103`, 
            0.42925092577934265`, -0.41213515400886536`, -0.2725542187690735, \
-0.41061511635780334`, -0.36956045031547546`, 
            0.45487818121910095`, -1.9820195436477661`, 
            1.4625253677368164`, -0.15670724213123322`, \
-0.25417977571487427`, -0.6394681334495544, -0.5527690052986145, \
-0.4887661337852478, -0.308331161737442, -0.31374630331993103`, \
-0.47411683201789856`, -0.26311782002449036`, -0.43980684876441956`, \
-0.3525282144546509, -0.4190596640110016, -0.3674299418926239, \
-1.9383809566497803`, -0.12421640753746033`, -0.47411683201789856`, \
-0.33220288157463074`, -0.2271040678024292, -0.33220288157463074`, \
-0.8275818824768066, 0.42895570397377014`}], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 16}, {6, 
            11}, {-3, 7}, {8, -8}, {9, -7}, {-4, 10}, {-5, -6}, {-9, 12}, {
            13, -14}, {14, 15}, {-10, -11}, {-12, -13}, {-15, 17}, {
            18, -29}, {19, 28}, {20, 25}, {-16, 21}, {22, 24}, {-17, 
            23}, {-18, -19}, {-20, -21}, {-22, 26}, {27, -25}, {-23, -24}, {
            29, -28}, {-26, -27}, {31, 36}, {-30, 32}, {33, -35}, {-31, 
            34}, {-32, 35}, {-33, -34}, {-36, 37}, {-37, 38}, {-38, -39}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 
            2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 3, 6, 11, 5, 7, 6, 2, 3, 8, 10, 11, 8, 4, 
            9, 3, 6, 4, 1, 3, 4, 10, 9, 10, 8, 3, 7, 10, 7, 6, 11, 6, 3, 2, 
            10, 4, 5, 2, 11, 7}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.14582639932632446`, -0.4257394075393677, 
            0.10450102388858795`, -1.402627944946289, -0.47411683201789856`, \
-0.20544350147247314`, -0.2881694734096527, -0.5735766887664795, \
-0.7408730387687683, -0.24473591148853302`, -0.07838495075702667, \
-0.6394681334495544, -0.22000853717327118`, -0.3674299418926239, 
            0.5464824438095093, 
            1.27598237991333, -0.29239174723625183`, -0.20351091027259827`, \
-1.7434459924697876`, 
            0.330581396818161, -0.3823316991329193, -0.7129297852516174, 
            0.0884610041975975, 0.04852401837706566, -0.2632814645767212, 
            0.5826883316040039, -0.31374630331993103`, -0.9667477607727051, \
-0.28667059540748596`, -0.5288385152816772, -0.48683613538742065`, 
            2.604081153869629, 
            0.8347952365875244, -0.5735766887664795, -0.07838495075702667, \
-0.2333143651485443, -0.47411683201789856`, -0.5735766887664795, 
            1.344747543334961, 0.05448320880532265}], "Children" -> 
          RawArray["Integer16",{{2, 35}, {3, 16}, {4, 14}, {-1, 5}, {-2, 6}, {
            7, 13}, {8, -9}, {9, 10}, {-3, -4}, {11, -8}, {
            12, -7}, {-5, -6}, {-10, -11}, {15, -14}, {-12, -13}, {17, 34}, {
            18, 32}, {19, -29}, {20, 25}, {21, 24}, {22, 
            23}, {-15, -16}, {-17, -18}, {-19, -20}, {26, 28}, {
            27, -23}, {-21, -22}, {-24, 29}, {-25, 30}, {-26, 
            31}, {-27, -28}, {33, -32}, {-30, -31}, {-33, -34}, {-35, 36}, {
            37, -41}, {-36, 38}, {39, -40}, {40, -39}, {-37, -38}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 
            2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 4, 3, 1, 7, 7, 5, 10, 8, 10, 3, 10, 10, 6, 
            6, 4, 9, 4, 10, 6, 5, 7, 11, 11, 8, 6, 5, 9, 6, 9, 9, 10, 5, 4, 7,
             9, 9, 11, 4, 3, 9, 7, 6, 8}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.24876461923122406`, -0.26311782002449036`, 
            1.339009165763855, -1.7434459924697876`, -0.35706740617752075`, \
-0.3354068696498871, -0.47411683201789856`, -0.33220288157463074`, \
-0.2416449934244156, 0.5561599135398865, 
            0.015447728335857391`, -0.586020827293396, -0.9667477607727051, \
-0.2881694734096527, -0.6512841582298279, -0.3525282144546509, 
            0.7296910285949707, -0.3078230321407318, 
            0.04852401837706566, -0.29239174723625183`, \
-0.47411683201789856`, -0.3408220112323761, 
            1.3142211437225342`, -1.3415751457214355`, -0.25709959864616394`, \
-0.5161716938018799, -0.23394696414470673`, 
            0.36327388882637024`, -0.5288385152816772, -1.8352291584014893`, \
-2.018437623977661, 
            0.8099778294563293, -0.0967070460319519, -0.1439039707183838, \
-0.17836780846118927`, -0.0031432844698429108`, -0.36956045031547546`, \
-0.7921000719070435, -0.3525282144546509, -0.4887661337852478, \
-0.8275818824768066, -0.09714070707559586, -0.15727931261062622`, \
-0.22000853717327118`}], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 27}, {4, 25}, {5, 11}, {-1, 
            6}, {-2, 7}, {8, 9}, {-3, -4}, {10, -7}, {-5, -6}, {12, 20}, {13, 
            14}, {-8, -9}, {15, 19}, {-10, 16}, {17, 
            18}, {-11, -12}, {-13, -14}, {-15, -16}, {21, 24}, {-17, 
            22}, {-18, 23}, {-19, -20}, {-21, -22}, {26, -25}, {-23, -24}, {
            28, 29}, {-26, -27}, {-28, -29}, {31, 32}, {-30, -31}, {33, 42}, {
            34, 41}, {35, -39}, {-32, 36}, {37, -38}, {38, -37}, {-33, 
            39}, {-34, 40}, {-35, -36}, {-40, -41}, {43, -45}, {
            44, -44}, {-42, -43}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 
            2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 10, 5, 5, 6, 10, 11, 11, 9, 3, 8, 6, 3, 11,
             11, 3, 11, 6, 3, 8, 6, 10, 6, 11, 9, 3, 6, 8, 9, 3, 4, 6, 3, 3, 
            7, 3, 6, 3, 8, 6, 5, 4, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.40549686551094055`, -1.601292610168457, \
-0.47411683201789856`, -0.43980684876441956`, -0.29239174723625183`, 
            0.3023419678211212, -0.03809813782572746, -0.27315136790275574`, \
-0.27795615792274475`, 
            0.20452792942523956`, -0.2632814645767212, -0.5879502296447754, 
            0.5826883316040039, 0.7342196106910706, 1.0394835472106934`, 
            0.20452792942523956`, 
            0.42895570397377014`, -0.5246162414550781, -0.7408730387687683, \
-0.26946330070495605`, 0.45494890213012695`, 
            0.6830688714981079, -0.2037242203950882, 1.2836947441101074`, 
            0.8212953209877014, -1.1190334558486938`, -0.34728118777275085`, \
-0.25709959864616394`, 0.0884610041975975, -0.4257394075393677, 
            0.2882462441921234, -0.4401709735393524, -1.4341671466827393`, \
-0.4887661337852478, -0.16212238371372223`, -1.1820602416992188`, \
-0.3177253305912018, 
            0.20452792942523956`, -0.2818269729614258, -0.47817134857177734`, \
-0.30256691575050354`, 0.4819687604904175, 1.9665192365646362`}], "Children" -> 
          RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 26}, {6, 21}, {
            7, 15}, {8, 11}, {9, -6}, {10, -5}, {-3, -4}, {12, 14}, {-7, 
            13}, {-8, -9}, {-10, -11}, {16, 20}, {17, -16}, {18, -15}, {-12, 
            19}, {-13, -14}, {-17, -18}, {22, -24}, {23, 24}, {-19, -20}, {
            25, -23}, {-21, -22}, {27, 28}, {-25, -26}, {-27, 
            29}, {-28, -29}, {31, 37}, {32, -36}, {33, 34}, {-30, -31}, {
            35, -35}, {36, -34}, {-32, -33}, {38, 42}, {39, 
            40}, {-37, -38}, {-39, 41}, {-40, -41}, {-42, 43}, {-43, -44}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 
            2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 
            1, 1, 1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11, 3, 10, 11, 8, 4, 7, 8, 9, 7, 4, 5, 6, 9, 
            4, 11, 2, 11, 10, 5, 10, 8, 9, 7, 4, 7, 6, 4, 4, 7, 4, 5, 9, 3, 8,
             5, 1, 6, 5, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.6394681334495544, -1.056006669998169, \
-1.8551105260849, -1.7078919410705566`, -0.14582639932632446`, \
-0.06939531862735748, -0.31374630331993103`, -0.2323722243309021, 
            0.36327388882637024`, -0.27584031224250793`, -0.3674299418926239, \
-0.47411683201789856`, -0.4401709735393524, -0.0031432844698429108`, \
-0.3823316991329193, 
            0.12369175255298615`, -0.5735766887664795, -0.18157218396663666`, \
-0.2052939236164093, -0.43980684876441956`, 
            1.3176137208938599`, -0.25709959864616394`, 
            0.7296910285949707, -0.3408220112323761, -0.32272475957870483`, \
-0.302916020154953, -0.37683701515197754`, -0.27801957726478577`, \
-0.33762648701667786`, -0.32999172806739807`, -0.3823316991329193, \
-0.47411683201789856`, -0.9191861748695374, -0.4257394075393677, \
-0.17673562467098236`, -0.37118688225746155`, -1.7434459924697876`, \
-0.5879502296447754, -0.23394696414470673`, -0.03905593603849411}], 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 5}, {-2, -3}, {6, -7}, {
            7, -6}, {-4, -5}, {9, 28}, {10, 20}, {11, 19}, {12, -16}, {13, 
            15}, {14, -10}, {-8, -9}, {16, 18}, {
            17, -13}, {-11, -12}, {-14, -15}, {-17, -18}, {21, 24}, {
            22, -22}, {23, -21}, {-19, -20}, {-23, 25}, {26, 
            27}, {-24, -25}, {-26, -27}, {29, 37}, {30, 36}, {-28, 31}, {
            32, -34}, {-29, 33}, {-30, 34}, {
            35, -33}, {-31, -32}, {-35, -36}, {-37, 38}, {-38, 39}, {
            40, -41}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 
            2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 
            2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 7, 4, 10, 11, 9, 7, 9, 4, 3, 7, 9, 10, 11, 
            7, 3, 8, 3, 4, 3, 6, 10, 10, 7, 6, 3, 8, 6, 11, 8, 6, 11, 5, 7, 7,
             6, 3, 7, 10, 3}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.24876461923122406`, -0.25417977571487427`, \
-0.2929213047027588, 
            1.1907047033309937`, -0.6089417338371277, -0.6443732976913452, \
-0.308331161737442, -0.7359775900840759, -0.39723342657089233`, \
-0.17363247275352478`, -0.31916144490242004`, -0.4611647427082062, \
-0.33220288157463074`, 
            1.0394835472106934`, -0.32999172806739807`, \
-0.11060573905706406`, -0.26946330070495605`, -0.29968592524528503`, \
-0.39723342657089233`, -0.17363247275352478`, -0.4401709735393524, 
            0.04852401837706566, 
            0.9368867874145508, -0.308331161737442, -0.34728118777275085`, \
-1.3711403608322144`, -0.14582639932632446`, -0.5668388605117798, 
            0.12369175255298615`, -0.1705537736415863, -0.31350305676460266`, \
-0.18157218396663666`, -0.33687689900398254`, -0.19461321830749512`, \
-0.17295266687870026`, -0.37683701515197754`, -1.1190334558486938`, 
            0.02199236862361431, -0.07838495075702667, -0.6148195862770081}], 
          "Children" -> 
          RawArray["Integer16",{{2, 27}, {3, -26}, {4, 26}, {5, 24}, {6, 
            11}, {7, 9}, {8, -3}, {-1, -2}, {-4, 10}, {-5, -6}, {12, 17}, {13,
             14}, {-7, -8}, {15, -12}, {16, -11}, {-9, -10}, {18, 21}, {-13, 
            19}, {-14, 20}, {-15, -16}, {22, 23}, {-17, -18}, {-19, -20}, {
            25, -23}, {-21, -22}, {-24, -25}, {28, 37}, {-27, 29}, {30, 34}, {
            31, -32}, {32, -31}, {33, -30}, {-28, -29}, {-33, 35}, {-34, 
            36}, {-35, -36}, {38, 39}, {-37, -38}, {-39, 40}, {-40, -41}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 
            1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
            1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 4, 3, 5, 7, 3, 2, 8, 10, 9, 9, 10, 5, 11, 
            11, 7, 6, 9, 8, 11, 10, 8, 7, 10, 11, 8, 9, 4, 3, 5, 9, 11, 8, 7, 
            7, 4, 3, 6, 5, 8, 3, 4, 4, 7}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.34728118777275085`, -0.2184126377105713, 
            1.27598237991333, -0.37118688225746155`, -0.17295266687870026`, \
-1.308113694190979, -0.5735766887664795, -0.20764485001564026`, \
-1.220565676689148, -1.4688119888305664`, -1.010790467262268, \
-0.586020827293396, -0.43980684876441956`, 1.0394835472106934`, 
            0.7342196106910706, -0.2704251706600189, -0.5035049319267273, 
            0.45487818121910095`, -0.2941906750202179, -0.18157218396663666`, \
-0.07838495075702667, -0.2632814645767212, -0.2650100290775299, \
-0.07838495075702667, 1.894222617149353, -0.20764485001564026`, 
            0.36327388882637024`, -0.2929213047027588, -0.7408730387687683, \
-0.43980684876441956`, -0.6443732976913452, -0.18157218396663666`, \
-0.22000853717327118`, -0.308331161737442, -0.32999172806739807`, \
-0.33762648701667786`, 0.330581396818161, 
            0.8518416881561279, -0.47411683201789856`, -0.24473591148853302`, \
-0.4257394075393677, -0.32272475957870483`, -0.3823316991329193, \
-0.10255584865808487`}], "Children" -> 
          RawArray["Integer16",{{2, 33}, {3, 32}, {4, 30}, {5, 26}, {6, 24}, {
            7, 8}, {-1, -2}, {9, 23}, {-3, 10}, {-4, 11}, {-5, 12}, {-6, 
            13}, {14, -17}, {15, -16}, {16, -15}, {17, 22}, {18, 
            19}, {-7, -8}, {-9, 20}, {
            21, -12}, {-10, -11}, {-13, -14}, {-18, -19}, {-20, 
            25}, {-21, -22}, {27, -27}, {28, 29}, {-23, -24}, {-25, -26}, {
            31, -30}, {-28, -29}, {-31, -32}, {34, 41}, {35, 
            36}, {-33, -34}, {37, -40}, {38, 40}, {
            39, -37}, {-35, -36}, {-38, -39}, {42, -45}, {43, 
            44}, {-41, -42}, {-43, -44}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 3, 3, 3, 7, 5, 10, 11, 2, 11, 7, 1, 6, 3, 
            11, 7, 3, 6, 11, 3, 6, 7, 9, 10, 5, 3, 11, 5, 11, 9, 4, 10, 10}], 
          "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.24876461923122406`, -1.1190334558486938`, \
-1.875354290008545, -1.245086908340454, -0.31916144490242004`, \
-0.26825693249702454`, 
            0.04852401837706566, -0.18157218396663666`, -0.5735766887664795, 
            0.7342196106910706, -0.3408220112323761, -1.7434459924697876`, \
-0.38105928897857666`, -0.17363247275352478`, -0.12051939964294434`, \
-0.2650100290775299, 0.9608487486839294, -0.36417022347450256`, 
            0.42895570397377014`, 
            0.645715057849884, -0.5330607891082764, -0.28125545382499695`, \
-0.27795615792274475`, 1.8252495527267456`, -0.23394696414470673`, 
            1.0238754749298096`, -0.27315136790275574`, \
-0.33687689900398254`, -0.18157218396663666`, 
            0.7296910285949707, -0.33762648701667786`, 
            1.063795804977417, -0.33220288157463074`}], "Children" -> 
          RawArray["Integer16",{{2, 24}, {3, 5}, {-1, 4}, {-2, -3}, {6, 12}, {
            7, -10}, {8, 9}, {-4, -5}, {10, 11}, {-6, -7}, {-8, -9}, {13, 
            16}, {14, -14}, {15, -13}, {-11, -12}, {17, -23}, {18, -22}, {19, 
            23}, {20, -19}, {21, -18}, {-15, 22}, {-16, -17}, {-20, -21}, {
            25, -34}, {26, -33}, {27, 33}, {-24, 28}, {29, -30}, {-25, 30}, {
            31, 32}, {-26, -27}, {-28, -29}, {-31, -32}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 5, 3, 9, 7, 7, 8, 4, 3, 7, 3, 8, 4, 9, 11, 
            2, 7, 10, 11, 6, 11, 7, 4, 3, 8, 11, 9, 7, 4, 10, 9, 5, 11, 10, 5,
             1, 3, 9, 4, 5, 3}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.3515034317970276, -0.23394696414470673`, 
            1.27598237991333, -0.9191861748695374, -0.2704251706600189, \
-0.3408220112323761, -0.2230994552373886, -0.41213515400886536`, \
-0.8038998246192932, -0.3462371528148651, -0.11060573905706406`, \
-0.28800883889198303`, -0.3674299418926239, -0.4611647427082062, 
            1.0394835472106934`, -0.5735766887664795, -0.302916020154953, 
            0.1754329800605774, 
            0.4594821035861969, -0.5246162414550781, -0.18157218396663666`, \
-0.11880126595497131`, -0.39723342657089233`, -0.4257394075393677, \
-0.05928056314587593, -0.18157218396663666`, 
            0.1800653040409088, -0.28667059540748596`, -0.3078230321407318, \
-0.45911186933517456`, -0.09474757313728333, 
            0.4179426431655884, -1.3415751457214355`, -0.45911186933517456`, \
-0.43980684876441956`, -1.7434459924697876`, -1.4971938133239746`, 
            0.63808673620224, -0.26311782002449036`, -0.43980684876441956`, \
-0.9929800033569336}], "Children" -> 
          RawArray["Integer16",{{2, 26}, {3, 24}, {4, 23}, {5, 7}, {
            6, -3}, {-1, -2}, {8, 19}, {9, 10}, {-4, -5}, {-6, 11}, {12, 
            15}, {-7, 13}, {14, -10}, {-8, -9}, {16, -15}, {17, 
            18}, {-11, -12}, {-13, -14}, {20, 22}, {-16, 
            21}, {-17, -18}, {-19, -20}, {-21, -22}, {25, -25}, {-23, -24}, {
            27, 37}, {28, 35}, {29, 31}, {30, -28}, {-26, -27}, {32, -33}, {
            33, -32}, {-29, 34}, {-30, -31}, {-34, 36}, {-35, -36}, {-37, 
            38}, {-38, 39}, {40, -42}, {41, -41}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 
            2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 9, 5, 10, 3, 8, 11, 3, 6, 11, 7, 5, 3, 
            6, 8, 6, 10, 9, 10, 6, 8, 8, 3, 7, 9, 3, 8, 3, 10, 10, 7, 2, 4, 6,
             6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.19963698089122772`, -0.41213515400886536`, \
-1.1939990520477295`, -0.47411683201789856`, 
            0.3023419678211212, -1.1820602416992188`, -0.19837208092212677`, 
            1.3142211437225342`, 1.339009165763855, -0.44439324736595154`, 
            
            0.42895570397377014`, -0.31916144490242004`, \
-0.33687689900398254`, -0.17363247275352478`, -0.5246162414550781, \
-0.23546314239501953`, 
            0.26916930079460144`, -0.2052939236164093, -0.7359775900840759, \
-0.45911186933517456`, -0.3895038068294525, -0.25709959864616394`, \
-0.26946330070495605`, -0.7408730387687683, -0.28667059540748596`, \
-0.6443732976913452, -0.9299532771110535, -0.2818269729614258, \
-0.4887661337852478, -0.07838495075702667, 1.063795804977417, 
            0.4010521471500397, -0.5735766887664795, -0.3823316991329193, \
-0.5879502296447754, -0.6343951225280762}], "Children" -> 
          RawArray["Integer16",{{2, 35}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, 30}, {9, 27}, {10, 26}, {11, 16}, {
            12, -11}, {-6, 13}, {14, -10}, {-7, 15}, {-8, -9}, {17, 24}, {
            18, -19}, {19, 21}, {-12, 20}, {-13, -14}, {-15, 22}, {
            23, -18}, {-16, -17}, {-20, 25}, {-21, -22}, {-23, -24}, {-25, 
            28}, {-26, 29}, {-27, -28}, {-29, 31}, {32, -34}, {33, -33}, {
            34, -32}, {-30, -31}, {36, -37}, {-35, -36}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 
            2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 
            1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 6, 7, 11, 6, 5, 8, 10, 8, 3, 10, 4, 2, 10, 
            8, 5, 7, 10, 4, 10, 6, 4, 8, 11, 6, 4, 4, 4, 6, 7, 3, 6, 3, 7, 3, 
            6, 10, 4, 5, 7, 6}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.34728118777275085`, -0.6343951225280762, \
-0.28667059540748596`, 
            1.650011420249939, -0.44439324736595154`, -0.19963698089122772`, \
-0.2818269729614258, -0.7129297852516174, -0.2972815930843353, 
            1.0238754749298096`, 
            0.04852401837706566, -0.3823316991329193, -0.5735766887664795, \
-0.33220288157463074`, -0.26019051671028137`, 
            0.10915282368659973`, -0.31916144490242004`, 
            0.04852401837706566, -0.24821609258651733`, 
            0.3023419678211212, -0.43172645568847656`, -0.41213515400886536`, \
-0.25709959864616394`, 
            0.12369175255298615`, -0.42750418186187744`, -0.3823316991329193, \
-0.3674299418926239, -0.3674299418926239, -0.3092808127403259, \
-0.308331161737442, -1.875354290008545, 
            0.8349525928497314, -0.8038998246192932, -0.13504669070243835`, \
-0.4257394075393677, -0.06438951939344406, -0.45911186933517456`, 
            1.8678297996520996`, -0.40549686551094055`, 0.005746949929744005, 
            1.088288426399231}], "Children" -> 
          RawArray["Integer16",{{2, 28}, {3, 4}, {-1, -2}, {5, 27}, {6, 17}, {
            7, 16}, {8, 10}, {-3, 9}, {-4, -5}, {11, -12}, {12, 15}, {
            13, -9}, {-6, 14}, {-7, -8}, {-10, -11}, {-13, -14}, {18, 
            19}, {-15, -16}, {20, -25}, {21, 24}, {-17, 22}, {-18, 
            23}, {-19, -20}, {25, 26}, {-21, -22}, {-23, -24}, {-26, -27}, {
            29, 35}, {-28, 30}, {-29, 31}, {-30, 32}, {33, -34}, {-31, 
            34}, {-32, -33}, {36, 39}, {-35, 37}, {38, -38}, {-36, -37}, {-39,
             40}, {-40, 41}, {-41, -42}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 
            1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 4, 7, 7, 8, 1, 9, 6, 11, 10, 4, 3, 6, 7, 
            11, 6, 9, 7, 7, 10, 11, 8, 10, 9, 8, 7, 3, 6, 7, 3, 6, 10, 5, 7, 
            8, 10, 8, 8, 10, 5, 8, 10}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2509177625179291, -0.4270368814468384, \
-0.28667059540748596`, -0.3462371528148651, -0.30037251114845276`, \
-1.7434459924697876`, 
            0.0884610041975975, -0.5161716938018799, -0.6394681334495544, \
-0.45911186933517456`, -0.41213515400886536`, -1.1820602416992188`, \
-0.7188403606414795, -0.308331161737442, 
            0.42895570397377014`, -0.34728118777275085`, -0.6443732976913452, \
-0.28125545382499695`, -0.24876461923122406`, 
            0.6830688714981079, -0.21209858357906342`, -0.14582639932632446`, \
-1.9820195436477661`, -0.8275818824768066, -0.18600839376449585`, \
-0.302916020154953, 
            0.07847446203231812, -0.43172645568847656`, -0.2650100290775299, 
            0.015447728335857391`, -0.46128228306770325`, \
-0.7129297852516174, -0.43980684876441956`, -0.2595949172973633, \
-0.2323722243309021, 
            1.1907047033309937`, -0.13655363023281097`, -0.21691761910915375`,
             0.9368867874145508, -0.30256691575050354`, -0.23855407536029816`,
             0.1754329800605774}], "Children" -> 
          RawArray["Integer16",{{2, 21}, {-1, 3}, {4, 16}, {5, 6}, {-2, -3}, {
            7, 10}, {8, -7}, {-4, 9}, {-5, -6}, {11, 12}, {-8, -9}, {-10, 
            13}, {-11, 14}, {15, -14}, {-12, -13}, {17, 20}, {-15, 18}, {-16, 
            19}, {-17, -18}, {-19, -20}, {22, 28}, {23, -27}, {-21, 24}, {25, 
            26}, {-22, -23}, {27, -26}, {-24, -25}, {29, 33}, {30, 
            31}, {-28, -29}, {32, -32}, {-30, -31}, {34, 39}, {35, 
            36}, {-33, -34}, {37, -38}, {38, -37}, {-35, -36}, {40, -43}, {
            41, -42}, {-39, 42}, {-40, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 
            2, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 10, 7, 9, 10, 8, 5, 6, 8, 9, 2, 8, 3, 10, 
            3, 9, 6, 6, 10, 10, 3, 9, 9, 6, 2, 10, 7, 4, 6, 6, 8, 6, 6, 9, 1, 
            10, 11}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.3078230321407318, 
            0.6830688714981079, -0.2650100290775299, 0.1800653040409088, 
            0.5561599135398865, -0.23855407536029816`, -0.47411683201789856`, \
-0.4739490747451782, -0.2972815930843353, -0.27795615792274475`, \
-0.5735766887664795, -0.27873605489730835`, 0.015447728335857391`, 
            0.5561599135398865, -0.36271268129348755`, 
            0.0884610041975975, -0.42750418186187744`, -0.5879502296447754, 
            0.3023419678211212, 0.9368867874145508, -0.2366591989994049, 
            0.8212953209877014, 0.45487818121910095`, 
            0.06650064885616302, -0.5735766887664795, 
            1.3176137208938599`, -0.297500878572464, -0.3674299418926239, \
-0.5879502296447754, 
            4.795435905456543, -0.2663723826408386, -0.3515034317970276, \
-0.5246162414550781, 
            1.187712550163269, -1.7434459924697876`, -0.8398387432098389, \
-1.7078919410705566`}], "Children" -> 
          RawArray["Integer16",{{2, 29}, {3, 20}, {4, 16}, {5, 14}, {
            6, -10}, {7, -9}, {8, 9}, {-1, -2}, {-3, 10}, {11, 13}, {
            12, -6}, {-4, -5}, {-7, -8}, {15, -13}, {-11, -12}, {17, 19}, {
            18, -16}, {-14, -15}, {-17, -18}, {21, 22}, {-19, -20}, {23, 
            24}, {-21, -22}, {25, -28}, {26, 28}, {
            27, -25}, {-23, -24}, {-26, -27}, {-29, 30}, {31, -38}, {32, 
            33}, {-30, -31}, {-32, 34}, {35, -37}, {36, 
            37}, {-33, -34}, {-35, -36}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
            1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 7, 9, 11, 4, 4, 6, 8, 6, 8, 8, 7, 7, 3, 4, 
            3, 6, 10, 9, 5, 6, 5, 6, 11, 6, 4, 6, 9, 9, 4, 3, 10, 11, 2, 7, 3,
             7, 11, 4}], "NumericalThresholds" -> 
          RawArray["Real32",{-1.245086908340454, 0.4010521471500397, 
            0.36327388882637024`, -0.18157218396663666`, -0.3823316991329193, \
-0.39723342657089233`, -0.022166883572936058`, -0.2107357680797577, \
-0.37683701515197754`, -0.26946330070495605`, -0.2849179208278656, \
-0.28667059540748596`, -0.3408220112323761, 
            1.339009165763855, -0.3674299418926239, -0.4257394075393677, \
-0.575283408164978, -1.220565676689148, -0.4611647427082062, \
-0.47411683201789856`, -0.4570600390434265, -0.43980684876441956`, \
-0.46128228306770325`, -0.18157218396663666`, -0.31350305676460266`, \
-0.39723342657089233`, 0.429615318775177, 
            0.36327388882637024`, -0.18635186553001404`, \
-0.33762648701667786`, -0.6148195862770081, 
            1.3176137208938599`, -0.6394681334495544, -0.5735766887664795, \
-0.24876461923122406`, 
            0.7717685103416443, -0.16212238371372223`, -0.18157218396663666`, \
-0.3525282144546509}], "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, -7}, {4, 6}, {-1, 
            5}, {-2, -3}, {-4, 7}, {-5, -6}, {9, 33}, {10, 24}, {11, 17}, {12,
             14}, {13, -10}, {-8, -9}, {15, -14}, {16, -13}, {-11, -12}, {-15,
             18}, {-16, 19}, {20, 22}, {-17, 21}, {-18, -19}, {-20, 
            23}, {-21, -22}, {25, 29}, {26, 27}, {-23, -24}, {-25, 
            28}, {-26, -27}, {-28, 30}, {31, -32}, {-29, 
            32}, {-30, -31}, {-33, 34}, {35, 39}, {-34, 36}, {37, 
            38}, {-35, -36}, {-37, -38}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 
            2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 8, 6, 3, 3, 2, 5, 11, 7, 7, 8, 9, 9, 10, 7,
             7, 3, 7, 6, 8, 3, 9, 11, 8, 10, 9, 11, 3, 7, 6, 11, 9, 7, 9, 10, 
            6, 7, 7, 6, 5}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-2.06443452835083, -0.2725542187690735, \
-0.29239174723625183`, 
            0.45663484930992126`, -0.11060573905706406`, -0.5735766887664795, \
-0.43980684876441956`, -0.18157218396663666`, -0.3462371528148651, \
-0.28667059540748596`, -0.28800883889198303`, 0.45487818121910095`, 
            0.36327388882637024`, -0.2052939236164093, -0.31916144490242004`, \
-0.09172556549310684, -0.04757900536060333, -0.20544350147247314`, \
-0.2881694734096527, -0.2540086805820465, -0.9299532771110535, 
            0.2716695964336395, 0.12369175255298615`, -0.23855407536029816`, 
            1.063795804977417, 0.5464824438095093, 
            0.12369175255298615`, -1.3711403608322144`, \
-0.12963154911994934`, -0.4063928723335266, 
            0.42895570397377014`, -0.8275818824768066, -0.302916020154953, \
-0.18635186553001404`, 
            0.04852401837706566, -0.11083441972732544`, \
-0.21627378463745117`, -0.302916020154953, -0.37683701515197754`, \
-0.43980684876441956`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 16}, {4, 15}, {5, 13}, {6, 12}, {
            7, 9}, {8, -4}, {-2, -3}, {-5, 10}, {
            11, -8}, {-6, -7}, {-9, -10}, {14, -13}, {-11, -12}, {-14, -15}, {
            17, -41}, {18, 30}, {19, 29}, {20, 27}, {21, 22}, {-16, -17}, {23,
             25}, {24, -20}, {-18, -19}, {26, -23}, {-21, -22}, {
            28, -26}, {-24, -25}, {-27, -28}, {31, 36}, {32, 35}, {33, 
            34}, {-29, -30}, {-31, -32}, {-33, -34}, {37, 40}, {38, 
            39}, {-35, -36}, {-37, -38}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 
            1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 
            1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{9, 5, 3, 6, 3, 4, 3, 2, 8, 5, 6, 5, 2, 10, 8, 
            9, 6, 8, 6, 9, 10, 6, 4, 6, 11, 7, 1, 6, 8, 7, 7, 6, 3, 10, 7, 10,
             9, 4, 4, 7, 7}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-2.384854793548584, -0.37118688225746155`, \
-0.04757900536060333, -0.37683701515197754`, -0.6148195862770081, \
-0.09919878095388412, -1.308113694190979, -0.5735766887664795, \
-0.2540086805820465, -0.40549686551094055`, -0.5330607891082764, \
-0.30256691575050354`, -0.5735766887664795, -0.7129297852516174, \
-0.26946330070495605`, 
            0.0884610041975975, -0.2881694734096527, -0.2756451368331909, 
            0.2438357174396515, -0.0031432844698429108`, \
-0.33220288157463074`, 0.9489537477493286, -0.3078230321407318, 
            0.7420628070831299, 
            0.6121140718460083, -0.3462371528148651, -1.7434459924697876`, \
-0.29239174723625183`, -0.27873605489730835`, -0.32457658648490906`, \
-0.292085736989975, -0.5035049319267273, 
            0.5196616053581238, -0.33220288157463074`, -0.31374630331993103`, \
-1.0936566591262817`, -0.9191861748695374, -0.24821609258651733`, \
-0.3674299418926239, -0.31916144490242004`, -0.28125545382499695`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 25}, {5, 15}, {6, 12}, {
            7, -9}, {-3, 8}, {9, 11}, {-4, 10}, {-5, -6}, {-7, -8}, {
            13, -13}, {14, -12}, {-10, -11}, {16, 19}, {-14, 17}, {
            18, -17}, {-15, -16}, {20, 22}, {21, -20}, {-18, -19}, {
            23, -24}, {24, -23}, {-21, -22}, {26, 38}, {27, 28}, {-25, -26}, {
            29, 36}, {30, 32}, {-27, 31}, {-28, -29}, {-30, 33}, {34, 
            35}, {-31, -32}, {-33, -34}, {37, -37}, {-35, -36}, {39, -42}, {
            40, -41}, {-38, 41}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
            1, 1, 2, 1, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 5, 7, 6, 10, 7, 10, 3, 7, 11, 11, 11, 
            10, 4, 8, 11, 10, 11, 3, 7, 10, 2, 6, 7, 11, 7, 1, 6, 3, 6, 10, 4,
             9, 3, 3, 10, 7, 8, 7}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2632814645767212, -0.2818269729614258, \
-0.47411683201789856`, -0.35706740617752075`, -0.5035049319267273, 
            0.6830688714981079, -0.31374630331993103`, 0.8099778294563293, 
            0.2675546705722809, -0.308331161737442, 
            0.12369175255298615`, -0.7921000719070435, -0.18157218396663666`, 
            1.3176137208938599`, -0.26311782002449036`, -0.08091702312231064, \
-1.3415751457214355`, -1.7282015085220337`, 0.42895570397377014`, 
            0.20452792942523956`, -0.20544350147247314`, -0.9667477607727051, \
-0.5735766887664795, -0.4063928723335266, -0.2595949172973633, \
-0.12051939964294434`, -0.16753752529621124`, -1.7434459924697876`, \
-0.11083441972732544`, -0.8669265508651733, -0.5288385152816772, \
-0.2052939236164093, -0.3823316991329193, -0.5527690052986145, \
-0.4257394075393677, -0.6778463125228882, -0.586020827293396, \
-0.1133861243724823, 0.17562955617904663`, -0.0754801481962204}], "Children" -> 
          RawArray["Integer16",{{2, 15}, {3, 10}, {-1, 4}, {-2, 5}, {6, 
            7}, {-3, -4}, {8, 9}, {-5, -6}, {-7, -8}, {-9, 11}, {12, 
            14}, {-10, 13}, {-11, -12}, {-13, -14}, {16, 34}, {17, 32}, {18, 
            19}, {-15, -16}, {20, 29}, {21, 28}, {22, 27}, {-17, 23}, {24, 
            26}, {-18, 25}, {-19, -20}, {-21, -22}, {-23, -24}, {-25, -26}, {
            30, -30}, {-27, 31}, {-28, -29}, {-31, 33}, {-32, -33}, {35, 
            39}, {36, 38}, {37, -36}, {-34, -35}, {-37, -38}, {-39, 
            40}, {-40, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 
            2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 7, 6, 4, 11, 9, 5, 2, 8, 11, 9, 11, 6, 3, 
            10, 8, 8, 3, 9, 6, 11, 6, 5, 8, 6, 9, 3, 9, 4, 9, 11, 6, 10, 6, 9,
             4, 10, 11, 4, 6, 3}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.26311782002449036`, -0.24334947764873505`, \
-0.3092808127403259, -0.41213515400886536`, -0.6089417338371277, \
-0.18635186553001404`, -0.47411683201789856`, -0.5735766887664795, \
-0.2509177625179291, 0.7342196106910706, -0.5527690052986145, 
            0.12369175255298615`, -0.49506041407585144`, -0.5517928600311279, 
            0.9368867874145508, -0.1798265427350998, -0.2540086805820465, 
            0.9608487486839294, 
            0.0884610041975975, -0.5035049319267273, -0.6394681334495544, 
            0.3113919496536255, -0.33687689900398254`, \
-0.0005530327325686812, -0.4401709735393524, 
            0.5464824438095093, -1.1190334558486938`, 
            0.36327388882637024`, -0.39723342657089233`, 
            0.8212953209877014, -0.48683613538742065`, -0.4063928723335266, 
            0.9368867874145508, -0.4908381402492523, -0.7359775900840759, 
            0.586280882358551, -1.220565676689148, -0.18157218396663666`, \
-0.158805713057518, -0.051722727715969086`, -0.29968592524528503`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 32}, {3, 23}, {4, 21}, {5, 7}, {-1, 
            6}, {-2, -3}, {-4, 8}, {9, 15}, {10, 13}, {11, -8}, {-5, 
            12}, {-6, -7}, {14, -11}, {-9, -10}, {16, 20}, {17, -16}, {
            18, -15}, {19, -14}, {-12, -13}, {-17, -18}, {-19, 
            22}, {-20, -21}, {24, 31}, {25, -29}, {26, 28}, {
            27, -24}, {-22, -23}, {-25, 29}, {-26, 
            30}, {-27, -28}, {-30, -31}, {33, 35}, {34, -34}, {-32, -33}, {36,
             39}, {37, -38}, {-35, 38}, {-36, -37}, {40, -42}, {-39, 
            41}, {-40, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 
            1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 
            2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10, 5, 11, 6, 4, 10, 3, 10, 8, 9, 11, 6, 9, 6,
             9, 9, 5, 11, 3, 9, 6, 6, 7, 3, 10, 10, 9, 10, 4, 4, 8, 10, 3, 7, 
            7, 4, 9, 9, 7, 9}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.07838495075702667, -0.26825693249702454`, \
-0.18157218396663666`, -0.34728118777275085`, -0.3674299418926239, \
-1.0936566591262817`, -0.2366591989994049, -0.33220288157463074`, \
-0.23855407536029816`, -0.4611647427082062, 
            0.001586175407283008, -0.5330607891082764, -0.7359775900840759, \
-0.5879502296447754, -0.8275818824768066, -0.9191861748695374, \
-0.40549686551094055`, 2.2605392932891846`, 
            0.8347952365875244, -0.27795615792274475`, -0.5583943724632263, \
-0.630172848701477, -0.16753752529621124`, -1.7493008375167847`, 
            1.1907047033309937`, 0.42925092577934265`, 1.3709211349487305`, 
            0.9368867874145508, -0.3823316991329193, -0.39723342657089233`, \
-0.21691761910915375`, 0.5561599135398865, 
            1.27598237991333, -0.24876461923122406`, -0.28667059540748596`, \
-0.32272475957870483`, 0.5464824438095093, 
            1.187712550163269, -0.10797099024057388`, 0.1800653040409088}], 
          "Children" -> 
          RawArray["Integer16",{{2, 17}, {3, 14}, {4, 11}, {5, 9}, {
            6, -5}, {-1, 7}, {8, -4}, {-2, -3}, {10, -8}, {-6, -7}, {-9, 
            12}, {-10, 13}, {-11, -12}, {-13, 15}, {16, -16}, {-14, -15}, {18,
             35}, {19, -34}, {20, 32}, {-17, 21}, {22, 23}, {-18, -19}, {24, 
            31}, {25, 26}, {-20, -21}, {-22, 27}, {28, -27}, {29, -26}, {
            30, -25}, {-23, -24}, {-28, -29}, {33, 
            34}, {-30, -31}, {-32, -33}, {36, 38}, {37, -37}, {-35, -36}, {
            39, -41}, {-38, 40}, {-39, -40}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 
            1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{7, 6, 4, 3, 11, 11, 9, 5, 10, 9, 2, 8, 10, 10,
             10, 6, 11, 7, 9, 6, 9, 11, 3, 5, 7, 8, 7, 5, 7, 8, 10, 10, 5, 7, 
            8, 7, 3, 9, 8, 4}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.15670724213123322`, -0.2881694734096527, \
-0.20351091027259827`, 1.339009165763855, 2.1384336948394775`, 
            1.0394835472106934`, 1.6457339525222778`, -0.47411683201789856`, 
            0.3023419678211212, -0.5527690052986145, -0.5735766887664795, \
-0.2632814645767212, -0.586020827293396, 
            1.1907047033309937`, -0.7129297852516174, -0.4570600390434265, 
            0.42895570397377014`, -0.2704251706600189, 
            1.3709211349487305`, -0.39794835448265076`, \
-0.36956045031547546`, -0.03809813782572746, -0.9299532771110535, \
-0.43980684876441956`, -0.308331161737442, -0.2756451368331909, \
-0.17295266687870026`, -0.43980684876441956`, -0.2650100290775299, \
-0.23855407536029816`, 
            0.04852401837706566, -1.9820195436477661`, -0.30256691575050354`, 
            0.07072862982749939, 
            0.04890172928571701, -0.12421640753746033`, -1.1190334558486938`, \
-0.36956045031547546`, -0.13346269726753235`, -0.2333143651485443}], 
          "Children" -> 
          RawArray["Integer16",{{2, 34}, {3, 27}, {4, 26}, {5, -23}, {
            6, -22}, {7, 24}, {8, -18}, {9, 11}, {10, -3}, {-1, -2}, {12, 
            19}, {13, 15}, {-4, 14}, {-5, -6}, {16, 17}, {-7, -8}, {
            18, -11}, {-9, -10}, {20, -17}, {21, 23}, {-12, 
            22}, {-13, -14}, {-15, -16}, {-19, 25}, {-20, -21}, {-24, -25}, {
            28, 33}, {29, 32}, {30, -29}, {
            31, -28}, {-26, -27}, {-30, -31}, {-32, -33}, {35, -41}, {
            36, -40}, {-34, 37}, {38, 39}, {-35, -36}, {
            40, -39}, {-37, -38}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 
            1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 8, 7, 7, 10, 3, 9, 7, 3, 3, 5, 9, 10, 8, 3,
             8, 4, 10, 3, 3, 4, 3, 7, 8, 10, 9, 7, 10, 3, 8, 6, 8, 6, 10, 7, 
            7, 5, 7, 6, 7, 3, 3}], "NumericalThresholds" -> 
          RawArray[
            "Real32",{-0.2632814645767212, -0.28800883889198303`, \
-0.35706740617752075`, -0.308331161737442, 1.063795804977417, 
            0.2675546705722809, -0.7359775900840759, -0.292085736989975, \
-1.1190334558486938`, -1.4971938133239746`, -0.40549686551094055`, 
            0.0884610041975975, -0.586020827293396, -0.2756451368331909, 
            0.07847446203231812, -0.27873605489730835`, -0.09919878095388412, \
-1.9820195436477661`, -0.5517928600311279, -1.7493008375167847`, \
-0.3674299418926239, -0.8669265508651733, -0.24876461923122406`, \
-0.06855332851409912, 
            0.5561599135398865, -0.6443732976913452, -0.32457658648490906`, \
-0.33220288157463074`, 
            0.7087417840957642, -0.2230994552373886, -0.4570600390434265, \
-0.2107357680797577, -0.11083441972732544`, 
            0.3023419678211212, -0.302916020154953, -0.28667059540748596`, \
-0.43980684876441956`, -0.25417977571487427`, -0.5288385152816772, \
-0.16212238371372223`, -0.5517928600311279, -0.8038998246192932}], "Children" -> 
          RawArray["Integer16",{{2, 17}, {3, 9}, {-1, 4}, {5, 8}, {6, -5}, {
            7, -4}, {-2, -3}, {-6, -7}, {10, 11}, {-8, -9}, {12, -16}, {13, 
            16}, {-10, 14}, {15, -13}, {-11, -12}, {-14, -15}, {18, 41}, {-17,
             19}, {20, 26}, {-18, 21}, {22, 24}, {23, -21}, {-19, -20}, {
            25, -24}, {-22, -23}, {27, 33}, {-25, 28}, {29, -31}, {30, -30}, {
            31, 32}, {-26, -27}, {-28, -29}, {34, -40}, {35, 
            36}, {-32, -33}, {-34, 37}, {38, 39}, {-35, -36}, {-37, 
            40}, {-38, -39}, {42, -43}, {-41, -42}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 
            1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 
            2, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{11, 8, 7, 7, 9, 7, 5, 3, 2, 3, 6, 3, 10, 2, 3,
             11, 3, 5, 11, 9, 10, 8, 6, 11, 8, 8, 10, 8, 5, 9, 9, 6, 3, 8, 8, 
            9, 10, 4, 7, 4, 9, 7, 6}], "NumericalThresholds" -> 
          RawArray["Real32",{
            0.3068501055240631, -0.23855407536029816`, -0.2271040678024292, \
-0.2595949172973633, 
            0.1800653040409088, -0.35706740617752075`, -0.47411683201789856`, 
            0.39360812306404114`, -0.5735766887664795, 
            1.27598237991333, -0.29239174723625183`, -0.7408730387687683, 
            0.9368867874145508, -0.5735766887664795, -0.17363247275352478`, \
-0.18157218396663666`, 
            0.20452792942523956`, -0.43980684876441956`, \
-0.18157218396663666`, -0.9191861748695374, 
            1.063795804977417, -0.16746285557746887`, 
            0.15094591677188873`, -0.18157218396663666`, \
-0.14582639932632446`, -0.21382668614387512`, -1.0936566591262817`, 
            0.11381110548973083`, -0.028087090700864792`, 
            0.8212953209877014, -1.4688119888305664`, -0.5330607891082764, \
-0.7408730387687683, -0.118008092045784, -0.21382668614387512`, 
            0.36327388882637024`, 
            0.1754329800605774, -0.39723342657089233`, -0.2704251706600189, \
-0.3823316991329193, -0.0031432844698429108`, -0.2650100290775299, \
-0.3219476044178009}], "Children" -> 
          RawArray["Integer16",{{2, 28}, {3, 17}, {4, -15}, {5, 16}, {6, 
            12}, {-1, 7}, {8, 9}, {-2, -3}, {10, -7}, {11, -6}, {-4, -5}, {13,
             14}, {-8, -9}, {-10, 15}, {-11, -12}, {-13, -14}, {18, 25}, {19, 
            21}, {20, -18}, {-16, -17}, {22, -23}, {23, 
            24}, {-19, -20}, {-21, -22}, {26, -27}, {-24, 27}, {-25, -26}, {
            29, -44}, {30, -43}, {31, 42}, {-28, 32}, {33, 34}, {-29, -30}, {
            35, -39}, {36, 40}, {37, 39}, {-31, 
            38}, {-32, -33}, {-34, -35}, {-36, 41}, {-37, -38}, {
            43, -42}, {-40, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 
            1, 1, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 4, 9, 3, 7, 6, 8, 7, 8, 11, 9, 8, 8, 2, 5, 
            3, 10, 3, 6, 10, 3, 11, 11, 10, 7, 3, 1, 5, 6, 9, 5, 5, 11, 6, 7, 
            4, 10, 8, 7, 3, 7, 8, 1, 6, 9, 9}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.19837208092212677`, -0.158805713057518, 
            1.554129719734192, -1.1190334558486938`, -0.24876461923122406`, \
-0.6175060272216797, -0.27873605489730835`, -0.2650100290775299, \
-0.21691761910915375`, -0.7921000719070435, -0.5527690052986145, \
-0.27873605489730835`, -0.24473591148853302`, -0.5735766887664795, \
-0.30256691575050354`, 1.27598237991333, -0.2052939236164093, 
            0.07847446203231812, -0.36417022347450256`, 0.3023419678211212, 
            0.330581396818161, 0.7342196106910706, -0.18157218396663666`, 
            0.5561599135398865, -0.292085736989975, -0.6778463125228882, \
-1.7434459924697876`, -0.43980684876441956`, -0.5330607891082764, \
-1.1023948192596436`, -0.0967070460319519, -0.1310170292854309, 
            
            0.3068501055240631, -0.42750418186187744`, -0.24334947764873505`, \
-0.27801957726478577`, -0.586020827293396, -0.1396445482969284, \
-0.292085736989975, 0.8347952365875244, 
            0.4443732798099518, -0.06546240299940109, -1.7434459924697876`, \
-0.39794835448265076`, -0.8275818824768066, -1.285603404045105}], "Children" -> 
          RawArray["Integer16",{{2, 31}, {3, -30}, {4, -29}, {5, 9}, {
            6, -5}, {-1, 7}, {-2, 8}, {-3, -4}, {10, 29}, {11, 13}, {-6, 
            12}, {-7, -8}, {14, 27}, {15, 23}, {16, -17}, {17, -16}, {18, 
            19}, {-9, -10}, {20, -15}, {21, 22}, {-11, -12}, {-13, -14}, {-18,
             24}, {25, -22}, {26, -21}, {-19, -20}, {-23, 
            28}, {-24, -25}, {-26, 30}, {-27, -28}, {32, 44}, {33, 43}, {34, 
            38}, {35, 36}, {-31, -32}, {-33, 37}, {-34, -35}, {39, 
            40}, {-36, -37}, {41, -41}, {
            42, -40}, {-38, -39}, {-42, -43}, {-44, 45}, {
            46, -47}, {-45, -46}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 
            2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 
            1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0]]}, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 11.], 
         "Key" -> "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], 
      "OOBConfusionMatrix" -> {{0.7317073106765747, 0.26829268932342526`}, {
       0.26829268932342526`, 0.7317073106765747}}, "Method" -> "RandomForest",
       "Options" -> 
      Association[
       "FeatureFraction" -> 
        Association[
         "Value" -> 11^Rational[-1, 2], "Options" -> Association[]], 
        "LeafSize" -> Association["Value" -> 5, "Options" -> Association[]], 
        "TreeNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "Implementation" -> 
        Association["Value" -> "DAAL", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5837022484249852, 0.011862105338630342`], "Accuracy" -> 
         PlusMinus[0.7088950032220125, 0.024139869912846838`], 
         "EvaluationTime" -> 0.00012190714285714285`, "TestSize" -> 492, 
         "TrainingSize" -> 326, "TrainingTime" -> 0.033056528571428566`, 
         "TrainingMemory" -> 299777.14285714284`, "ModelMemory" -> 
         103194.28571428571`, "ExperimentCount" -> 6, "ModelUtility" -> 
         0.7369814378557993, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6046789928272043, 0.025843048062421037`], 
           PlusMinus[0.5724675135989742, 0.019250512857739304`], 
           PlusMinus[0.5943520741871812, 0.02671354347762419], 
           PlusMinus[0.5769121846786969, 0.024169017485867566`], 
           PlusMinus[0.609831801900032, 0.028554149091022767`], 
           PlusMinus[0.5692854588769595, 0.019890593233602167`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6692188059568723, 0.05222799915885347], 
           PlusMinus[0.7415079625833781, 0.04879070933830203], 
           PlusMinus[0.6812669987279566, 0.051755547027087595`], 
           PlusMinus[0.7415079625833781, 0.04879070933830203], 
           PlusMinus[0.693315191499041, 0.05124462502553577], 
           PlusMinus[0.7174115770412094, 0.050102575461482925`]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 408], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 103951280333721]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5998319375434331, 0.013611007614267296`], 
              "Accuracy" -> 
              PlusMinus[0.7052169799218917, 0.020017476303397737`], 
              "EvaluationTime" -> 0.00019162109882747068`, "TestSize" -> 598, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.10471513333333334`, 
              "TrainingMemory" -> 156810.66666666666`, "ModelMemory" -> 
              85725.33333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.7168283333868253, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6083967094884356, 0.012017406981666883`], 
                PlusMinus[0.5881917963079769, 0.014009801838069436`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7145432196997393, 0.03208554048465661], 
                PlusMinus[0.7003988239092076, 0.023061975166437286`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6440986602741601, 0.007428344034591689], "Accuracy" -> 
              PlusMinus[0.6792788251755031, 0.03859676364544882], 
              "EvaluationTime" -> 0.00012824566666666667`, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.03606296666666667, 
              "TrainingMemory" -> 165618.66666666666`, "ModelMemory" -> 
              87725.33333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.669049241233259, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6432672399759654, 0.012636317974446724`], 
                PlusMinus[0.6445328502018103, 0.009131667852098837]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6588629791526784, 0.04759634188315472], 
                PlusMinus[0.6984669395487183, 0.04614302198810466]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5837022484249852, 0.011862105338630342`], 
              "Accuracy" -> 
              PlusMinus[0.7088950032220125, 0.024139869912846838`], 
              "EvaluationTime" -> 0.00012190714285714285`, "TestSize" -> 492, 
              "TrainingSize" -> 326, "TrainingTime" -> 0.033056528571428566`, 
              "TrainingMemory" -> 299777.14285714284`, "ModelMemory" -> 
              103194.28571428571`, "ExperimentCount" -> 6, "ModelUtility" -> 
              0.7369814378557993, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6046789928272043, 0.025843048062421037`], 
                PlusMinus[0.5724675135989742, 0.019250512857739304`], 
                PlusMinus[0.5943520741871812, 0.02671354347762419], 
                PlusMinus[0.5769121846786969, 0.024169017485867566`], 
                PlusMinus[0.609831801900032, 0.028554149091022767`], 
                PlusMinus[0.5692854588769595, 0.019890593233602167`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6692188059568723, 0.05222799915885347], 
                PlusMinus[0.7415079625833781, 0.04879070933830203], 
                PlusMinus[0.6812669987279566, 0.051755547027087595`], 
                PlusMinus[0.7415079625833781, 0.04879070933830203], 
                PlusMinus[0.693315191499041, 0.05124462502553577], 
                PlusMinus[0.7174115770412094, 0.050102575461482925`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00012190714285714285`, "MeanCrossEntropy" -> 
             PlusMinus[0.5837022484249852, 0.011862105338630342`], 
             "ModelMemory" -> 103194.28571428571`, "TrainingMemory" -> 
             299777.14285714284`, "TrainingTime" -> 0.14608649424481449`], 
           "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 103946985366425]], "MaxTrainingSize" -> 408, 
      "LastReportingTime" -> 3.7843918329612331`17.330571085727687*^9, 
      "PreprocessorEvaluationTime" -> 0.000011506787109375`2., 
      "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.32, "ElapsedTimes" -> 
          0.279929, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3959022, "ExperimentCounts" -> 2], 
         Association[
         "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.7558035999999999, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[103955575301017]], "ID" -> 
         103959870268313]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
           1655829805352185057], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
           4707290959889891078], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
           8921746992689292037], "f4" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
           739979300684816526], "f5" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
           2700468875218673242], "f6" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
           7113523297063603705], "f7" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
           2774393019402469807], "f8" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
           6938996016951802333], "f9" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
           4673898987759877533], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5043514025678373964], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5107476442784992394]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.3372577, "MaxTrainingMemory" -> 797224, 
      "DataMemory" -> 806280, "FunctionMemory" -> 271928, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 12, 3, 19, 57, 13.357131`8.878288139036712}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7835210865895767`*^9, 3.7835211088686576`*^9}, {
   3.783522179578282*^9, 3.783522187314743*^9}, {3.783528315350133*^9, 
   3.783528329990921*^9}, 3.78352914862628*^9, 3.7835296935058327`*^9, 
   3.783531053945804*^9, 3.784231479601348*^9, 3.7843918334691086`*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"f83a3369-88ef-4b0c-a5ae-d78f7eca4b48"]
}, Open  ]],

Cell["2) The report of the training is generated:", "Text",
 CellChangeTimes->{
  3.784231985581382*^9},ExpressionUUID->"1f3e05c2-bdd5-486c-a357-\
3b7475b7fcf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "RFtraining", "]"}]], "Input",
 CellChangeTimes->{{3.783528994881131*^9, 3.7835290142820015`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"a3eca312-653d-4cd4-8f8c-7138cc10a916"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12,
          FontWeight->Bold],
         FrameMargins->{{10, 5}, {-5, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.93119, 0.93119, 0.93119],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Input type\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"\"Mixed\"",StyleBox[
                   
                   TemplateBox[{"\" (number: \"", "11", "\")\""}, 
                    "RowDefault"], 
                   GrayLevel[0.5], StripOnInput -> False]},
                 "RowDefault"],
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Boolean\"", ",", "\"Boolean\""}],
                    "}"}], Short[#, 10]& ]],
               Annotation[#, 
                
                Short[{"Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Numerical", "Numerical", "Numerical", 
                  "Numerical", "Boolean", "Boolean"}, 10], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Classes\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{",","\",\"","1","2"},
               "RowWithSeparators"]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"Method\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["\<\"RandomForest\"\>",
                TemplateBox[{
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Data`UnorderedAssociation[
                    "RowCount" -> 20, "Length" -> 4, "InitialType" -> 
                    TypeSystem`Struct[{
                    "FeatureFraction", "LeafSize", "TreeNumber", 
                    "DistributionSmoothing"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], "Shape" -> 
                    TypeSystem`PackageScope`DocumentShape[
                    
                    Association[{"FeatureFraction"} -> 
                    TypeSystem`PackageScope`AtomShape[60], {"LeafSize"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {"TreeNumber"} -> 
                    TypeSystem`PackageScope`AtomShape[34], {
                    "DistributionSmoothing"} -> 
                    TypeSystem`PackageScope`AtomShape[60]], 1], "InitialData" -> 
                    TypeSystem`PackageScope`CacheHandle[519350554], "Type" -> 
                    TypeSystem`Struct[{
                    "FeatureFraction", "LeafSize", "TreeNumber", 
                    "DistributionSmoothing"}, {
                    TypeSystem`Atom[Real], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], "HandleQ" -> True, "RowTarget" -> 
                    20, "Data" -> 
                    TypeSystem`PackageScope`CacheHandle[519350554]], 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"FeatureFraction\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"FeatureFraction\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 501041228][{
                    Key["FeatureFraction"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.301511"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["FeatureFraction"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"LeafSize\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"LeafSize\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 501041228][{
                    Key["LeafSize"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["LeafSize"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["5"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["LeafSize"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"TreeNumber\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"TreeNumber\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 501041228][{
                    Key["TreeNumber"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["TreeNumber"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["50"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["TreeNumber"]]], "Mouse"], 
                    ImageSize -> {{34, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}, {
                    Item[
                    Annotation[
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    GrayLevel[0.4]]], {{20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"DistributionSmoothing\"", FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 501041228][{
                    Key["DistributionSmoothing"]}]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Pane[
                    Annotation[
                    RawBoxes["0.5"], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    GeneralUtilities`Slice[
                    Key["DistributionSmoothing"]]], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    Alignment -> {Left, Baseline}]}}, 
                    BaseStyle -> {ContextMenu -> {
                    MenuItem["Copy position to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy data to clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste position in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste data in new cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
                    FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
                    Dividers -> All, FrameStyle -> GrayLevel[0.85], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
                    TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
                    If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                    TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 501041228][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`Pathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    501041228]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
                    Dynamic[
                    Replace[
                    MouseAnnotation[Null], {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][Null] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    501041228][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
                    Blank[]]] :> (
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {}], FrameStyle -> None, ImageMargins -> 
                    0, FrameMargins -> 0, Alignment -> Top, 
                    ImageSize -> {Automatic, 14}]}, 
                    DynamicBox[
                    ToBoxes[
                    Column[
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
                    TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
                    TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
                    TypeSystem`NestedGrid`PackagePrivate`alignBar[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$][
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], 
                    Spacings -> 
                    If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
                    0, {{}, {0, 0.05, 0}}]], StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    Initialization :> Block[{$ContextPath = $ContextPath}, 
                    Needs["TypeSystem`"]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
                    TypeSystem`NestedGrid`PackagePrivate`deleteState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], Deploy, 
                   DefaultBaseStyle -> "Deploy"]}, "CopyTag", 
                 DisplayFunction -> (#& ), 
                 InterpretationFunction -> ("Dataset[<>]"& )]],
               Annotation[#, 
                Dataset[
                 Association[
                 "FeatureFraction" -> 11^Rational[-1, 2], "LeafSize" -> 5, 
                  "TreeNumber" -> 50, "DistributionSmoothing" -> 0.5], 
                 
                 TypeSystem`Struct[{
                  "FeatureFraction", "LeafSize", "TreeNumber", 
                   "DistributionSmoothing"}, {
                   TypeSystem`Atom[Real], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Integer], 
                   TypeSystem`Atom[Real]}], 
                 Association["ID" -> 257328857441180]], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Accuracy\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                TemplateBox[{
                 TemplateBox[{
                   "70.8895003222012434207`3.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod],
                  StyleBox[
                   TemplateBox[{"\" \[PlusMinus] \"", 
                    
                    TemplateBox[{
                    "2.4139869912846836364`2.", "\"%\"", "percent", 
                    "\"Percent\""}, "QuantityPostfix", SyntaxForm -> Mod]}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.6606152633963188192`3.",
                   "\", \"", "0.7571747430477061558`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.6606152633963188192`3., 
                  ", ", 0.7571747430477061558`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox[
                 TagBox[
                  TooltipBox[
                  "\"Loss\"", "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.5837022484249851928`3.",StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.011862105338630342`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.5599780377477244775`3.",
                   "\", \"", "0.6074264591022459081`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.5599780377477244775`3., 
                  ", ", 0.6074264591022459081`3., "]"}], "Tooltip"]& ]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Single evaluation time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "13.6`",
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}],"milliseconds per example",FractionBox[
                "\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Batch evaluation speed\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              TemplateBox[{
               "7.4`",RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}],"examples per millisecond",
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Classifier memory\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"276.`","\"kB\"","kilobytes","\"Kilobytes\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox[
                "\"Training examples used\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"408","\"examples\"","examples","\"Examples\""},
               "Quantity"]},
             {
              
              TemplateBox[{
               TemplateBox[{5}, "Spacer1"],StyleBox["\"Training time\"", 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.33`","\"s\"","seconds","\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file4Automation`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.5111057670967477}, {
                    4.0943445622221, -0.4399033654281016}, {
                    5.786897381366708, -0.5383642747582497}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6222249222220562}, {
                    2.302585092994046, -0.35604271796429515`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5111057670967477}}, {{
                    4.0943445622221, -0.4399033654281016}}, {{
                    5.786897381366708, -0.5383642747582497}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6222249222220562}}, {{
                    2.302585092994046, -0.35604271796429515`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5340585469258682}, {
                    2.302585092994046, -0.4886680180837931}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.45150331431254265`}, {
                    4.0943445622221, -0.42843643383840296`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5588957967901431}, {
                    5.786897381366708, -0.5182458292520817}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.641544598337539}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6370128224585985, -0.35604271796429515`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.641544598337539}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6370128224585985, -0.35604271796429515`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7052169799218917}, {
                    4.0943445622221, 0.6792788251755031}, {5.786897381366708, 
                    0.7088950032220125}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5907458360183437}, {
                    2.302585092994046, 0.8151345902106036}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7052169799218917}}, {{
                    4.0943445622221, 0.6792788251755031}}, {{
                    5.786897381366708, 0.7088950032220125}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5907458360183437}}, {{
                    2.302585092994046, 
                    0.8151345902106036}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5713601124613179}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5907458360183437, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5713601124613179}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5907458360183437, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.5111057670967477}, {
                    4.0943445622221, -0.4399033654281016}, {
                    5.786897381366708, -0.5383642747582497}}]}, 
                    "RandomForest"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5455106310805992}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5438343252765911, -0.4399033654281016}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5455106310805992}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5438343252765911, -0.4399033654281016}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file4Automation`PackagePrivate`pos$$ - 
                    1, 1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file4Automation`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file4Automation`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file4Automation`PackagePrivate`pos$$ + 
                    1, 
                    Length[{
                    Graphics[{{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.5111057670967477}, {
                    4.0943445622221, -0.4399033654281016}, {
                    5.786897381366708, -0.5383642747582497}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, -0.6222249222220562}, {
                    2.302585092994046, -0.35604271796429515`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.5111057670967477}}, {{
                    4.0943445622221, -0.4399033654281016}}, {{
                    5.786897381366708, -0.5383642747582497}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, -0.6222249222220562}}, {{
                    2.302585092994046, -0.35604271796429515`}}}]}, {}}}, {}, \
{}, {}, {}}}, {{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, -0.5340585469258682}, {
                    2.302585092994046, -0.4886680180837931}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.0943445622221, -0.45150331431254265`}, {
                    4.0943445622221, -0.42843643383840296`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.786897381366708, -0.5588957967901431}, {
                    5.786897381366708, -0.5182458292520817}}]}}}, {}, {}, {}, \
{}}}}, {DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.641544598337539}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6370128224585985, -0.35604271796429515`}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.641544598337539}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.6370128224585985, -0.35604271796429515`}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}], 
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.7052169799218917}, {
                    4.0943445622221, 0.6792788251755031}, {5.786897381366708, 
                    0.7088950032220125}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    Opacity[0]], 
                    
                    Line[{{2.302585092994046, 0.5907458360183437}, {
                    2.302585092994046, 0.8151345902106036}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.7052169799218917}}, {{
                    4.0943445622221, 0.6792788251755031}}, {{
                    5.786897381366708, 0.7088950032220125}}}]}, {
                    Directive[
                    Opacity[0]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledSquare]", FontSize -> 8.96], {0., 0.}], {{{
                    2.302585092994046, 0.5907458360183437}}, {{
                    2.302585092994046, 
                    0.8151345902106036}}}]}, {}}}, {}, {}, {}, {}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, DisplayFunction -> Identity, DisplayFunction -> 
                    Identity, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5713601124613179}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5907458360183437, 1}}, PlotRangeClipping -> 
                    True, ImagePadding -> {{30, 10}, {37, 0}}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, 0.5713601124613179}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {0.5907458360183437, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], Automatic}}], 
                    Graphics[{{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, -0.5111057670967477}, {
                    4.0943445622221, -0.4399033654281016}, {
                    5.786897381366708, -0.5383642747582497}}]}, 
                    "RandomForest"]}}, {}, {}, {}, {}}}}, {
                    DisplayFunction -> Identity, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5455106310805992}, 
                    PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5438343252765911, -0.4399033654281016}}, 
                    PlotRangeClipping -> True, 
                    ImagePadding -> {{30, 10}, {37, 0}}, DisplayFunction -> 
                    Identity, AspectRatio -> GoldenRatio^(-1), 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {2.1689736810648603`, -0.5455106310805992}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[{Log, Exp}], {}}, {
                    Charting`ScaledTicks[{Log, Exp}], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{30, 10}, {37, 0}}, ImageSize -> 330, 
                    LabelStyle -> 10, 
                    Method -> {
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Exp[#]& )[
                    Part[#, 1]], 
                    (Exp[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2.226897703577513, 
                    Log[408]}, {-0.5438343252765911, -0.4399033654281016}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[{Log, Exp}], 
                    Charting`ScaledTicks[{Log, Exp}]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {118., 122.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{1.}}, "RowsIndexed" -> {}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 12, FontFamily -> "Segoe UI", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9802, 0.9802, 0.9802],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.7835291555343165`*^9, 3.783531057533762*^9, 
  3.7842314833510838`*^9, 3.7843918362564187`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"70af3afb-0e74-4061-849d-50bf4146be58"]
}, Open  ]],

Cell["\<\
3) The test dataset is applied to the trained model to classify the data to \
the two classes.\
\>", "Text",
 CellChangeTimes->{
  3.7842319972387238`*^9},ExpressionUUID->"0756d70c-5b32-485a-a4ba-\
24eee93bf791"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RFtesting", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"RFtraining", ",", "testdata"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783521183008703*^9, 3.783521208499752*^9}, {
   3.7835287504757156`*^9, 3.783528780166681*^9}, {3.7835288195171366`*^9, 
   3.783528830316761*^9}, {3.783528882234975*^9, 3.783528885780933*^9}, {
   3.7835289227532253`*^9, 3.783528975665806*^9}, 3.7835297790797462`*^9, {
   3.7835298926122365`*^9, 3.7835298967388687`*^9}, {3.7835299769127197`*^9, 
   3.783530006130987*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"2c5c7575-8462-487b-b2b4-66bc46298985"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["175", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7600000000000000089`4.155867404576452", "\[PlusMinus]", 
                    "0.0323770885360153485`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 408, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "Age" -> Association["Type" -> "Numerical"], "Total_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Direct_Bilirubin" -> 
              Association["Type" -> "Numerical"], "Alkaline_Phosphatase" -> 
              Association["Type" -> "Numerical"], "Alanine_Aminotransferase" -> 
              Association["Type" -> "Numerical"], 
              "Aspartate_Aminotransferase" -> 
              Association["Type" -> "Numerical"], "Total_Proteins" -> 
              Association["Type" -> "Numerical"], "Albumin" -> 
              Association["Type" -> "Numerical"], 
              "Albumin_and_Globulin_Ratio" -> 
              Association["Type" -> "Numerical"], "Male" -> 
              Association["Type" -> "Boolean"], "Female" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["FromNamedFeatures", 
                  Association[
                  "FeatureNames" -> {
                    "Age", "Total_Bilirubin", "Direct_Bilirubin", 
                    "Alkaline_Phosphatase", "Alanine_Aminotransferase", 
                    "Aspartate_Aminotransferase", "Total_Proteins", "Albumin",
                     "Albumin_and_Globulin_Ratio", "Male", "Female"}]], 
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 11]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Numerical", "Numerical", "Numerical", 
                    "Numerical", "Boolean", "Boolean"}, 
                   "FeatureKeys" -> {
                    "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", 
                    "f10", "f11"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
              Association["Type" -> "Numerical", "Weight" -> 1], "f10" -> 
              Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
            Association[
             "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
              Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
            "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f2" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f4" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f5" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f6" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f7" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f8" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f9" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                  "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                  "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9], 
                  "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Numerical", "Weight" -> 1],
                     "f2" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1], "f3" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f4" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f5" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f6" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f7" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f8" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1], "f9" -> 
                    Association["Type" -> "Numerical", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "(f1f2f3f4f5f6f7f8f9)" -> 
                    Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                    "Version" -> {11.3, 0}, "ID" -> 2171448911019223696]], 
                  MachineLearning`MLProcessor["ToVector", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                    "f11" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                     "Output" -> 
                    Association[
                    "(f10f11)" -> 
                    Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                    "Version" -> {11.3, 0}, "ID" -> 6625633032600193031]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 3803738710920813298, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "BooleanVector", "Weight" -> 2]], 
                "Version" -> {11.3, 0}, "ID" -> 7095006054227575035, "Output" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2]]]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f10f11)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 2], 
                  "(f1f2f3f4f5f6f7f8f9)" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 9]], 
                "Spans" -> {
                  Span[1, 2], 
                  Span[3, 11]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 7033924897365318974]], 
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association[
                   "Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}, 
                    "Type" -> "NumericalVector"]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 408, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, "Method" -> "Naive", "VectorLength" -> 
                    11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 11, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 11]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 9]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> Association["Matrix" -> CompressedData["
1:eJwlzGtQCwAcAPBpV6KrISnVnLqoI5ZHJ0n/Hld2EtpKQg8jG6HHbZpFOlEn
KYmiQyo91LZsPVbT+vckbtWIbrXCqCVdpUMyCWcffl9/NoxoWqQegUAw+mfB
P9os44nrFS+gRcOw+FLch7zJqdohYzU61Mdey/LKhJ68bq7D9woolVIFOeM1
EFh/J4/CLkSL6TjmPEEE0sQJW/hlPJzRPYi6B87qHtise3BC9+BD3YM03QN7
x/4/8EX4/4Hpg0+Kw0ebIY47fWluVTf40IQUsqATLSIs0+5q78AsmUTMvq6E
V8pDaYr8z8gPY1lWuLVC4xXqtyF7Ee7M5RhEkZJhDd13u/pxH4SM95hFjyFG
eKkYCQlyyChavPZA5ADMXYmXvY/qRtvkYD/IbcTEE/aER05iSJGZtgwvqEGj
C/Gp5eEa/H1ftVbg2Q8XTQoWcn82I/VXkuvgpBzqbAwKebtUwMw58/V1jhzJ
lfvyukRSnBrKYblvlECLFVvDpjwGql3S/SUrNGBSLxV6fpDDSrXjFveBUrAx
9CHMGLfDdD7rjH2FDMzHDIWVFzVgHkAi6i1VAYF/e2qu9S2UBNBCV7c/wNTZ
MLpo3U2k8d3Mljf3gFXIu4enQ7swLjtUHHLvJRwjF5Vyyt+jk8pSeOB5BrZV
dzkv+i3CpEgP28T8R1h5OSYolqLBztmgAn1aFZQZkCdf+76BZAFxe0O4HIWD
fwJnal9Cr6mHfvDHt7g0w6LKSCgBh53UdHpDEwrPfRVvM5dg5n6f3Z7eGrAz
6yAFtkiQZd2/fCq0E0VBaedKtUp09RvOKLFWANclNZY+/gr+5CZtjTBSwpLT
T5VtLk0YMHyJrd40gC7frvrt4d6CupgS+vmUamAoOCZ2MX1Icr676N3xAez3
T0/8HPUMHDUNxOijVbBMaei9o6MN3IvX2x32b0WnMIX2kzIPbDjiE9XzpVie
tZXLiJQi8+yeU2WjPdjIKRhivunF57u/d8YFFoLsyMpJQmUdqmubPPTCFaj1
tjXQZ7cjk2cadZIyAr03RojJrhKg/nDeYKwqgr8zyZ4b
                    "], "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                    44.754901960784316`, 3.3656862745098044`, 
                    1.4818627450980406`, 284.25, 77.93872549019608, 
                    111.17892156862744`, 6.503431372549016, 3.161764705882353,
                     0.9594803921568622}, 
                    "StandardDeviation" -> {0.43158834842826654`, 
                    0.4315883484282666, 15.866283325310173`, 
                    6.7106294830246105`, 2.9146039418802396`, 
                    236.83978668885752`, 184.66743736215392`, 
                    323.52800110172257`, 1.091651918862863, 
                    0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 9, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.0256462, "MaxTrainingMemory" -> 
                    165240, "DataMemory" -> 36984, "FunctionMemory" -> 23296, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2019, 12, 3, 19, 57, 11.121699`8.798746096219892}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 11, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                8654400506150804376]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Mean" -> {0.7524509803921569, 0.24754901960784315`, 
                 44.754901960784316`, 3.3656862745098044`, 
                 1.4818627450980406`, 284.25, 77.93872549019608, 
                 111.17892156862744`, 6.503431372549016, 3.161764705882353, 
                 0.9594803921568622}, 
                "StandardDeviation" -> {0.43158834842826654`, 
                 0.4315883484282666, 15.866283325310173`, 6.7106294830246105`,
                  2.9146039418802396`, 236.83978668885752`, 
                 184.66743736215392`, 323.52800110172257`, 1.091651918862863, 
                 0.7879663720363956, 0.32758536472828104`}, "Output" -> 
                Association[
                 "((f10f11)(f1f2f3f4f5f6f7f8f9))" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 11.]], 
                "Version" -> {11.3, 0}, "ID" -> 369909898545287803]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6077498662143407612]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
                "Version" -> {11.3, 0}, "ID" -> 1986095476749408585, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 785875187378349720]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[1 -> 0.7048780487804878, 2 -> 0.2951219512195122]], 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 6, 6, 7, 8, 6, 3, 11, 7, 10, 3, 4, 8, 4,
                4, 4, 3, 4, 3, 3, 5, 10, 11, 5, 3, 6, 4, 4, 4, 5, 6, 8, 10, 8,
                9, 4, 11, 5, 6, 7}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2107357680797577, -0.34728118777275085`, \
-0.6512841582298279, -0.31916144490242004`, -0.28800883889198303`, \
-0.5161716938018799, -0.4257394075393677, 
               0.6731668710708618, -0.308331161737442, -0.8398387432098389, \
-0.11060573905706406`, -0.41213515400886536`, -0.2323722243309021, \
-0.3525282144546509, -0.39723342657089233`, -0.3823316991329193, 
               0.645715057849884, -0.39723342657089233`, 
               0.015447728335857391`, 
               0.8347952365875244, -0.40549686551094055`, \
-1.0936566591262817`, 0.7342196106910706, -0.43980684876441956`, 
               0.07847446203231812, -0.2543913722038269, \
-0.20351091027259827`, -0.09919878095388412, -0.1439039707183838, \
-0.33687689900398254`, -0.42750418186187744`, -0.17673562467098236`, 
               0.9368867874145508, -0.13655363023281097`, \
-0.0031432844698429108`, -0.26311782002449036`, 
               0.42895570397377014`, -0.23394696414470673`, 
               3.233198404312134, -0.24334947764873505`}], "Children" -> 
             RawArray["Integer16",{{2, 28}, {3, 21}, {-1, 4}, {5, 9}, {6, 
               7}, {-2, -3}, {-4, 8}, {-5, -6}, {10, 11}, {-7, -8}, {12, 
               17}, {-9, 13}, {14, -14}, {15, -13}, {-10, 16}, {-11, -12}, {
               18, 20}, {-15, 19}, {-16, -17}, {-18, -19}, {22, 27}, {-20, 
               23}, {24, -25}, {25, -24}, {26, -23}, {-21, -22}, {-26, -27}, {
               29, 39}, {30, -38}, {31, 36}, {32, 33}, {-28, -29}, {
               34, -33}, {35, -32}, {-30, -31}, {37, 
               38}, {-34, -35}, {-36, -37}, {40, -41}, {-39, -40}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 
               1, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 2, 1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 6, 7, 6, 9, 3, 11, 3, 8, 3, 2, 8, 10, 4,
                6, 11, 6, 3, 6, 10, 10, 10, 4, 9, 3, 9, 3, 10, 5, 3, 7, 10, 9,
                3, 6, 6, 9, 8, 10, 6, 6, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.34728118777275085`, -0.6512841582298279, \
-0.28667059540748596`, -0.575283408164978, -0.6443732976913452, 
               0.2675546705722809, 
               0.12369175255298615`, -1.245086908340454, -0.1798265427350998, \
-1.4971938133239746`, -0.5735766887664795, -0.2540086805820465, \
-0.586020827293396, -0.3823316991329193, -0.47817134857177734`, 
               0.12369175255298615`, -0.41061511635780334`, 
               0.7087417840957642, -0.5035049319267273, 
               0.6830688714981079, -0.07838495075702667, \
-0.33220288157463074`, -0.39723342657089233`, -1.1939990520477295`, \
-0.4257394075393677, 0.45487818121910095`, 0.07847446203231812, 
               0.9368867874145508, -0.23394696414470673`, \
-1.3711403608322144`, -0.16753752529621124`, 0.42925092577934265`, 
               0.7296910285949707, -0.7408730387687683, -0.03905593603849411, \
-0.16150158643722534`, -0.6443732976913452, -0.29109975695610046`, 
               0.8099778294563293, 0.43805983662605286`, 0.8687307238578796, 
               2.8616390228271484`}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, 4}, {-1, -2}, {5, 8}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 11}, {10, -9}, {-7, -8}, {12, 
               23}, {13, 18}, {14, 15}, {-10, -11}, {16, 
               17}, {-12, -13}, {-14, -15}, {19, 22}, {-16, 20}, {
               21, -19}, {-17, -18}, {-20, -21}, {24, 26}, {-22, 
               25}, {-23, -24}, {27, 28}, {-25, -26}, {-27, -28}, {30, 40}, {
               31, 34}, {32, -32}, {-29, 33}, {-30, -31}, {-33, 35}, {
               36, -39}, {37, -38}, {-34, 38}, {-35, 39}, {-36, -37}, {-40, 
               41}, {-41, 42}, {-42, -43}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 
               1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 
               1, 2, 1, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 3, 6, 10, 11, 9, 8, 7, 6, 10, 4, 11, 6, 
               8, 5, 1, 10, 3, 5, 6, 3, 5, 1, 9, 11, 7, 9, 7, 4, 4, 8, 5, 1, 
               3, 9, 5}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.30256691575050354`, 
               1.339009165763855, -0.42750418186187744`, 
               0.04852401837706566, -1.097364068031311, -0.4611647427082062, \
-0.2818269729614258, -0.302916020154953, -0.5879502296447754, \
-0.2052939236164093, -0.41213515400886536`, 
               1.0394835472106934`, -0.5499498248100281, -0.2416449934244156, \
-0.47411683201789856`, -1.7434459924697876`, 0.9368867874145508, 
               0.8347952365875244, -0.33687689900398254`, \
-0.29239174723625183`, -0.36271268129348755`, -0.40549686551094055`, \
-1.7434459924697876`, 0.8212953209877014, 
               1.2836947441101074`, -0.22168892621994019`, 
               1.0961081981658936`, -0.32457658648490906`, \
-0.26311782002449036`, 
               0.586280882358551, -0.21382668614387512`, -0.0967070460319519, \
-1.7434459924697876`, -0.4257394075393677, -0.8275818824768066, 
               0.006222888361662626}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, 28}, {4, 15}, {5, 11}, {-1, 
               6}, {7, 10}, {-2, 8}, {-3, 9}, {-4, -5}, {-6, -7}, {-8, 12}, {
               13, -12}, {14, -11}, {-9, -10}, {16, 17}, {-13, -14}, {18, 
               23}, {19, 22}, {20, -18}, {21, -17}, {-15, -16}, {-19, -20}, {
               24, 25}, {-21, -22}, {26, -26}, {
               27, -25}, {-23, -24}, {-27, -28}, {-29, 30}, {31, -37}, {-30, 
               32}, {33, 35}, {-31, 34}, {-32, -33}, {36, -36}, {-34, -35}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 
               1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 7, 5, 10, 9, 10, 10, 6, 10, 8, 3, 10, 7,
                3, 7, 1, 4, 7, 6, 4, 11, 6, 8, 7, 10, 3, 8, 6, 8, 7, 11, 8, 5,
                8, 9, 6, 3, 6, 10, 3}], "NumericalThresholds" -> 
             RawArray["Real32",{
               0.330581396818161, -0.24334947764873505`, \
-0.23394696414470673`, -0.33220288157463074`, -0.7359775900840759, \
-0.9667477607727051, 
               0.3023419678211212, -0.5035049319267273, -0.2052939236164093, \
-0.2509177625179291, -1.1820602416992188`, 
               0.9368867874145508, -0.2595949172973633, 
               0.20452792942523956`, -0.31374630331993103`, \
-1.7434459924697876`, -0.3823316991329193, 0.07072862982749939, 
               2.426745891571045, -0.3078230321407318, 
               0.3068501055240631, -0.42750418186187744`, \
-0.24782684445381165`, -0.22168892621994019`, 0.42925092577934265`, 
               0.20452792942523956`, 0.0890837237238884, 0.4465043842792511, 
               0.3672667443752289, 0.47686412930488586`, 
               0.12369175255298615`, -0.23855407536029816`, \
-0.26825693249702454`, -0.29109975695610046`, -0.18635186553001404`, \
-0.27972495555877686`, 1.0238754749298096`, -0.4063928723335266, 
               0.1754329800605774, 0.9608487486839294}], "Children" -> 
             RawArray["Integer16",{{2, 31}, {3, 18}, {4, -16}, {5, 7}, {
               6, -3}, {-1, -2}, {8, 10}, {-4, 9}, {-5, -6}, {11, 16}, {12, 
               13}, {-7, -8}, {14, -12}, {15, -11}, {-9, -10}, {-13, 
               17}, {-14, -15}, {19, 29}, {20, -27}, {21, 26}, {22, 
               23}, {-17, -18}, {-19, 24}, {-20, 25}, {-21, -22}, {27, -26}, {
               28, -25}, {-23, -24}, {-28, 30}, {-29, -30}, {32, 38}, {
               33, -37}, {34, -36}, {-31, 35}, {36, -35}, {
               37, -34}, {-32, -33}, {39, -41}, {-38, 40}, {-39, -40}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 
               1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
               2, 2, 1, 1, 2, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 3, 8, 3, 8, 5, 7, 10, 1, 9, 5, 8, 6, 
               10, 11, 11, 5, 8, 3, 6, 8, 7, 9, 6, 5, 4, 3, 9, 3, 4, 7, 11, 4,
                8, 10, 5, 4}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2323722243309021, -0.23546314239501953`, \
-1.4341671466827393`, -0.27873605489730835`, 
               0.5826883316040039, -0.2756451368331909, \
-0.40549686551094055`, -0.35706740617752075`, -0.45911186933517456`, \
-1.7434459924697876`, -0.36956045031547546`, -0.26825693249702454`, \
-0.2663723826408386, -0.5035049319267273, 
               0.6830688714981079, -0.18157218396663666`, 
               0.42895570397377014`, -0.40549686551094055`, \
-0.2540086805820465, 
               1.339009165763855, -0.41483739018440247`, \
-0.29109975695610046`, -0.08089528977870941, -1.285603404045105, \
-0.5077272057533264, -0.30256691575050354`, -0.32272475957870483`, \
-0.29968592524528503`, 
               0.8212953209877014, -1.1190334558486938`, \
-0.39723342657089233`, -0.10797099024057388`, -0.028940219432115555`, \
-0.3823316991329193, 0.2436298429965973, -0.8398387432098389, 
               0.5894925594329834, 0.6458877921104431}], "Children" -> 
             RawArray["Integer16",{{2, 23}, {3, -22}, {4, 5}, {-1, -2}, {6, 
               18}, {7, 13}, {8, 12}, {-3, 9}, {-4, 10}, {-5, 
               11}, {-6, -7}, {-8, -9}, {14, 15}, {-10, -11}, {16, 
               17}, {-12, -13}, {-14, -15}, {19, -21}, {20, -20}, {
               21, -19}, {-16, 22}, {-17, -18}, {24, 34}, {25, 
               26}, {-23, -24}, {27, 32}, {28, -30}, {29, 31}, {
               30, -27}, {-25, -26}, {-28, -29}, {-31, 33}, {-32, -33}, {35, 
               37}, {36, -36}, {-34, -35}, {-37, 38}, {-38, -39}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 
               1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
               1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 8, 6, 9, 3, 2, 7, 8, 8, 7, 9, 10, 11, 8,
                4, 11, 8, 3, 9, 7, 9, 6, 3, 7, 10, 9, 6, 6, 9, 5, 3, 6, 11, 8,
                6, 8, 9, 3, 7, 5, 9}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.4401709735393524, -0.2540086805820465, \
-0.575283408164978, -0.6443732976913452, 
               1.086902141571045, -0.5735766887664795, -0.32457658648490906`, \
-0.2756451368331909, -0.2972815930843353, -0.28667059540748596`, \
-0.9191861748695374, -0.9667477607727051, 
               1.2836947441101074`, -0.17673562467098236`, \
-0.3525282144546509, -0.18157218396663666`, -0.14582639932632446`, \
-1.1190334558486938`, 0.2716695964336395, -0.2650100290775299, 
               1.0961081981658936`, 
               2.8616390228271484`, -0.11060573905706406`, \
-0.3354068696498871, -0.7129297852516174, -0.4611647427082062, \
-0.3515034317970276, -0.4063928723335266, 
               0.9128996133804321, -0.43980684876441956`, 
               0.8347952365875244, -0.31350305676460266`, 
               0.001586175407283008, -0.2849179208278656, \
-0.3726147711277008, -0.24473591148853302`, -0.7359775900840759, \
-2.06443452835083, -0.09172556549310684, -0.30256691575050354`, \
-0.36956045031547546`}], "Children" -> 
             RawArray["Integer16",{{2, 17}, {3, 11}, {4, 5}, {-1, -2}, {
               6, -9}, {7, 9}, {-3, 8}, {-4, -5}, {-6, 10}, {-7, -8}, {12, 
               13}, {-10, -11}, {14, -16}, {15, -15}, {16, -14}, {-12, -13}, {
               18, 38}, {19, 22}, {-17, 20}, {-18, 21}, {-19, -20}, {
               23, -37}, {24, 30}, {-21, 25}, {-22, 26}, {-23, 27}, {
               28, -27}, {-24, 29}, {-25, -26}, {31, 36}, {32, 35}, {33, 
               34}, {-28, -29}, {-30, -31}, {-32, -33}, {
               37, -36}, {-34, -35}, {-38, 39}, {40, -42}, {
               41, -41}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
               1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 
               1, 1, 1, 2, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 7, 11, 8, 3, 11, 8, 7, 9, 3, 6, 8, 6, 8,
                3, 11, 5, 9, 9, 8, 8, 6, 5, 6, 7, 8, 6, 6, 1, 5, 3, 9, 2, 8, 
               7, 10}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.26311782002449036`, -0.3462371528148651, \
-0.18157218396663666`, -0.2107357680797577, 1.339009165763855, 
               1.650011420249939, -0.2849179208278656, -0.31374630331993103`, \
-0.27795615792274475`, 
               0.45663484930992126`, -0.5035049319267273, \
-0.2663723826408386, -0.5246162414550781, -0.2323722243309021, 
               0.645715057849884, 0.12369175255298615`, -0.43980684876441956`,
                0.7296910285949707, -0.4611647427082062, \
-0.24473591148853302`, -0.2725542187690735, -0.41483739018440247`, \
-0.47411683201789856`, -0.34728118777275085`, -0.16753752529621124`, \
-0.18600839376449585`, -0.42750418186187744`, -0.42750418186187744`, \
-1.7434459924697876`, -0.0967070460319519, -1.1820602416992188`, \
-0.8275818824768066, -0.5735766887664795, -0.22619037330150604`, \
-0.16212238371372223`, 0.3023419678211212}], "Children" -> 
             RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 25}, {
               6, -23}, {7, 24}, {8, 11}, {-3, 9}, {-4, 10}, {-5, -6}, {12, 
               15}, {-7, 13}, {14, -10}, {-8, -9}, {16, 21}, {17, 20}, {
               18, -14}, {19, -13}, {-11, -12}, {-15, -16}, {22, 
               23}, {-17, -18}, {-19, -20}, {-21, -22}, {26, 28}, {-24, 
               27}, {-25, -26}, {-27, 29}, {-28, -29}, {31, -37}, {-30, 32}, {
               33, 35}, {34, -33}, {-31, -32}, {36, -36}, {-34, -35}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 
               2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 
               1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{11, 7, 5, 10, 8, 7, 9, 3, 7, 2, 5, 5, 11, 
               8, 3, 2, 6, 3, 7, 9, 11, 6, 6, 9, 11, 10, 10, 5, 5, 8, 9, 8, 4,
                8, 11, 10, 11, 7, 10, 8, 9, 11}], "NumericalThresholds" -> 
             RawArray["Real32",{
               0.12369175255298615`, -0.2271040678024292, \
-0.23394696414470673`, -0.2052939236164093, -0.29109975695610046`, \
-0.3462371528148651, -1.1023948192596436`, 
               0.2675546705722809, -0.2704251706600189, -0.5735766887664795, \
-0.43980684876441956`, -0.43980684876441956`, -1.158416748046875, \
-0.25709959864616394`, 
               0.5826883316040039, -0.5735766887664795, \
-0.33039212226867676`, -0.36271268129348755`, -0.32457658648490906`, 
               1.279316782951355, -0.12051939964294434`, -0.5035049319267273, \
-0.3515034317970276, -0.9191861748695374, -0.48683613538742065`, \
-0.33220288157463074`, -0.07838495075702667, -0.23394696414470673`, \
-0.37118688225746155`, -0.019098568707704544`, -0.8275818824768066, \
-0.05928056314587593, -0.2929213047027588, -0.2818269729614258, 
               1.0394835472106934`, 1.063795804977417, 
               0.42895570397377014`, -0.308331161737442, 
               1.4445226192474365`, -0.24782684445381165`, 0.7296910285949707,
                0.7342196106910706}], "Children" -> 
             RawArray["Integer16",{{2, 31}, {3, 23}, {4, -21}, {5, 15}, {6, 
               8}, {-1, 7}, {-2, -3}, {9, 13}, {10, -8}, {11, 
               12}, {-4, -5}, {-6, -7}, {-9, 14}, {-10, -11}, {16, -20}, {17, 
               21}, {18, 20}, {-12, 19}, {-13, -14}, {-15, -16}, {-17, 
               22}, {-18, -19}, {24, 25}, {-22, -23}, {26, 28}, {-24, 
               27}, {-25, -26}, {29, -30}, {30, -29}, {-27, -28}, {-31, 32}, {
               33, -43}, {34, 42}, {-32, 35}, {36, 39}, {37, -36}, {
               38, -35}, {-33, -34}, {40, 
               41}, {-37, -38}, {-39, -40}, {-41, -42}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 
               2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
               1, 2, 2, 1, 1, 2, 1, 2, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 4, 8, 9, 7, 3, 5, 7, 8, 9, 3, 6, 8, 2, 
               10, 6, 7, 7, 7, 6, 10, 10, 3, 3, 5, 6, 10, 2, 4, 7, 11, 4, 9, 
               5, 3, 9, 3, 3, 8, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.24876461923122406`, -0.39723342657089233`, \
-0.2756451368331909, 0.45487818121910095`, -0.31374630331993103`, 
               0.330581396818161, -0.47411683201789856`, \
-0.28667059540748596`, -0.24473591148853302`, -0.6443732976913452, 
               1.27598237991333, -0.3515034317970276, -0.2540086805820465, \
-0.5735766887664795, 
               0.6830688714981079, -0.41061511635780334`, \
-0.28667059540748596`, -0.31916144490242004`, -0.28667059540748596`, \
-0.4401709735393524, -0.586020827293396, -0.2052939236164093, 
               0.14150118827819824`, -0.5517928600311279, \
-0.23394696414470673`, 0.007388961035758257, 
               0.6830688714981079, -0.5735766887664795, -0.2184126377105713, \
-0.2271040678024292, -0.18157218396663666`, -0.26311782002449036`, \
-0.8275818824768066, -0.30256691575050354`, 0.2675546705722809, 
               1.0961081981658936`, -0.8038998246192932, -1.308113694190979, \
-0.20764485001564026`, -0.22905780375003815`}], "Children" -> 
             RawArray["Integer16",{{2, 27}, {3, 11}, {4, 7}, {5, -4}, {
               6, -3}, {-1, -2}, {8, 9}, {-5, -6}, {10, -9}, {-7, -8}, {
               12, -26}, {13, 22}, {14, 20}, {15, 18}, {16, -13}, {-10, 
               17}, {-11, -12}, {-14, 19}, {-15, -16}, {
               21, -19}, {-17, -18}, {23, 26}, {24, 
               25}, {-20, -21}, {-22, -23}, {-24, -25}, {28, 34}, {29, 33}, {
               30, -31}, {31, 32}, {-27, -28}, {-29, -30}, {-32, -33}, {35, 
               40}, {36, -39}, {37, 39}, {
               38, -36}, {-34, -35}, {-37, -38}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
               2, 2, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
               2, 1, 2, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 7, 6, 8, 3, 11, 8, 7, 7, 6, 7, 8, 11, 7,
                9, 8, 8, 8, 10, 7, 10, 11, 9, 11, 4, 11, 6, 11, 2, 6, 6, 4, 5,
                5, 9, 4, 8, 6, 8, 6, 8, 8}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.26311782002449036`, -0.31916144490242004`, \
-0.3515034317970276, -0.28800883889198303`, -0.9929800033569336, 
               0.12369175255298615`, -0.2540086805820465, -0.3462371528148651,
                0.4443732798099518, -0.3515034317970276, \
-0.28667059540748596`, -0.21382668614387512`, -0.18157218396663666`, \
-0.308331161737442, -0.27795615792274475`, -0.28800883889198303`, \
-0.26946330070495605`, -0.2107357680797577, -0.8398387432098389, \
-0.16212238371372223`, 0.3023419678211212, 
               0.42895570397377014`, -0.18635186553001404`, \
-1.3415751457214355`, -0.3823316991329193, -0.18157218396663666`, \
-0.17416837811470032`, 1.1615891456604004`, -0.5735766887664795, 
               0.26916930079460144`, -0.06438951939344406, \
-0.3674299418926239, -0.40549686551094055`, -0.23394696414470673`, \
-1.8352291584014893`, -0.2333143651485443, -0.16437192261219025`, \
-0.5246162414550781, -0.13346269726753235`, 
               3.5456457138061523`, -0.16746285557746887`, \
-0.18291746079921722`}], "Children" -> 
             RawArray["Integer16",{{2, 34}, {3, 9}, {4, 8}, {5, 7}, {-1, 
               6}, {-2, -3}, {-4, -5}, {-6, -7}, {10, -33}, {11, 24}, {12, 
               17}, {13, -13}, {14, 15}, {-8, -9}, {-10, 
               16}, {-11, -12}, {-14, 18}, {19, 23}, {-15, 20}, {
               21, -19}, {-16, 22}, {-17, -18}, {-20, -21}, {-22, 25}, {26, 
               29}, {27, 28}, {-23, -24}, {-25, -26}, {30, -32}, {31, -31}, {
               32, -30}, {-27, 33}, {-28, -29}, {35, 38}, {-34, 36}, {
               37, -37}, {-35, -36}, {39, 40}, {-38, -39}, {41, -43}, {
               42, -42}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
               2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 
               2, 1, 1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 11, 8, 2, 3, 3, 7, 3, 7, 6, 9, 8, 5, 9, 
               7, 11, 8, 8, 8, 2, 3, 10, 8, 6, 3, 3, 8, 8, 6, 9, 10, 8, 2, 6, 
               5, 7, 6, 10, 5}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.20764485001564026`, 
               0.42895570397377014`, -0.2632814645767212, -0.5735766887664795,
                0.015447728335857391`, -0.9929800033569336, \
-0.292085736989975, 
               0.5826883316040039, -0.31374630331993103`, \
-0.4190596640110016, -0.4611647427082062, -0.28800883889198303`, \
-0.43980684876441956`, -1.7436248064041138`, -0.24334947764873505`, \
-0.6394681334495544, -0.22619037330150604`, -0.23855407536029816`, \
-0.2416449934244156, -0.5735766887664795, -0.17363247275352478`, \
-0.586020827293396, -0.29109975695610046`, -0.41483739018440247`, 
               0.45663484930992126`, -1.245086908340454, \
-0.26946330070495605`, -0.05928056314587593, -0.42750418186187744`, \
-0.9191861748695374, 
               0.04852401837706566, -0.118008092045784, -0.5735766887664795, \
-0.3219476044178009, -0.23394696414470673`, -0.292085736989975, \
-0.5246162414550781, -0.07838495075702667, -0.40549686551094055`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 28}, {3, 22}, {4, 14}, {5, 10}, {6, 
               8}, {-1, 7}, {-2, -3}, {-4, 9}, {-5, -6}, {11, 13}, {-7, 
               12}, {-8, -9}, {-10, -11}, {15, 16}, {-12, -13}, {17, 
               18}, {-14, -15}, {19, -20}, {20, -19}, {-16, 
               21}, {-17, -18}, {-21, 23}, {24, 25}, {-22, -23}, {
               26, -27}, {-24, 27}, {-25, -26}, {29, 36}, {30, 32}, {-28, 
               31}, {-29, -30}, {33, 35}, {
               34, -33}, {-31, -32}, {-34, -35}, {-36, 37}, {-37, 38}, {-38, 
               39}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 
               2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 4, 9, 8, 10, 6, 1, 3, 3, 6, 3, 3, 9, 7, 
               10, 10, 6, 4, 8, 9, 7, 11, 10, 8, 7, 8, 10, 2, 6, 5, 4, 9, 8, 
               6, 7, 11, 8, 6, 9, 4}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2271040678024292, -0.2929213047027588, \
-1.9268333911895752`, -0.21382668614387512`, -1.0936566591262817`, \
-0.4063928723335266, -1.7434459924697876`, -1.245086908340454, \
-0.8669265508651733, -0.5330607891082764, -0.17363247275352478`, 
               0.20452792942523956`, -0.4611647427082062, -0.297500878572464, 
               0.5561599135398865, -0.586020827293396, -0.2881694734096527, \
-0.3525282144546509, -0.30037251114845276`, -0.18635186553001404`, \
-0.302916020154953, 0.7342196106910706, 
               0.42925092577934265`, -0.18909931182861328`, \
-0.308331161737442, -0.16746285557746887`, -0.45911186933517456`, \
-0.5735766887664795, -0.48239362239837646`, -0.0967070460319519, \
-0.1439039707183838, -0.09474757313728333, -0.21382668614387512`, \
-0.4063928723335266, 0.06531348824501038, 
               0.12369175255298615`, -0.16437192261219025`, \
-0.15727931261062622`, 0.7296910285949707, -0.3674299418926239}], "Children" -> 
             RawArray["Integer16",{{2, 30}, {3, 28}, {-1, 4}, {5, 24}, {6, 
               7}, {-2, -3}, {8, 16}, {-4, 9}, {10, 11}, {-5, -6}, {-7, 
               12}, {-8, 13}, {-9, 14}, {15, -12}, {-10, -11}, {-13, 17}, {18,
                23}, {19, 22}, {-14, 20}, {
               21, -17}, {-15, -16}, {-18, -19}, {-20, -21}, {-22, 25}, {-23, 
               26}, {-24, 27}, {-25, -26}, {29, -29}, {-27, -28}, {31, -41}, {
               32, -40}, {33, 35}, {-30, 34}, {-31, -32}, {36, 40}, {37, 
               38}, {-33, -34}, {39, -37}, {-35, -36}, {-38, -39}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 
               1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 2, 2, 1, 1, 1, 2, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 10, 5, 10, 9, 10, 10, 8, 3, 8, 10, 9, 2,
                8, 3, 7, 6, 7, 6, 8, 7, 8, 10, 6, 8, 3, 7, 2, 5, 11, 4, 6, 9, 
               7, 8, 7, 5, 7, 4, 7, 7, 9, 10, 3}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.09172556549310684, 
               0.3023419678211212, -0.26825693249702454`, -1.601292610168457, \
-1.9268333911895752`, 
               0.1754329800605774, -0.2052939236164093, -0.3034634590148926, 
               0.2675546705722809, -0.2663723826408386, -0.7129297852516174, \
-0.7359775900840759, -0.5735766887664795, -0.25709959864616394`, 
               0.645715057849884, -0.292085736989975, -0.4063928723335266, \
-0.32999172806739807`, -0.5330607891082764, -0.26019051671028137`, \
-0.10797099024057388`, -0.07164425402879715, -0.45911186933517456`, 
               0.27339157462120056`, -0.20455391705036163`, 
               0.9608487486839294, -0.28667059540748596`, \
-0.5735766887664795, -0.43980684876441956`, 
               0.12369175255298615`, -0.2929213047027588, -0.5119494795799255,
                0.63808673620224, -0.20544350147247314`, \
-0.23546314239501953`, -0.2595949172973633, -0.43980684876441956`, \
-0.12421640753746033`, -0.3078230321407318, 0.04365292936563492, 
               0.07072862982749939, 
               1.554129719734192, -0.07838495075702667, -1.245086908340454}], 
             "Children" -> 
             RawArray["Integer16",{{2, 40}, {3, 25}, {4, 21}, {5, 
               6}, {-1, -2}, {7, -18}, {8, 16}, {-3, 9}, {10, 14}, {11, 
               12}, {-4, -5}, {13, -8}, {-6, -7}, {15, -11}, {-9, -10}, {17, 
               19}, {18, -14}, {-12, -13}, {-15, 20}, {-16, -17}, {22, -23}, {
               23, -22}, {-19, 24}, {-20, -21}, {26, 37}, {27, -35}, {28, 
               32}, {29, -28}, {-24, 30}, {-25, 31}, {-26, -27}, {33, 
               34}, {-29, -30}, {35, -34}, {36, -33}, {-31, -32}, {-36, 38}, {
               39, -39}, {-37, -38}, {-40, 41}, {-41, 42}, {43, -45}, {-42, 
               44}, {-43, -44}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 
               2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 
               1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 11, 8, 5, 7, 2, 5, 10, 7, 8, 7, 6, 8, 9,
                4, 6, 9, 8, 9, 9, 9, 7, 10, 6, 10, 8, 11, 10, 6, 10, 4, 3, 9, 
               3, 9, 5, 4, 10, 4, 4}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.3078230321407318, 
               0.4594821035861969, -0.06546240299940109, \
-0.43980684876441956`, -0.24334947764873505`, -0.5735766887664795, \
-0.47411683201789856`, -0.9667477607727051, -0.3408220112323761, \
-0.2509177625179291, -0.28667059540748596`, -0.5161716938018799, \
-0.28800883889198303`, 
               0.0884610041975975, -0.39723342657089233`, \
-0.5035049319267273, -1.1939990520477295`, -0.2725542187690735, \
-0.6443732976913452, 0.1800653040409088, 
               1.3709211349487305`, -0.302916020154953, -0.33220288157463074`,
                0.036944806575775146`, -0.2052939236164093, \
-0.2818269729614258, 1.3142211437225342`, 
               0.42925092577934265`, -0.35994797945022583`, 
               1.4445226192474365`, -0.39723342657089233`, \
-0.7408730387687683, -0.7359775900840759, -0.5517928600311279, \
-2.659667730331421, -0.23394696414470673`, 
               0.3627549111843109, -0.07838495075702667, -0.2184126377105713, \
-0.24821609258651733`}], "Children" -> 
             RawArray["Integer16",{{2, 33}, {3, 25}, {4, 24}, {5, 21}, {6, 
               19}, {7, 14}, {-1, 8}, {-2, 9}, {-3, 10}, {11, -8}, {
               12, -7}, {-4, 13}, {-5, -6}, {15, 18}, {16, 
               17}, {-9, -10}, {-11, -12}, {-13, -14}, {-15, 
               20}, {-16, -17}, {22, -21}, {
               23, -20}, {-18, -19}, {-22, -23}, {-24, 26}, {-25, 27}, {28, 
               30}, {-26, 29}, {-27, -28}, {31, 32}, {-29, -30}, {-31, -32}, {
               34, 38}, {-33, 35}, {-34, 36}, {-35, 37}, {-36, -37}, {-38, 
               39}, {40, -41}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 
               1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 
               1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 3, 6, 7, 11, 8, 9, 3, 4, 4, 8, 11, 4, 6,
                9, 6, 6, 5, 11, 11, 3, 8, 4, 6, 7, 3, 11, 9, 7, 9, 11, 6, 8, 
               9, 5, 1, 5, 8, 4, 10, 6}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.26311782002449036`, 
               0.015447728335857391`, -0.36417022347450256`, \
-0.24876461923122406`, 
               0.001586175407283008, -0.28800883889198303`, \
-0.27795615792274475`, -0.6148195862770081, -0.3674299418926239, \
-0.39723342657089233`, -0.23855407536029816`, 
               0.12369175255298615`, -0.3078230321407318, 
               0.036944806575775146`, 
               0.7296910285949707, -0.17416837811470032`, 
               0.3113919496536255, -0.43980684876441956`, 
               0.12369175255298615`, -0.18157218396663666`, 
               1.27598237991333, -0.24473591148853302`, -0.3823316991329193, \
-0.4063928723335266, -0.35706740617752075`, 0.45663484930992126`, 
               1.0394835472106934`, 
               0.5464824438095093, -0.28667059540748596`, \
-0.27795615792274475`, 0.6731668710708618, 
               4.499877452850342, -0.2756451368331909, -0.5527690052986145, \
-0.23394696414470673`, -1.7434459924697876`, 0.21208275854587555`, 
               0.22817523777484894`, -0.158805713057518, 
               0.04852401837706566, -0.3346143960952759}], "Children" -> 
             RawArray["Integer16",{{2, 32}, {3, 19}, {4, 13}, {5, 10}, {6, 
               7}, {-1, -2}, {-3, 8}, {9, -6}, {-4, -5}, {11, -10}, {-7, 
               12}, {-8, -9}, {14, -17}, {15, 17}, {16, -13}, {-11, -12}, {
               18, -16}, {-14, -15}, {20, 26}, {21, -24}, {22, -23}, {
               23, -22}, {24, -21}, {25, -20}, {-18, -19}, {27, 
               28}, {-25, -26}, {29, -31}, {30, -30}, {31, -29}, {-27, -28}, {
               33, -42}, {-32, 34}, {35, 39}, {-33, 36}, {-34, 37}, {-35, 
               38}, {-36, -37}, {40, -41}, {41, -40}, {-38, -39}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 
               1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 
               1, 1, 1, 1, 1, 1, 1, 1, 2}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 11, 8, 1, 8, 4, 6, 10, 3, 7, 8, 6, 10, 
               11, 6, 8, 3, 10, 8, 7, 8, 10, 10, 4, 5, 11, 6, 8, 4, 7, 4, 3, 
               5, 11, 8, 5, 4, 6, 2, 11, 6, 10}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.3525282144546509, -1.5552599430084229`, \
-0.2509177625179291, -1.7434459924697876`, -0.30655437707901, \
-0.39723342657089233`, -0.4739490747451782, -0.2052939236164093, \
-0.17363247275352478`, -0.24876461923122406`, -0.28800883889198303`, \
-0.4063928723335266, 0.04852401837706566, 
               0.001586175407283008, -0.36417022347450256`, \
-0.16128100454807281`, -0.4257394075393677, 
               0.42925092577934265`, -0.2230994552373886, \
-0.20544350147247314`, -0.23855407536029816`, 
               0.6830688714981079, -0.07838495075702667, \
-0.39723342657089233`, -0.23394696414470673`, -1.0668376684188843`, \
-0.3515034317970276, -0.2632814645767212, -0.2929213047027588, \
-0.2325192093849182, -0.33762648701667786`, -0.36271268129348755`, \
-0.33687689900398254`, -0.18157218396663666`, -0.22000853717327118`, \
-0.37118688225746155`, -0.26311782002449036`, -0.5879502296447754, \
-0.5735766887664795, -1.097364068031311, 
               1.328957438468933, -0.33220288157463074`}], "Children" -> 
             RawArray["Integer16",{{2, 25}, {-1, 3}, {4, 16}, {5, 10}, {-2, 
               6}, {7, 8}, {-3, -4}, {-5, 9}, {-6, -7}, {11, -14}, {12, 
               13}, {-8, -9}, {14, -13}, {15, -12}, {-10, -11}, {17, 23}, {18,
                22}, {19, 20}, {-15, -16}, {-17, 
               21}, {-18, -19}, {-20, -21}, {-22, 24}, {-23, -24}, {26, 
               38}, {-25, 27}, {28, 32}, {29, 30}, {-26, -27}, {-28, 
               31}, {-29, -30}, {33, 35}, {-31, 34}, {-32, -33}, {
               36, -37}, {-34, 37}, {-35, -36}, {-38, 39}, {40, 42}, {
               41, -41}, {-39, -40}, {-42, -43}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 
               2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 3, 10, 9, 8, 6, 7, 9, 10, 3, 8, 1, 9, 4,
                6, 3, 8, 9, 10, 3, 8, 3, 9, 5, 6, 9, 6, 7, 8, 10, 9, 7, 4, 9, 
               10, 3, 3, 2, 8, 10, 4, 8, 6, 5, 6, 6, 6, 7}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.33039212226867676`, -1.245086908340454, 
               1.063795804977417, -0.09474757313728333, -0.2509177625179291, \
-0.4866158664226532, -0.3462371528148651, -0.6443732976913452, 
               0.5561599135398865, -0.4257394075393677, -0.2725542187690735, \
-1.7434459924697876`, 
               0.7296910285949707, -0.3674299418926239, -0.4359486997127533, 
               0.45663484930992126`, -0.30037251114845276`, \
-0.4611647427082062, 1.063795804977417, 
               0.20452792942523956`, -0.23855407536029816`, \
-0.6148195862770081, 
               0.0884610041975975, -0.30256691575050354`, \
-0.5583943724632263, -0.8275818824768066, -0.4401709735393524, \
-0.2650100290775299, -0.13346269726753235`, 
               0.5561599135398865, -1.377207636833191, -0.308331161737442, \
-0.3078230321407318, -0.4611647427082062, -0.45911186933517456`, \
-0.4257394075393677, -2.06443452835083, -0.5735766887664795, \
-0.2818269729614258, -0.07838495075702667, 
               0.5117722153663635, -0.14582639932632446`, \
-0.03905593603849411, -0.43980684876441956`, -0.11083441972732544`, 
               0.10872329026460648`, 
               0.9489537477493286, -0.21085864305496216`}], "Children" -> 
             RawArray["Integer16",{{2, 32}, {3, 5}, {4, -3}, {-1, -2}, {6, 
               20}, {7, 13}, {-4, 8}, {-5, 9}, {10, 11}, {-6, -7}, {
               12, -10}, {-8, -9}, {14, 19}, {15, -16}, {16, 
               17}, {-11, -12}, {-13, 18}, {-14, -15}, {-17, -18}, {21, 30}, {
               22, 24}, {-19, 23}, {-20, -21}, {25, 29}, {-22, 26}, {-23, 
               27}, {-24, 28}, {-25, -26}, {-27, -28}, {
               31, -31}, {-29, -30}, {33, 37}, {34, -36}, {-32, 35}, {-33, 
               36}, {-34, -35}, {-37, 38}, {39, 46}, {-38, 40}, {41, 
               43}, {-39, 42}, {-40, -41}, {44, -45}, {-42, 
               45}, {-43, -44}, {-46, 47}, {48, -49}, {-47, -48}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 
               1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 
               2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 7, 10, 7, 6, 10, 7, 10, 9, 6, 3, 11, 8, 
               4, 8, 7, 2, 11, 3, 11, 11, 3, 9, 10, 6, 11, 6, 10, 9, 7, 7, 11,
                8, 3, 6, 9, 3, 8}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.23394696414470673`, -0.3462371528148651, 
               0.04852401837706566, -0.2271040678024292, \
-0.37683701515197754`, 
               0.3023419678211212, -0.292085736989975, -0.8398387432098389, 
               0.0884610041975975, -0.5879502296447754, 
               0.07847446203231812, -1.097364068031311, -0.2540086805820465, \
-0.39723342657089233`, -0.2941906750202179, -0.2650100290775299, \
-0.5735766887664795, 
               0.12369175255298615`, -1.1190334558486938`, \
-0.18157218396663666`, -0.7921000719070435, 1.27598237991333, 
               0.0884610041975975, 1.063795804977417, -0.3515034317970276, 
               0.12369175255298615`, -0.42750418186187744`, \
-0.07838495075702667, 0.0884610041975975, 
               0.038237787783145905`, -0.16753752529621124`, 
               1.344747543334961, -0.16437192261219025`, 
               0.2675546705722809, -0.5246162414550781, -0.8275818824768066, \
-0.4257394075393677, -0.16746285557746887`}], "Children" -> 
             RawArray["Integer16",{{2, 35}, {3, 4}, {-1, -2}, {5, 26}, {6, 
               19}, {7, 15}, {8, 12}, {-3, 9}, {10, -7}, {-4, 
               11}, {-5, -6}, {-8, 13}, {14, -11}, {-9, -10}, {-12, 16}, {17, 
               18}, {-13, -14}, {-15, -16}, {-17, 20}, {21, 24}, {22, 
               23}, {-18, -19}, {-20, -21}, {25, -24}, {-22, -23}, {27, 
               31}, {-25, 28}, {-26, 29}, {-27, 30}, {-28, -29}, {-30, 32}, {
               33, -34}, {34, -33}, {-31, -32}, {36, 37}, {-35, -36}, {
               38, -39}, {-37, -38}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 
               2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 
               1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 7, 10, 3, 4, 9, 10, 11, 7, 2, 4, 3, 6, 
               3, 5, 6, 10, 6, 3, 11, 2, 8, 6, 8, 8, 10, 6, 3, 4, 5, 7, 7, 7, 
               3, 4, 5, 5, 11, 7, 7, 3, 7, 6}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.2107357680797577, -0.3462371528148651, 
               0.04852401837706566, 
               0.015447728335857391`, -0.20351091027259827`, \
-0.5527690052986145, -0.45911186933517456`, -1.3415751457214355`, \
-0.308331161737442, -0.5735766887664795, -0.3823316991329193, \
-0.29968592524528503`, -0.5837279558181763, 
               0.5826883316040039, -0.47411683201789856`, \
-0.4401709735393524, -0.33220288157463074`, -0.3515034317970276, 
               0.20452792942523956`, 
               0.42895570397377014`, -0.5735766887664795, \
-0.2509177625179291, -0.4190596640110016, -0.29109975695610046`, \
-0.26946330070495605`, 0.9368867874145508, -0.5161716938018799, 
               1.27598237991333, -0.39723342657089233`, \
-0.47411683201789856`, -0.308331161737442, -0.24876461923122406`, \
-0.3354068696498871, 
               0.20452792942523956`, -0.3078230321407318, \
-0.0967070460319519, -0.40549686551094055`, -0.18157218396663666`, \
-0.048404447734355927`, -0.10255584865808487`, -0.36271268129348755`, 
               0.43895813822746277`, 2.1860768795013428`}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, 5}, {4, -3}, {-1, -2}, {
               6, -28}, {7, 14}, {8, 13}, {-4, 9}, {10, 11}, {-5, -6}, {
               12, -9}, {-7, -8}, {-10, -11}, {15, 26}, {16, 
               17}, {-12, -13}, {-14, 18}, {19, 24}, {20, -20}, {21, -19}, {
               22, 23}, {-15, -16}, {-17, -18}, {-21, 25}, {-22, -23}, {
               27, -27}, {-24, 28}, {-25, -26}, {30, 32}, {-29, 
               31}, {-30, -31}, {33, 36}, {-32, 34}, {35, -35}, {-33, -34}, {
               37, 43}, {38, 40}, {39, -38}, {-36, -37}, {41, 
               42}, {-39, -40}, {-41, -42}, {-43, -44}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 
               1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 
               2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 4, 7, 1, 8, 11, 3, 7, 8, 7, 5, 3, 9, 3, 
               5, 11, 8, 11, 5, 3, 7, 8, 9, 10, 1, 6, 6, 10, 6, 7, 7, 7, 6, 3,
                6, 11, 9, 8, 8, 6, 5, 6, 10, 10, 11, 8, 11}], 
             "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.19837208092212677`, -0.2184126377105713, \
-0.3462371528148651, -1.7434459924697876`, -0.28800883889198303`, \
-0.18157218396663666`, 
               0.5826883316040039, -0.32457658648490906`, \
-0.2540086805820465, -0.2595949172973633, -0.33687689900398254`, 
               0.9608487486839294, 0.8212953209877014, 
               0.015447728335857391`, -0.47411683201789856`, \
-0.48683613538742065`, -0.2725542187690735, -0.48683613538742065`, \
-0.47411683201789856`, 
               1.339009165763855, -0.24876461923122406`, -0.2416449934244156, 
               0.45487818121910095`, -0.7129297852516174, \
-1.7434459924697876`, -0.5541720986366272, -0.5330607891082764, 
               0.6830688714981079, -0.4021705985069275, -0.2704251706600189, \
-0.292085736989975, -0.20544350147247314`, 
               0.03272254392504692, -1.81232750415802, -0.4063928723335266, \
-0.48683613538742065`, 
               0.5464824438095093, -0.16437192261219025`, \
-0.05928056314587593, 3.5456457138061523`, -0.0967070460319519, 
               0.2438357174396515, 0.6830688714981079, -0.07838495075702667, 
               0.12369175255298615`, -0.14273546636104584`, \
-1.097364068031311}], "Children" -> 
             RawArray["Integer16",{{2, 34}, {3, 33}, {4, 5}, {-1, -2}, {6, 
               9}, {7, 8}, {-3, -4}, {-5, -6}, {10, 22}, {11, 21}, {
               12, -17}, {13, 19}, {14, -13}, {15, 17}, {-7, 
               16}, {-8, -9}, {-10, 18}, {-11, -12}, {-14, 
               20}, {-15, -16}, {-18, -19}, {23, 25}, {24, -22}, {-20, -21}, {
               26, 27}, {-23, -24}, {-25, 28}, {29, 32}, {30, 
               31}, {-26, -27}, {-28, -29}, {-30, -31}, {-32, -33}, {-34, 
               35}, {36, 40}, {-35, 37}, {38, -39}, {-36, 39}, {-37, -38}, {
               41, -48}, {42, -47}, {43, 47}, {44, 46}, {-40, 
               45}, {-41, -42}, {-43, -44}, {-45, -46}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 
               1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 
               1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 9, 3, 7, 4, 6, 1, 1, 8, 10, 9, 10, 7, 8,
                11, 7, 8, 11, 6, 9, 3, 1, 10, 11, 3, 5, 8, 6, 9, 10, 11, 7, 9,
                5, 10, 10, 4, 3}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.43980684876441956`, 1.187712550163269, 
               0.015447728335857391`, -0.20002835988998413`, \
-0.41213515400886536`, -0.600616991519928, -1.7434459924697876`, \
-1.7434459924697876`, -0.27873605489730835`, 
               0.5561599135398865, -0.36956045031547546`, \
-0.7129297852516174, -0.31374630331993103`, -0.1798265427350998, 
               0.12369175255298615`, -0.32457658648490906`, \
-0.28800883889198303`, -0.27315136790275574`, -0.27972495555877686`, \
-0.27795615792274475`, 0.5196616053581238, -1.7434459924697876`, 
               0.5561599135398865, 
               0.42895570397377014`, -0.6778463125228882, \
-0.0967070460319519, -0.0005530327325686812, -0.4063928723335266, \
-0.36956045031547546`, -0.33220288157463074`, 
               0.42895570397377014`, -0.2704251706600189, \
-0.7359775900840759, -0.1653270125389099, 1.063795804977417, 
               0.8099778294563293, -0.33762648701667786`, 
               0.015447728335857391`}], "Children" -> 
             RawArray["Integer16",{{2, 26}, {3, 25}, {4, 15}, {5, 14}, {6, 
               8}, {-1, 7}, {-2, -3}, {9, 11}, {-4, 10}, {-5, -6}, {12, 
               13}, {-7, -8}, {-9, -10}, {-11, -12}, {16, 21}, {17, 
               18}, {-13, -14}, {19, 20}, {-15, -16}, {-17, -18}, {22, 
               23}, {-19, -20}, {24, -23}, {-21, -22}, {-24, -25}, {
               27, -39}, {28, -38}, {29, 33}, {30, 31}, {-26, -27}, {
               32, -30}, {-28, -29}, {34, 35}, {-31, -32}, {36, 38}, {-33, 
               37}, {-34, -35}, {-36, -37}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 
               1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 
               1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 7, 10, 8, 6, 11, 10, 8, 3, 11, 4, 1, 8, 
               8, 3, 7, 11, 4, 8, 10, 8, 9, 3, 3, 3, 9, 6, 10, 5, 3, 10, 11, 
               3, 7, 7, 7, 8, 9, 3, 5, 8, 7, 11, 5, 4}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-1.245086908340454, -0.16753752529621124`, 
               1.063795804977417, -0.27873605489730835`, \
-0.27972495555877686`, 0.12369175255298615`, 
               0.04852401837706566, -0.2107357680797577, -0.6148195862770081, \
-0.12051939964294434`, -0.39723342657089233`, -1.7434459924697876`, \
-0.25709959864616394`, -0.2540086805820465, -0.4257394075393677, \
-0.31916144490242004`, 
               1.0394835472106934`, -0.3525282144546509, \
-0.28800883889198303`, 
               0.1754329800605774, -0.2756451368331909, -0.18635186553001404`,
                0.5826883316040039, -0.17363247275352478`, 
               0.45663484930992126`, 
               0.45487818121910095`, -0.5330607891082764, \
-0.7129297852516174, -0.23394696414470673`, 
               1.27598237991333, -0.8398387432098389, -1.158416748046875, 
               0.2675546705722809, -0.2595949172973633, \
-0.17836780846118927`, -0.308331161737442, -0.1705537736415863, \
-0.5527690052986145, -0.4257394075393677, 
               0.28070271015167236`, -0.08400794118642807, \
-0.1458769589662552, 
               0.6121140718460083, -0.23394696414470673`, \
-0.33762648701667786`}], "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 7}, {4, -5}, {-1, 5}, {-2, 
               6}, {-3, -4}, {-6, -7}, {9, 36}, {10, 14}, {11, 
               12}, {-8, -9}, {-10, 13}, {-11, -12}, {15, 29}, {-13, 16}, {17,
                21}, {18, -18}, {19, -17}, {20, -16}, {-14, -15}, {22, 26}, {
               23, 25}, {24, -21}, {-19, -20}, {-22, -23}, {27, -27}, {-24, 
               28}, {-25, -26}, {30, -35}, {31, -34}, {32, 33}, {-28, -29}, {
               34, 35}, {-30, -31}, {-32, -33}, {37, 38}, {-36, -37}, {39, 
               43}, {40, 41}, {-38, -39}, {42, -42}, {-40, -41}, {44, -46}, {
               45, -45}, {-43, -44}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 
               2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 
               1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 10, 10, 3, 5, 8, 4, 2, 8, 6, 3, 9, 7, 3,
                6, 3, 5, 7, 10, 10, 9, 11, 6, 8, 8, 5, 9, 5, 5, 11, 7, 8, 8, 
               11, 4, 3, 11, 4, 3}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.3177253305912018, 
               1.8252495527267456`, -1.3474746942520142`, 0.9608487486839294, 
               0.28070271015167236`, -0.2632814645767212, \
-0.2929213047027588, -0.5735766887664795, -0.2941906750202179, \
-0.4359486997127533, 
               0.015447728335857391`, -0.9191861748695374, \
-0.27584031224250793`, 
               0.20452792942523956`, -0.4908381402492523, \
-0.4257394075393677, -0.47411683201789856`, -0.28125545382499695`, 
               0.1754329800605774, -0.7129297852516174, 
               0.5464824438095093, -0.27315136790275574`, \
-0.47817134857177734`, -0.1705537736415863, -0.23855407536029816`, \
-0.33687689900398254`, -0.4611647427082062, -0.43980684876441956`, \
-0.40549686551094055`, -1.3415751457214355`, -0.308331161737442, \
-0.24782684445381165`, -0.19528114795684814`, 
               0.12369175255298615`, -0.11410051584243774`, \
-0.4257394075393677, -0.48683613538742065`, -0.2333143651485443, \
-0.9299532771110535}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, -28}, {4, 5}, {-1, -2}, {
               6, -27}, {7, 17}, {8, 16}, {9, 12}, {-3, 10}, {
               11, -6}, {-4, -5}, {-7, 13}, {14, -11}, {
               15, -10}, {-8, -9}, {-12, -13}, {18, 20}, {
               19, -16}, {-14, -15}, {-17, 21}, {22, 28}, {-18, 23}, {24, 
               25}, {-19, -20}, {26, 
               27}, {-21, -22}, {-23, -24}, {-25, -26}, {30, 35}, {-29, 
               31}, {-30, 32}, {-31, 33}, {-32, 34}, {-33, -34}, {36, -40}, {
               37, -39}, {-35, 38}, {39, -38}, {-36, -37}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 
               1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 
               1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 3, 8, 4, 1, 8, 11, 8, 7, 6, 7, 9, 10, 
               10, 5, 4, 7, 7, 4, 1, 8, 3, 1, 6, 3, 8, 10, 8, 5, 4, 5, 10, 5, 
               10, 6, 4, 7, 5, 8, 3, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2271040678024292, -0.04757900536060333, \
-0.30037251114845276`, -0.2929213047027588, -1.7434459924697876`, \
-0.28800883889198303`, 
               0.12369175255298615`, -0.2540086805820465, \
-0.27584031224250793`, -0.6512841582298279, -0.31374630331993103`, 
               0.2716695964336395, 
               0.3023419678211212, -0.586020827293396, -0.1310170292854309, \
-0.24821609258651733`, -0.31916144490242004`, -0.32457658648490906`, \
-0.3823316991329193, -1.7434459924697876`, -0.29109975695610046`, 
               0.645715057849884, -1.7434459924697876`, -0.43172645568847656`,
                1.339009165763855, -0.2107357680797577, -1.7282015085220337`, \
-0.26946330070495605`, -0.0967070460319519, -0.1439039707183838, \
-0.23394696414470673`, 1.063795804977417, -0.40549686551094055`, 
               0.3023419678211212, -0.34728118777275085`, \
-0.33762648701667786`, -0.08089528977870941, -0.30256691575050354`, \
-0.19837208092212677`, -0.4257394075393677, 1.9665192365646362`}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, 17}, {-1, 4}, {5, 15}, {6, 
               9}, {-2, 7}, {8, -5}, {-3, -4}, {10, 13}, {-6, 11}, {
               12, -9}, {-7, -8}, {14, -12}, {-10, -11}, {
               16, -15}, {-13, -14}, {18, 21}, {19, -19}, {
               20, -18}, {-16, -17}, {-20, 22}, {23, 25}, {
               24, -23}, {-21, -22}, {26, -28}, {27, -27}, {-24, 
               28}, {-25, -26}, {30, 41}, {31, -40}, {32, -39}, {33, 39}, {34,
                36}, {-29, 35}, {-30, -31}, {-32, 37}, {
               38, -35}, {-33, -34}, {-36, 40}, {-37, -38}, {-41, -42}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 
               1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 
               1, 1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 6, 4, 4, 10, 6, 7, 11, 3, 3, 10, 10, 8,
                8, 9, 7, 6, 3, 6, 4, 4, 11, 6, 6, 3, 6, 11, 6, 10, 11, 6, 7, 
               4, 7, 4, 10, 7, 8, 3, 9, 8, 3, 5, 2}], "NumericalThresholds" -> 
             RawArray["Real32",{
               0.3023419678211212, -0.34728118777275085`, \
-0.2184126377105713, -0.3674299418926239, -1.0936566591262817`, \
-0.575283408164978, -0.27584031224250793`, 0.12369175255298615`, 
               0.2675546705722809, -0.29968592524528503`, \
-0.2052939236164093, -0.33220288157463074`, -0.28800883889198303`, \
-0.2230994552373886, -1.1939990520477295`, -0.3678976893424988, \
-0.29239174723625183`, 
               0.14150118827819824`, -0.33039212226867676`, \
-0.11410051584243774`, -0.158805713057518, -0.48683613538742065`, 
               0.9025088548660278, -0.11083441972732544`, -0.7408730387687683,
                2.8616390228271484`, 1.650011420249939, -0.35994797945022583`,
                1.3176137208938599`, 
               0.42895570397377014`, -0.5161716938018799, \
-0.24334947764873505`, -0.3823316991329193, -0.302916020154953, \
-0.33762648701667786`, 
               0.9368867874145508, -0.292085736989975, -0.118008092045784, \
-1.4971938133239746`, 
               0.8212953209877014, -0.29109975695610046`, \
-1.4971938133239746`, -0.37118688225746155`, -0.5735766887664795}], 
             "Children" -> 
             RawArray["Integer16",{{2, 27}, {3, 16}, {4, 15}, {5, 14}, {-1, 
               6}, {7, 8}, {-2, -3}, {9, -10}, {10, 13}, {11, 
               12}, {-4, -5}, {-6, -7}, {-8, -9}, {-11, -12}, {-13, -14}, \
{-15, 17}, {18, 20}, {-16, 19}, {-17, -18}, {21, 26}, {22, -24}, {23, 
               24}, {-19, -20}, {-21, 25}, {-22, -23}, {-25, -26}, {28, 44}, {
               29, 38}, {30, 37}, {31, 34}, {-27, 32}, {
               33, -30}, {-28, -29}, {-31, 35}, {
               36, -34}, {-32, -33}, {-35, -36}, {39, 42}, {40, 
               41}, {-37, -38}, {-39, -40}, {-41, 
               43}, {-42, -43}, {-44, -45}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 
               1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 
               2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 6, 7, 2, 6, 11, 9, 4, 6, 6, 8, 3, 6, 7, 
               11, 6, 4, 5, 7, 6, 7, 3, 4, 6, 10, 8, 9, 5, 4, 4, 6, 6, 11, 7, 
               7, 11, 8}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2632814645767212, -0.575283408164978, \
-0.32457658648490906`, -0.5735766887664795, -0.29239174723625183`, 
               1.0394835472106934`, 
               0.8212953209877014, -0.39723342657089233`, \
-0.4401709735393524, -0.17416837811470032`, -0.28800883889198303`, \
-0.6778463125228882, -0.34728118777275085`, -0.3516522943973541, \
-0.18157218396663666`, -0.44861549139022827`, -0.09919878095388412, \
-0.47411683201789856`, -0.28667059540748596`, -0.4570600390434265, 
               0.02199236862361431, -0.4257394075393677, \
-0.18860916793346405`, -0.38105928897857666`, 
               0.42925092577934265`, -0.24473591148853302`, \
-0.4611647427082062, -0.40549686551094055`, -0.24821609258651733`, \
-0.39723342657089233`, -0.43172645568847656`, -0.4697268307209015, 
               0.12369175255298615`, -0.16212238371372223`, \
-0.24876461923122406`, -1.402627944946289, -0.14582639932632446`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 17}, {3, 4}, {-1, -2}, {5, 12}, {6, 
               10}, {7, -7}, {8, 9}, {-3, -4}, {-5, -6}, {-8, 
               11}, {-9, -10}, {13, 14}, {-11, -12}, {-13, 15}, {
               16, -16}, {-14, -15}, {18, 35}, {19, 21}, {-17, 
               20}, {-18, -19}, {22, -34}, {23, 30}, {24, -27}, {25, 29}, {26,
                28}, {-20, 27}, {-21, -22}, {-23, -24}, {-25, -26}, {-28, 
               31}, {32, 33}, {-29, -30}, {-31, 34}, {-32, -33}, {36, 
               37}, {-35, -36}, {-37, -38}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
               2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 
               1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 4, 7, 9, 8, 7, 4, 3, 11, 10, 6, 9, 6, 6,
                7, 1, 8, 3, 8, 7, 5, 10, 8, 11, 6, 3, 8, 6, 6, 5, 8, 7, 3, 8, 
               5, 3, 4, 3, 5, 7, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.11083441972732544`, -0.26311782002449036`, \
-0.3516522943973541, -0.18635186553001404`, -0.2725542187690735, \
-0.32457658648490906`, -0.39723342657089233`, 
               1.5911160707473755`, -0.48683613538742065`, \
-0.8398387432098389, -0.4992826581001282, -1.377207636833191, \
-0.44439324736595154`, -0.5372830629348755, -0.25417977571487427`, \
-1.7434459924697876`, -0.2756451368331909, 
               0.2675546705722809, -0.2540086805820465, \
-0.27584031224250793`, -0.47411683201789856`, 
               1.1907047033309937`, -0.16437192261219025`, 
               0.42895570397377014`, -0.42750418186187744`, 
               0.8347952365875244, -0.08091702312231064, -0.3177253305912018, \
-0.3726147711277008, -0.1653270125389099, -0.2756451368331909, \
-0.17836780846118927`, -0.5517928600311279, -0.29109975695610046`, \
-0.23394696414470673`, -0.6148195862770081, -0.26311782002449036`, \
-1.6862740516662598`, -0.43980684876441956`, 0.038237787783145905`, 
               1.14317786693573}], "Children" -> 
             RawArray["Integer16",{{2, 34}, {3, 28}, {-1, 4}, {5, 16}, {6, 
               8}, {-2, 7}, {-3, -4}, {9, -13}, {10, 12}, {
               11, -7}, {-5, -6}, {-8, 13}, {14, -12}, {15, -11}, {-9, -10}, {
               17, 20}, {18, 19}, {-14, -15}, {-16, -17}, {21, 23}, {-18, 
               22}, {-19, -20}, {24, 27}, {25, -24}, {
               26, -23}, {-21, -22}, {-25, -26}, {29, -33}, {30, -32}, {31, 
               33}, {-27, 32}, {-28, -29}, {-30, -31}, {-34, 35}, {36, 40}, {
               37, -39}, {38, -38}, {39, -37}, {-35, -36}, {-40, 
               41}, {-41, -42}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 3, 7, 8, 2, 10, 3, 11, 7, 10, 4, 8, 6, 
               9, 9, 10, 9, 7, 7, 11, 9, 3, 7, 7, 5, 4, 5, 4, 6, 4, 3, 7, 5, 
               10, 7, 10, 9, 11}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2881694734096527, -1.308113694190979, \
-0.2704251706600189, -0.2632814645767212, -0.5735766887664795, \
-0.586020827293396, 1.27598237991333, 
               1.3142211437225342`, -0.31374630331993103`, 
               0.42925092577934265`, -0.41213515400886536`, \
-0.2725542187690735, -0.41061511635780334`, -0.36956045031547546`, 
               0.45487818121910095`, -1.9820195436477661`, 
               1.4625253677368164`, -0.15670724213123322`, \
-0.25417977571487427`, -0.6394681334495544, -0.5527690052986145, \
-0.4887661337852478, -0.308331161737442, -0.31374630331993103`, \
-0.47411683201789856`, -0.26311782002449036`, -0.43980684876441956`, \
-0.3525282144546509, -0.4190596640110016, -0.3674299418926239, \
-1.9383809566497803`, -0.12421640753746033`, -0.47411683201789856`, \
-0.33220288157463074`, -0.2271040678024292, -0.33220288157463074`, \
-0.8275818824768066, 0.42895570397377014`}], "Children" -> 
             RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 16}, {6, 
               11}, {-3, 7}, {8, -8}, {9, -7}, {-4, 10}, {-5, -6}, {-9, 12}, {
               13, -14}, {14, 15}, {-10, -11}, {-12, -13}, {-15, 17}, {
               18, -29}, {19, 28}, {20, 25}, {-16, 21}, {22, 24}, {-17, 
               23}, {-18, -19}, {-20, -21}, {-22, 26}, {
               27, -25}, {-23, -24}, {29, -28}, {-26, -27}, {31, 36}, {-30, 
               32}, {33, -35}, {-31, 34}, {-32, 35}, {-33, -34}, {-36, 
               37}, {-37, 38}, {-38, -39}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 
               1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 
               1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 3, 6, 11, 5, 7, 6, 2, 3, 8, 10, 11, 8, 
               4, 9, 3, 6, 4, 1, 3, 4, 10, 9, 10, 8, 3, 7, 10, 7, 6, 11, 6, 3,
                2, 10, 4, 5, 2, 11, 7}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.14582639932632446`, -0.4257394075393677, 
               0.10450102388858795`, -1.402627944946289, \
-0.47411683201789856`, -0.20544350147247314`, -0.2881694734096527, \
-0.5735766887664795, -0.7408730387687683, -0.24473591148853302`, \
-0.07838495075702667, -0.6394681334495544, -0.22000853717327118`, \
-0.3674299418926239, 0.5464824438095093, 
               1.27598237991333, -0.29239174723625183`, \
-0.20351091027259827`, -1.7434459924697876`, 
               0.330581396818161, -0.3823316991329193, -0.7129297852516174, 
               0.0884610041975975, 0.04852401837706566, -0.2632814645767212, 
               0.5826883316040039, -0.31374630331993103`, \
-0.9667477607727051, -0.28667059540748596`, -0.5288385152816772, \
-0.48683613538742065`, 2.604081153869629, 
               0.8347952365875244, -0.5735766887664795, -0.07838495075702667, \
-0.2333143651485443, -0.47411683201789856`, -0.5735766887664795, 
               1.344747543334961, 0.05448320880532265}], "Children" -> 
             RawArray["Integer16",{{2, 35}, {3, 16}, {4, 14}, {-1, 5}, {-2, 
               6}, {7, 13}, {8, -9}, {9, 10}, {-3, -4}, {11, -8}, {
               12, -7}, {-5, -6}, {-10, -11}, {15, -14}, {-12, -13}, {17, 
               34}, {18, 32}, {19, -29}, {20, 25}, {21, 24}, {22, 
               23}, {-15, -16}, {-17, -18}, {-19, -20}, {26, 28}, {
               27, -23}, {-21, -22}, {-24, 29}, {-25, 30}, {-26, 
               31}, {-27, -28}, {33, -32}, {-30, -31}, {-33, -34}, {-35, 
               36}, {37, -41}, {-36, 38}, {39, -40}, {40, -39}, {-37, -38}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 
               2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 
               1, 1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 4, 3, 1, 7, 7, 5, 10, 8, 10, 3, 10, 10, 
               6, 6, 4, 9, 4, 10, 6, 5, 7, 11, 11, 8, 6, 5, 9, 6, 9, 9, 10, 5,
                4, 7, 9, 9, 11, 4, 3, 9, 7, 6, 8}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.24876461923122406`, -0.26311782002449036`, 
               1.339009165763855, -1.7434459924697876`, \
-0.35706740617752075`, -0.3354068696498871, -0.47411683201789856`, \
-0.33220288157463074`, -0.2416449934244156, 0.5561599135398865, 
               0.015447728335857391`, -0.586020827293396, \
-0.9667477607727051, -0.2881694734096527, -0.6512841582298279, \
-0.3525282144546509, 0.7296910285949707, -0.3078230321407318, 
               0.04852401837706566, -0.29239174723625183`, \
-0.47411683201789856`, -0.3408220112323761, 
               1.3142211437225342`, -1.3415751457214355`, \
-0.25709959864616394`, -0.5161716938018799, -0.23394696414470673`, 
               0.36327388882637024`, -0.5288385152816772, \
-1.8352291584014893`, -2.018437623977661, 
               0.8099778294563293, -0.0967070460319519, -0.1439039707183838, \
-0.17836780846118927`, -0.0031432844698429108`, -0.36956045031547546`, \
-0.7921000719070435, -0.3525282144546509, -0.4887661337852478, \
-0.8275818824768066, -0.09714070707559586, -0.15727931261062622`, \
-0.22000853717327118`}], "Children" -> 
             RawArray["Integer16",{{2, 30}, {3, 27}, {4, 25}, {5, 11}, {-1, 
               6}, {-2, 7}, {8, 9}, {-3, -4}, {10, -7}, {-5, -6}, {12, 20}, {
               13, 14}, {-8, -9}, {15, 19}, {-10, 16}, {17, 
               18}, {-11, -12}, {-13, -14}, {-15, -16}, {21, 24}, {-17, 
               22}, {-18, 23}, {-19, -20}, {-21, -22}, {
               26, -25}, {-23, -24}, {28, 29}, {-26, -27}, {-28, -29}, {31, 
               32}, {-30, -31}, {33, 42}, {34, 41}, {35, -39}, {-32, 36}, {
               37, -38}, {38, -37}, {-33, 39}, {-34, 
               40}, {-35, -36}, {-40, -41}, {43, -45}, {
               44, -44}, {-42, -43}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 
               1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
               1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 10, 5, 5, 6, 10, 11, 11, 9, 3, 8, 6, 3, 
               11, 11, 3, 11, 6, 3, 8, 6, 10, 6, 11, 9, 3, 6, 8, 9, 3, 4, 6, 
               3, 3, 7, 3, 6, 3, 8, 6, 5, 4, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.40549686551094055`, -1.601292610168457, \
-0.47411683201789856`, -0.43980684876441956`, -0.29239174723625183`, 
               0.3023419678211212, -0.03809813782572746, \
-0.27315136790275574`, -0.27795615792274475`, 
               0.20452792942523956`, -0.2632814645767212, -0.5879502296447754,
                0.5826883316040039, 0.7342196106910706, 1.0394835472106934`, 
               0.20452792942523956`, 
               0.42895570397377014`, -0.5246162414550781, \
-0.7408730387687683, -0.26946330070495605`, 0.45494890213012695`, 
               0.6830688714981079, -0.2037242203950882, 1.2836947441101074`, 
               0.8212953209877014, -1.1190334558486938`, \
-0.34728118777275085`, -0.25709959864616394`, 
               0.0884610041975975, -0.4257394075393677, 
               0.2882462441921234, -0.4401709735393524, -1.4341671466827393`, \
-0.4887661337852478, -0.16212238371372223`, -1.1820602416992188`, \
-0.3177253305912018, 
               0.20452792942523956`, -0.2818269729614258, \
-0.47817134857177734`, -0.30256691575050354`, 0.4819687604904175, 
               1.9665192365646362`}], "Children" -> 
             RawArray["Integer16",{{2, 30}, {3, 4}, {-1, -2}, {5, 26}, {6, 
               21}, {7, 15}, {8, 11}, {9, -6}, {10, -5}, {-3, -4}, {12, 
               14}, {-7, 13}, {-8, -9}, {-10, -11}, {16, 20}, {17, -16}, {
               18, -15}, {-12, 19}, {-13, -14}, {-17, -18}, {22, -24}, {23, 
               24}, {-19, -20}, {25, -23}, {-21, -22}, {27, 
               28}, {-25, -26}, {-27, 29}, {-28, -29}, {31, 37}, {32, -36}, {
               33, 34}, {-30, -31}, {35, -35}, {36, -34}, {-32, -33}, {38, 
               42}, {39, 40}, {-37, -38}, {-39, 41}, {-40, -41}, {-42, 
               43}, {-43, -44}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 
               2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 
               1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{11, 3, 10, 11, 8, 4, 7, 8, 9, 7, 4, 5, 6, 
               9, 4, 11, 2, 11, 10, 5, 10, 8, 9, 7, 4, 7, 6, 4, 4, 7, 4, 5, 9,
                3, 8, 5, 1, 6, 5, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.6394681334495544, -1.056006669998169, \
-1.8551105260849, -1.7078919410705566`, -0.14582639932632446`, \
-0.06939531862735748, -0.31374630331993103`, -0.2323722243309021, 
               0.36327388882637024`, -0.27584031224250793`, \
-0.3674299418926239, -0.47411683201789856`, -0.4401709735393524, \
-0.0031432844698429108`, -0.3823316991329193, 
               0.12369175255298615`, -0.5735766887664795, \
-0.18157218396663666`, -0.2052939236164093, -0.43980684876441956`, 
               1.3176137208938599`, -0.25709959864616394`, 
               0.7296910285949707, -0.3408220112323761, \
-0.32272475957870483`, -0.302916020154953, -0.37683701515197754`, \
-0.27801957726478577`, -0.33762648701667786`, -0.32999172806739807`, \
-0.3823316991329193, -0.47411683201789856`, -0.9191861748695374, \
-0.4257394075393677, -0.17673562467098236`, -0.37118688225746155`, \
-1.7434459924697876`, -0.5879502296447754, -0.23394696414470673`, \
-0.03905593603849411}], "Children" -> 
             RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 5}, {-2, -3}, {
               6, -7}, {7, -6}, {-4, -5}, {9, 28}, {10, 20}, {11, 19}, {
               12, -16}, {13, 15}, {14, -10}, {-8, -9}, {16, 18}, {
               17, -13}, {-11, -12}, {-14, -15}, {-17, -18}, {21, 24}, {
               22, -22}, {23, -21}, {-19, -20}, {-23, 25}, {26, 
               27}, {-24, -25}, {-26, -27}, {29, 37}, {30, 36}, {-28, 31}, {
               32, -34}, {-29, 33}, {-30, 34}, {
               35, -33}, {-31, -32}, {-35, -36}, {-37, 38}, {-38, 39}, {
               40, -41}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
               1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 
               1, 2, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 7, 4, 10, 11, 9, 7, 9, 4, 3, 7, 9, 10, 
               11, 7, 3, 8, 3, 4, 3, 6, 10, 10, 7, 6, 3, 8, 6, 11, 8, 6, 11, 
               5, 7, 7, 6, 3, 7, 10, 3}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.24876461923122406`, -0.25417977571487427`, \
-0.2929213047027588, 
               1.1907047033309937`, -0.6089417338371277, -0.6443732976913452, \
-0.308331161737442, -0.7359775900840759, -0.39723342657089233`, \
-0.17363247275352478`, -0.31916144490242004`, -0.4611647427082062, \
-0.33220288157463074`, 
               1.0394835472106934`, -0.32999172806739807`, \
-0.11060573905706406`, -0.26946330070495605`, -0.29968592524528503`, \
-0.39723342657089233`, -0.17363247275352478`, -0.4401709735393524, 
               0.04852401837706566, 
               0.9368867874145508, -0.308331161737442, -0.34728118777275085`, \
-1.3711403608322144`, -0.14582639932632446`, -0.5668388605117798, 
               0.12369175255298615`, -0.1705537736415863, \
-0.31350305676460266`, -0.18157218396663666`, -0.33687689900398254`, \
-0.19461321830749512`, -0.17295266687870026`, -0.37683701515197754`, \
-1.1190334558486938`, 
               0.02199236862361431, -0.07838495075702667, \
-0.6148195862770081}], "Children" -> 
             RawArray["Integer16",{{2, 27}, {3, -26}, {4, 26}, {5, 24}, {6, 
               11}, {7, 9}, {8, -3}, {-1, -2}, {-4, 10}, {-5, -6}, {12, 17}, {
               13, 14}, {-7, -8}, {15, -12}, {16, -11}, {-9, -10}, {18, 
               21}, {-13, 19}, {-14, 20}, {-15, -16}, {22, 
               23}, {-17, -18}, {-19, -20}, {
               25, -23}, {-21, -22}, {-24, -25}, {28, 37}, {-27, 29}, {30, 
               34}, {31, -32}, {32, -31}, {33, -30}, {-28, -29}, {-33, 
               35}, {-34, 36}, {-35, -36}, {38, 39}, {-37, -38}, {-39, 
               40}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 
               1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 
               2, 2, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 4, 3, 5, 7, 3, 2, 8, 10, 9, 9, 10, 5, 
               11, 11, 7, 6, 9, 8, 11, 10, 8, 7, 10, 11, 8, 9, 4, 3, 5, 9, 11,
                8, 7, 7, 4, 3, 6, 5, 8, 3, 4, 4, 7}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.34728118777275085`, -0.2184126377105713, 
               1.27598237991333, -0.37118688225746155`, \
-0.17295266687870026`, -1.308113694190979, -0.5735766887664795, \
-0.20764485001564026`, -1.220565676689148, -1.4688119888305664`, \
-1.010790467262268, -0.586020827293396, -0.43980684876441956`, 
               1.0394835472106934`, 
               0.7342196106910706, -0.2704251706600189, -0.5035049319267273, 
               0.45487818121910095`, -0.2941906750202179, \
-0.18157218396663666`, -0.07838495075702667, -0.2632814645767212, \
-0.2650100290775299, -0.07838495075702667, 
               1.894222617149353, -0.20764485001564026`, 
               0.36327388882637024`, -0.2929213047027588, \
-0.7408730387687683, -0.43980684876441956`, -0.6443732976913452, \
-0.18157218396663666`, -0.22000853717327118`, -0.308331161737442, \
-0.32999172806739807`, -0.33762648701667786`, 0.330581396818161, 
               0.8518416881561279, -0.47411683201789856`, \
-0.24473591148853302`, -0.4257394075393677, -0.32272475957870483`, \
-0.3823316991329193, -0.10255584865808487`}], "Children" -> 
             RawArray["Integer16",{{2, 33}, {3, 32}, {4, 30}, {5, 26}, {6, 
               24}, {7, 8}, {-1, -2}, {9, 23}, {-3, 10}, {-4, 11}, {-5, 
               12}, {-6, 13}, {14, -17}, {15, -16}, {16, -15}, {17, 22}, {18, 
               19}, {-7, -8}, {-9, 20}, {
               21, -12}, {-10, -11}, {-13, -14}, {-18, -19}, {-20, 
               25}, {-21, -22}, {27, -27}, {28, 29}, {-23, -24}, {-25, -26}, {
               31, -30}, {-28, -29}, {-31, -32}, {34, 41}, {35, 
               36}, {-33, -34}, {37, -40}, {38, 40}, {
               39, -37}, {-35, -36}, {-38, -39}, {42, -45}, {43, 
               44}, {-41, -42}, {-43, -44}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 
               2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 
               2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 3, 3, 3, 7, 5, 10, 11, 2, 11, 7, 1, 6, 
               3, 11, 7, 3, 6, 11, 3, 6, 7, 9, 10, 5, 3, 11, 5, 11, 9, 4, 10, 
               10}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.24876461923122406`, -1.1190334558486938`, \
-1.875354290008545, -1.245086908340454, -0.31916144490242004`, \
-0.26825693249702454`, 
               0.04852401837706566, -0.18157218396663666`, \
-0.5735766887664795, 
               0.7342196106910706, -0.3408220112323761, -1.7434459924697876`, \
-0.38105928897857666`, -0.17363247275352478`, -0.12051939964294434`, \
-0.2650100290775299, 0.9608487486839294, -0.36417022347450256`, 
               0.42895570397377014`, 
               0.645715057849884, -0.5330607891082764, -0.28125545382499695`, \
-0.27795615792274475`, 1.8252495527267456`, -0.23394696414470673`, 
               1.0238754749298096`, -0.27315136790275574`, \
-0.33687689900398254`, -0.18157218396663666`, 
               0.7296910285949707, -0.33762648701667786`, 
               1.063795804977417, -0.33220288157463074`}], "Children" -> 
             RawArray["Integer16",{{2, 24}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
               12}, {7, -10}, {8, 9}, {-4, -5}, {10, 
               11}, {-6, -7}, {-8, -9}, {13, 16}, {14, -14}, {
               15, -13}, {-11, -12}, {17, -23}, {18, -22}, {19, 23}, {
               20, -19}, {21, -18}, {-15, 22}, {-16, -17}, {-20, -21}, {
               25, -34}, {26, -33}, {27, 33}, {-24, 28}, {29, -30}, {-25, 
               30}, {31, 32}, {-26, -27}, {-28, -29}, {-31, -32}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 
               1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 
               2}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 5, 3, 9, 7, 7, 8, 4, 3, 7, 3, 8, 4, 9, 
               11, 2, 7, 10, 11, 6, 11, 7, 4, 3, 8, 11, 9, 7, 4, 10, 9, 5, 11,
                10, 5, 1, 3, 9, 4, 5, 3}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.3515034317970276, -0.23394696414470673`, 
               1.27598237991333, -0.9191861748695374, -0.2704251706600189, \
-0.3408220112323761, -0.2230994552373886, -0.41213515400886536`, \
-0.8038998246192932, -0.3462371528148651, -0.11060573905706406`, \
-0.28800883889198303`, -0.3674299418926239, -0.4611647427082062, 
               1.0394835472106934`, -0.5735766887664795, -0.302916020154953, 
               0.1754329800605774, 
               0.4594821035861969, -0.5246162414550781, \
-0.18157218396663666`, -0.11880126595497131`, -0.39723342657089233`, \
-0.4257394075393677, -0.05928056314587593, -0.18157218396663666`, 
               0.1800653040409088, -0.28667059540748596`, \
-0.3078230321407318, -0.45911186933517456`, -0.09474757313728333, 
               0.4179426431655884, -1.3415751457214355`, \
-0.45911186933517456`, -0.43980684876441956`, -1.7434459924697876`, \
-1.4971938133239746`, 
               0.63808673620224, -0.26311782002449036`, \
-0.43980684876441956`, -0.9929800033569336}], "Children" -> 
             RawArray["Integer16",{{2, 26}, {3, 24}, {4, 23}, {5, 7}, {
               6, -3}, {-1, -2}, {8, 19}, {9, 10}, {-4, -5}, {-6, 11}, {12, 
               15}, {-7, 13}, {14, -10}, {-8, -9}, {16, -15}, {17, 
               18}, {-11, -12}, {-13, -14}, {20, 22}, {-16, 
               21}, {-17, -18}, {-19, -20}, {-21, -22}, {
               25, -25}, {-23, -24}, {27, 37}, {28, 35}, {29, 31}, {
               30, -28}, {-26, -27}, {32, -33}, {33, -32}, {-29, 
               34}, {-30, -31}, {-34, 36}, {-35, -36}, {-37, 38}, {-38, 39}, {
               40, -42}, {41, -41}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 
               1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{5, 4, 9, 5, 10, 3, 8, 11, 3, 6, 11, 7, 5, 
               3, 6, 8, 6, 10, 9, 10, 6, 8, 8, 3, 7, 9, 3, 8, 3, 10, 10, 7, 2,
                4, 6, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.19963698089122772`, -0.41213515400886536`, \
-1.1939990520477295`, -0.47411683201789856`, 
               0.3023419678211212, -1.1820602416992188`, \
-0.19837208092212677`, 1.3142211437225342`, 
               1.339009165763855, -0.44439324736595154`, 
               0.42895570397377014`, -0.31916144490242004`, \
-0.33687689900398254`, -0.17363247275352478`, -0.5246162414550781, \
-0.23546314239501953`, 
               0.26916930079460144`, -0.2052939236164093, \
-0.7359775900840759, -0.45911186933517456`, -0.3895038068294525, \
-0.25709959864616394`, -0.26946330070495605`, -0.7408730387687683, \
-0.28667059540748596`, -0.6443732976913452, -0.9299532771110535, \
-0.2818269729614258, -0.4887661337852478, -0.07838495075702667, 
               1.063795804977417, 
               0.4010521471500397, -0.5735766887664795, -0.3823316991329193, \
-0.5879502296447754, -0.6343951225280762}], "Children" -> 
             RawArray["Integer16",{{2, 35}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
               6}, {-4, -5}, {8, 30}, {9, 27}, {10, 26}, {11, 16}, {
               12, -11}, {-6, 13}, {14, -10}, {-7, 15}, {-8, -9}, {17, 24}, {
               18, -19}, {19, 21}, {-12, 20}, {-13, -14}, {-15, 22}, {
               23, -18}, {-16, -17}, {-20, 25}, {-21, -22}, {-23, -24}, {-25, 
               28}, {-26, 29}, {-27, -28}, {-29, 31}, {32, -34}, {33, -33}, {
               34, -32}, {-30, -31}, {36, -37}, {-35, -36}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 
               1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
               1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{6, 6, 7, 11, 6, 5, 8, 10, 8, 3, 10, 4, 2, 
               10, 8, 5, 7, 10, 4, 10, 6, 4, 8, 11, 6, 4, 4, 4, 6, 7, 3, 6, 3,
                7, 3, 6, 10, 4, 5, 7, 6}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.34728118777275085`, -0.6343951225280762, \
-0.28667059540748596`, 
               1.650011420249939, -0.44439324736595154`, \
-0.19963698089122772`, -0.2818269729614258, -0.7129297852516174, \
-0.2972815930843353, 1.0238754749298096`, 
               0.04852401837706566, -0.3823316991329193, -0.5735766887664795, \
-0.33220288157463074`, -0.26019051671028137`, 
               0.10915282368659973`, -0.31916144490242004`, 
               0.04852401837706566, -0.24821609258651733`, 
               0.3023419678211212, -0.43172645568847656`, \
-0.41213515400886536`, -0.25709959864616394`, 
               0.12369175255298615`, -0.42750418186187744`, \
-0.3823316991329193, -0.3674299418926239, -0.3674299418926239, \
-0.3092808127403259, -0.308331161737442, -1.875354290008545, 
               0.8349525928497314, -0.8038998246192932, \
-0.13504669070243835`, -0.4257394075393677, -0.06438951939344406, \
-0.45911186933517456`, 1.8678297996520996`, -0.40549686551094055`, 
               0.005746949929744005, 1.088288426399231}], "Children" -> 
             RawArray["Integer16",{{2, 28}, {3, 4}, {-1, -2}, {5, 27}, {6, 
               17}, {7, 16}, {8, 10}, {-3, 9}, {-4, -5}, {11, -12}, {12, 
               15}, {13, -9}, {-6, 14}, {-7, -8}, {-10, -11}, {-13, -14}, {18,
                19}, {-15, -16}, {20, -25}, {21, 24}, {-17, 22}, {-18, 
               23}, {-19, -20}, {25, 
               26}, {-21, -22}, {-23, -24}, {-26, -27}, {29, 35}, {-28, 
               30}, {-29, 31}, {-30, 32}, {33, -34}, {-31, 34}, {-32, -33}, {
               36, 39}, {-35, 37}, {38, -38}, {-36, -37}, {-39, 40}, {-40, 
               41}, {-41, -42}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 
               1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 4, 7, 7, 8, 1, 9, 6, 11, 10, 4, 3, 6, 7,
                11, 6, 9, 7, 7, 10, 11, 8, 10, 9, 8, 7, 3, 6, 7, 3, 6, 10, 5, 
               7, 8, 10, 8, 8, 10, 5, 8, 10}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2509177625179291, -0.4270368814468384, \
-0.28667059540748596`, -0.3462371528148651, -0.30037251114845276`, \
-1.7434459924697876`, 
               0.0884610041975975, -0.5161716938018799, -0.6394681334495544, \
-0.45911186933517456`, -0.41213515400886536`, -1.1820602416992188`, \
-0.7188403606414795, -0.308331161737442, 
               0.42895570397377014`, -0.34728118777275085`, \
-0.6443732976913452, -0.28125545382499695`, -0.24876461923122406`, 
               0.6830688714981079, -0.21209858357906342`, \
-0.14582639932632446`, -1.9820195436477661`, -0.8275818824768066, \
-0.18600839376449585`, -0.302916020154953, 
               0.07847446203231812, -0.43172645568847656`, \
-0.2650100290775299, 
               0.015447728335857391`, -0.46128228306770325`, \
-0.7129297852516174, -0.43980684876441956`, -0.2595949172973633, \
-0.2323722243309021, 
               1.1907047033309937`, -0.13655363023281097`, \
-0.21691761910915375`, 
               0.9368867874145508, -0.30256691575050354`, \
-0.23855407536029816`, 0.1754329800605774}], "Children" -> 
             RawArray["Integer16",{{2, 21}, {-1, 3}, {4, 16}, {5, 
               6}, {-2, -3}, {7, 10}, {8, -7}, {-4, 9}, {-5, -6}, {11, 
               12}, {-8, -9}, {-10, 13}, {-11, 14}, {15, -14}, {-12, -13}, {
               17, 20}, {-15, 18}, {-16, 19}, {-17, -18}, {-19, -20}, {22, 
               28}, {23, -27}, {-21, 24}, {25, 26}, {-22, -23}, {
               27, -26}, {-24, -25}, {29, 33}, {30, 31}, {-28, -29}, {
               32, -32}, {-30, -31}, {34, 39}, {35, 36}, {-33, -34}, {
               37, -38}, {38, -37}, {-35, -36}, {40, -43}, {41, -42}, {-39, 
               42}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
               1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 
               1, 2, 2, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 10, 7, 9, 10, 8, 5, 6, 8, 9, 2, 8, 3, 
               10, 3, 9, 6, 6, 10, 10, 3, 9, 9, 6, 2, 10, 7, 4, 6, 6, 8, 6, 6,
                9, 1, 10, 11}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.3078230321407318, 
               0.6830688714981079, -0.2650100290775299, 0.1800653040409088, 
               0.5561599135398865, -0.23855407536029816`, \
-0.47411683201789856`, -0.4739490747451782, -0.2972815930843353, \
-0.27795615792274475`, -0.5735766887664795, -0.27873605489730835`, 
               0.015447728335857391`, 
               0.5561599135398865, -0.36271268129348755`, 
               0.0884610041975975, -0.42750418186187744`, -0.5879502296447754,
                0.3023419678211212, 0.9368867874145508, -0.2366591989994049, 
               0.8212953209877014, 0.45487818121910095`, 
               0.06650064885616302, -0.5735766887664795, 
               1.3176137208938599`, -0.297500878572464, -0.3674299418926239, \
-0.5879502296447754, 
               4.795435905456543, -0.2663723826408386, -0.3515034317970276, \
-0.5246162414550781, 
               1.187712550163269, -1.7434459924697876`, -0.8398387432098389, \
-1.7078919410705566`}], "Children" -> 
             RawArray["Integer16",{{2, 29}, {3, 20}, {4, 16}, {5, 14}, {
               6, -10}, {7, -9}, {8, 9}, {-1, -2}, {-3, 10}, {11, 13}, {
               12, -6}, {-4, -5}, {-7, -8}, {15, -13}, {-11, -12}, {17, 19}, {
               18, -16}, {-14, -15}, {-17, -18}, {21, 22}, {-19, -20}, {23, 
               24}, {-21, -22}, {25, -28}, {26, 28}, {
               27, -25}, {-23, -24}, {-26, -27}, {-29, 30}, {31, -38}, {32, 
               33}, {-30, -31}, {-32, 34}, {35, -37}, {36, 
               37}, {-33, -34}, {-35, -36}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
               1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 7, 9, 11, 4, 4, 6, 8, 6, 8, 8, 7, 7, 3, 
               4, 3, 6, 10, 9, 5, 6, 5, 6, 11, 6, 4, 6, 9, 9, 4, 3, 10, 11, 2,
                7, 3, 7, 11, 4}], "NumericalThresholds" -> 
             RawArray["Real32",{-1.245086908340454, 0.4010521471500397, 
               0.36327388882637024`, -0.18157218396663666`, \
-0.3823316991329193, -0.39723342657089233`, -0.022166883572936058`, \
-0.2107357680797577, -0.37683701515197754`, -0.26946330070495605`, \
-0.2849179208278656, -0.28667059540748596`, -0.3408220112323761, 
               1.339009165763855, -0.3674299418926239, -0.4257394075393677, \
-0.575283408164978, -1.220565676689148, -0.4611647427082062, \
-0.47411683201789856`, -0.4570600390434265, -0.43980684876441956`, \
-0.46128228306770325`, -0.18157218396663666`, -0.31350305676460266`, \
-0.39723342657089233`, 0.429615318775177, 
               0.36327388882637024`, -0.18635186553001404`, \
-0.33762648701667786`, -0.6148195862770081, 
               1.3176137208938599`, -0.6394681334495544, -0.5735766887664795, \
-0.24876461923122406`, 
               0.7717685103416443, -0.16212238371372223`, \
-0.18157218396663666`, -0.3525282144546509}], "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, -7}, {4, 6}, {-1, 
               5}, {-2, -3}, {-4, 7}, {-5, -6}, {9, 33}, {10, 24}, {11, 17}, {
               12, 14}, {13, -10}, {-8, -9}, {15, -14}, {
               16, -13}, {-11, -12}, {-15, 18}, {-16, 19}, {20, 22}, {-17, 
               21}, {-18, -19}, {-20, 23}, {-21, -22}, {25, 29}, {26, 
               27}, {-23, -24}, {-25, 28}, {-26, -27}, {-28, 30}, {
               31, -32}, {-29, 32}, {-30, -31}, {-33, 34}, {35, 39}, {-34, 
               36}, {37, 38}, {-35, -36}, {-37, -38}, {-39, -40}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 
               2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 1, 2}], "NominalSplits" -> {}, "RootIndex" -> 1,
              "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 8, 6, 3, 3, 2, 5, 11, 7, 7, 8, 9, 9, 10,
                7, 7, 3, 7, 6, 8, 3, 9, 11, 8, 10, 9, 11, 3, 7, 6, 11, 9, 7, 
               9, 10, 6, 7, 7, 6, 5}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-2.06443452835083, -0.2725542187690735, \
-0.29239174723625183`, 
               0.45663484930992126`, -0.11060573905706406`, \
-0.5735766887664795, -0.43980684876441956`, -0.18157218396663666`, \
-0.3462371528148651, -0.28667059540748596`, -0.28800883889198303`, 
               0.45487818121910095`, 
               0.36327388882637024`, -0.2052939236164093, \
-0.31916144490242004`, -0.09172556549310684, -0.04757900536060333, \
-0.20544350147247314`, -0.2881694734096527, -0.2540086805820465, \
-0.9299532771110535, 0.2716695964336395, 
               0.12369175255298615`, -0.23855407536029816`, 1.063795804977417,
                0.5464824438095093, 
               0.12369175255298615`, -1.3711403608322144`, \
-0.12963154911994934`, -0.4063928723335266, 
               0.42895570397377014`, -0.8275818824768066, -0.302916020154953, \
-0.18635186553001404`, 
               0.04852401837706566, -0.11083441972732544`, \
-0.21627378463745117`, -0.302916020154953, -0.37683701515197754`, \
-0.43980684876441956`}], "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 16}, {4, 15}, {5, 13}, {6, 
               12}, {7, 9}, {8, -4}, {-2, -3}, {-5, 10}, {
               11, -8}, {-6, -7}, {-9, -10}, {
               14, -13}, {-11, -12}, {-14, -15}, {17, -41}, {18, 30}, {19, 
               29}, {20, 27}, {21, 22}, {-16, -17}, {23, 25}, {
               24, -20}, {-18, -19}, {26, -23}, {-21, -22}, {
               28, -26}, {-24, -25}, {-27, -28}, {31, 36}, {32, 35}, {33, 
               34}, {-29, -30}, {-31, -32}, {-33, -34}, {37, 40}, {38, 
               39}, {-35, -36}, {-37, -38}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 
               2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 
               2, 1, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{9, 5, 3, 6, 3, 4, 3, 2, 8, 5, 6, 5, 2, 10, 
               8, 9, 6, 8, 6, 9, 10, 6, 4, 6, 11, 7, 1, 6, 8, 7, 7, 6, 3, 10, 
               7, 10, 9, 4, 4, 7, 7}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-2.384854793548584, -0.37118688225746155`, \
-0.04757900536060333, -0.37683701515197754`, -0.6148195862770081, \
-0.09919878095388412, -1.308113694190979, -0.5735766887664795, \
-0.2540086805820465, -0.40549686551094055`, -0.5330607891082764, \
-0.30256691575050354`, -0.5735766887664795, -0.7129297852516174, \
-0.26946330070495605`, 
               0.0884610041975975, -0.2881694734096527, -0.2756451368331909, 
               0.2438357174396515, -0.0031432844698429108`, \
-0.33220288157463074`, 0.9489537477493286, -0.3078230321407318, 
               0.7420628070831299, 
               0.6121140718460083, -0.3462371528148651, -1.7434459924697876`, \
-0.29239174723625183`, -0.27873605489730835`, -0.32457658648490906`, \
-0.292085736989975, -0.5035049319267273, 
               0.5196616053581238, -0.33220288157463074`, \
-0.31374630331993103`, -1.0936566591262817`, -0.9191861748695374, \
-0.24821609258651733`, -0.3674299418926239, -0.31916144490242004`, \
-0.28125545382499695`}], "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 25}, {5, 15}, {6, 
               12}, {7, -9}, {-3, 8}, {9, 11}, {-4, 10}, {-5, -6}, {-7, -8}, {
               13, -13}, {14, -12}, {-10, -11}, {16, 19}, {-14, 17}, {
               18, -17}, {-15, -16}, {20, 22}, {21, -20}, {-18, -19}, {
               23, -24}, {24, -23}, {-21, -22}, {26, 38}, {27, 
               28}, {-25, -26}, {29, 36}, {30, 32}, {-27, 
               31}, {-28, -29}, {-30, 33}, {34, 35}, {-31, -32}, {-33, -34}, {
               37, -37}, {-35, -36}, {39, -42}, {40, -41}, {-38, 
               41}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
               1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 
               1, 1, 1, 1, 2, 1, 1, 2, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 5, 7, 6, 10, 7, 10, 3, 7, 11, 11, 11,
                10, 4, 8, 11, 10, 11, 3, 7, 10, 2, 6, 7, 11, 7, 1, 6, 3, 6, 
               10, 4, 9, 3, 3, 10, 7, 8, 7}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2632814645767212, -0.2818269729614258, \
-0.47411683201789856`, -0.35706740617752075`, -0.5035049319267273, 
               0.6830688714981079, -0.31374630331993103`, 0.8099778294563293, 
               0.2675546705722809, -0.308331161737442, 
               0.12369175255298615`, -0.7921000719070435, \
-0.18157218396663666`, 
               1.3176137208938599`, -0.26311782002449036`, \
-0.08091702312231064, -1.3415751457214355`, -1.7282015085220337`, 
               0.42895570397377014`, 
               0.20452792942523956`, -0.20544350147247314`, \
-0.9667477607727051, -0.5735766887664795, -0.4063928723335266, \
-0.2595949172973633, -0.12051939964294434`, -0.16753752529621124`, \
-1.7434459924697876`, -0.11083441972732544`, -0.8669265508651733, \
-0.5288385152816772, -0.2052939236164093, -0.3823316991329193, \
-0.5527690052986145, -0.4257394075393677, -0.6778463125228882, \
-0.586020827293396, -0.1133861243724823, 
               0.17562955617904663`, -0.0754801481962204}], "Children" -> 
             RawArray["Integer16",{{2, 15}, {3, 10}, {-1, 4}, {-2, 5}, {6, 
               7}, {-3, -4}, {8, 9}, {-5, -6}, {-7, -8}, {-9, 11}, {12, 
               14}, {-10, 13}, {-11, -12}, {-13, -14}, {16, 34}, {17, 32}, {
               18, 19}, {-15, -16}, {20, 29}, {21, 28}, {22, 27}, {-17, 23}, {
               24, 26}, {-18, 
               25}, {-19, -20}, {-21, -22}, {-23, -24}, {-25, -26}, {
               30, -30}, {-27, 31}, {-28, -29}, {-31, 33}, {-32, -33}, {35, 
               39}, {36, 38}, {37, -36}, {-34, -35}, {-37, -38}, {-39, 
               40}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 
               2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 
               1, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 7, 6, 4, 11, 9, 5, 2, 8, 11, 9, 11, 6, 
               3, 10, 8, 8, 3, 9, 6, 11, 6, 5, 8, 6, 9, 3, 9, 4, 9, 11, 6, 10,
                6, 9, 4, 10, 11, 4, 6, 3}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.26311782002449036`, -0.24334947764873505`, \
-0.3092808127403259, -0.41213515400886536`, -0.6089417338371277, \
-0.18635186553001404`, -0.47411683201789856`, -0.5735766887664795, \
-0.2509177625179291, 0.7342196106910706, -0.5527690052986145, 
               0.12369175255298615`, -0.49506041407585144`, \
-0.5517928600311279, 
               0.9368867874145508, -0.1798265427350998, -0.2540086805820465, 
               0.9608487486839294, 
               0.0884610041975975, -0.5035049319267273, -0.6394681334495544, 
               0.3113919496536255, -0.33687689900398254`, \
-0.0005530327325686812, -0.4401709735393524, 
               0.5464824438095093, -1.1190334558486938`, 
               0.36327388882637024`, -0.39723342657089233`, 
               0.8212953209877014, -0.48683613538742065`, -0.4063928723335266,
                0.9368867874145508, -0.4908381402492523, -0.7359775900840759, 
               0.586280882358551, -1.220565676689148, -0.18157218396663666`, \
-0.158805713057518, -0.051722727715969086`, -0.29968592524528503`}], 
             "Children" -> 
             RawArray["Integer16",{{2, 32}, {3, 23}, {4, 21}, {5, 7}, {-1, 
               6}, {-2, -3}, {-4, 8}, {9, 15}, {10, 13}, {11, -8}, {-5, 
               12}, {-6, -7}, {14, -11}, {-9, -10}, {16, 20}, {17, -16}, {
               18, -15}, {19, -14}, {-12, -13}, {-17, -18}, {-19, 
               22}, {-20, -21}, {24, 31}, {25, -29}, {26, 28}, {
               27, -24}, {-22, -23}, {-25, 29}, {-26, 
               30}, {-27, -28}, {-30, -31}, {33, 35}, {34, -34}, {-32, -33}, {
               36, 39}, {37, -38}, {-35, 38}, {-36, -37}, {40, -42}, {-39, 
               41}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 
               1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 
               1, 1, 2, 1, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10, 5, 11, 6, 4, 10, 3, 10, 8, 9, 11, 6, 9,
                6, 9, 9, 5, 11, 3, 9, 6, 6, 7, 3, 10, 10, 9, 10, 4, 4, 8, 10, 
               3, 7, 7, 4, 9, 9, 7, 9}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.07838495075702667, -0.26825693249702454`, \
-0.18157218396663666`, -0.34728118777275085`, -0.3674299418926239, \
-1.0936566591262817`, -0.2366591989994049, -0.33220288157463074`, \
-0.23855407536029816`, -0.4611647427082062, 
               0.001586175407283008, -0.5330607891082764, \
-0.7359775900840759, -0.5879502296447754, -0.8275818824768066, \
-0.9191861748695374, -0.40549686551094055`, 2.2605392932891846`, 
               0.8347952365875244, -0.27795615792274475`, \
-0.5583943724632263, -0.630172848701477, -0.16753752529621124`, \
-1.7493008375167847`, 1.1907047033309937`, 0.42925092577934265`, 
               1.3709211349487305`, 
               0.9368867874145508, -0.3823316991329193, \
-0.39723342657089233`, -0.21691761910915375`, 0.5561599135398865, 
               1.27598237991333, -0.24876461923122406`, \
-0.28667059540748596`, -0.32272475957870483`, 0.5464824438095093, 
               1.187712550163269, -0.10797099024057388`, 0.1800653040409088}],
              "Children" -> 
             RawArray["Integer16",{{2, 17}, {3, 14}, {4, 11}, {5, 9}, {
               6, -5}, {-1, 7}, {8, -4}, {-2, -3}, {10, -8}, {-6, -7}, {-9, 
               12}, {-10, 13}, {-11, -12}, {-13, 15}, {16, -16}, {-14, -15}, {
               18, 35}, {19, -34}, {20, 32}, {-17, 21}, {22, 
               23}, {-18, -19}, {24, 31}, {25, 26}, {-20, -21}, {-22, 27}, {
               28, -27}, {29, -26}, {30, -25}, {-23, -24}, {-28, -29}, {33, 
               34}, {-30, -31}, {-32, -33}, {36, 38}, {37, -37}, {-35, -36}, {
               39, -41}, {-38, 40}, {-39, -40}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
               1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 
               2, 1, 1, 2, 1, 1, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{7, 6, 4, 3, 11, 11, 9, 5, 10, 9, 2, 8, 10, 
               10, 10, 6, 11, 7, 9, 6, 9, 11, 3, 5, 7, 8, 7, 5, 7, 8, 10, 10, 
               5, 7, 8, 7, 3, 9, 8, 4}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.15670724213123322`, -0.2881694734096527, \
-0.20351091027259827`, 1.339009165763855, 2.1384336948394775`, 
               1.0394835472106934`, 
               1.6457339525222778`, -0.47411683201789856`, 
               0.3023419678211212, -0.5527690052986145, -0.5735766887664795, \
-0.2632814645767212, -0.586020827293396, 
               1.1907047033309937`, -0.7129297852516174, -0.4570600390434265, 
               0.42895570397377014`, -0.2704251706600189, 
               1.3709211349487305`, -0.39794835448265076`, \
-0.36956045031547546`, -0.03809813782572746, -0.9299532771110535, \
-0.43980684876441956`, -0.308331161737442, -0.2756451368331909, \
-0.17295266687870026`, -0.43980684876441956`, -0.2650100290775299, \
-0.23855407536029816`, 
               0.04852401837706566, -1.9820195436477661`, \
-0.30256691575050354`, 0.07072862982749939, 
               0.04890172928571701, -0.12421640753746033`, \
-1.1190334558486938`, -0.36956045031547546`, -0.13346269726753235`, \
-0.2333143651485443}], "Children" -> 
             RawArray["Integer16",{{2, 34}, {3, 27}, {4, 26}, {5, -23}, {
               6, -22}, {7, 24}, {8, -18}, {9, 11}, {10, -3}, {-1, -2}, {12, 
               19}, {13, 15}, {-4, 14}, {-5, -6}, {16, 17}, {-7, -8}, {
               18, -11}, {-9, -10}, {20, -17}, {21, 23}, {-12, 
               22}, {-13, -14}, {-15, -16}, {-19, 
               25}, {-20, -21}, {-24, -25}, {28, 33}, {29, 32}, {30, -29}, {
               31, -28}, {-26, -27}, {-30, -31}, {-32, -33}, {35, -41}, {
               36, -40}, {-34, 37}, {38, 39}, {-35, -36}, {
               40, -39}, {-37, -38}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 2, 
               1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 
               1, 2, 1, 1, 1, 2, 1, 1}], "NominalSplits" -> {}, "RootIndex" -> 
             1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 8, 7, 7, 10, 3, 9, 7, 3, 3, 5, 9, 10, 8,
                3, 8, 4, 10, 3, 3, 4, 3, 7, 8, 10, 9, 7, 10, 3, 8, 6, 8, 6, 
               10, 7, 7, 5, 7, 6, 7, 3, 3}], "NumericalThresholds" -> 
             RawArray[
               "Real32",{-0.2632814645767212, -0.28800883889198303`, \
-0.35706740617752075`, -0.308331161737442, 1.063795804977417, 
               0.2675546705722809, -0.7359775900840759, -0.292085736989975, \
-1.1190334558486938`, -1.4971938133239746`, -0.40549686551094055`, 
               0.0884610041975975, -0.586020827293396, -0.2756451368331909, 
               0.07847446203231812, -0.27873605489730835`, \
-0.09919878095388412, -1.9820195436477661`, -0.5517928600311279, \
-1.7493008375167847`, -0.3674299418926239, -0.8669265508651733, \
-0.24876461923122406`, -0.06855332851409912, 
               0.5561599135398865, -0.6443732976913452, \
-0.32457658648490906`, -0.33220288157463074`, 
               0.7087417840957642, -0.2230994552373886, -0.4570600390434265, \
-0.2107357680797577, -0.11083441972732544`, 
               0.3023419678211212, -0.302916020154953, -0.28667059540748596`, \
-0.43980684876441956`, -0.25417977571487427`, -0.5288385152816772, \
-0.16212238371372223`, -0.5517928600311279, -0.8038998246192932}], "Children" -> 
             RawArray["Integer16",{{2, 17}, {3, 9}, {-1, 4}, {5, 8}, {
               6, -5}, {7, -4}, {-2, -3}, {-6, -7}, {10, 11}, {-8, -9}, {
               12, -16}, {13, 16}, {-10, 14}, {
               15, -13}, {-11, -12}, {-14, -15}, {18, 41}, {-17, 19}, {20, 
               26}, {-18, 21}, {22, 24}, {23, -21}, {-19, -20}, {
               25, -24}, {-22, -23}, {27, 33}, {-25, 28}, {29, -31}, {
               30, -30}, {31, 32}, {-26, -27}, {-28, -29}, {34, -40}, {35, 
               36}, {-32, -33}, {-34, 37}, {38, 39}, {-35, -36}, {-37, 
               40}, {-38, -39}, {42, -43}, {-41, -42}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 
               2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 
               1, 2, 2, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{11, 8, 7, 7, 9, 7, 5, 3, 2, 3, 6, 3, 10, 2,
                3, 11, 3, 5, 11, 9, 10, 8, 6, 11, 8, 8, 10, 8, 5, 9, 9, 6, 3, 
               8, 8, 9, 10, 4, 7, 4, 9, 7, 6}], "NumericalThresholds" -> 
             RawArray["Real32",{
               0.3068501055240631, -0.23855407536029816`, \
-0.2271040678024292, -0.2595949172973633, 
               0.1800653040409088, -0.35706740617752075`, \
-0.47411683201789856`, 0.39360812306404114`, -0.5735766887664795, 
               1.27598237991333, -0.29239174723625183`, -0.7408730387687683, 
               0.9368867874145508, -0.5735766887664795, \
-0.17363247275352478`, -0.18157218396663666`, 
               0.20452792942523956`, -0.43980684876441956`, \
-0.18157218396663666`, -0.9191861748695374, 
               1.063795804977417, -0.16746285557746887`, 
               0.15094591677188873`, -0.18157218396663666`, \
-0.14582639932632446`, -0.21382668614387512`, -1.0936566591262817`, 
               0.11381110548973083`, -0.028087090700864792`, 
               0.8212953209877014, -1.4688119888305664`, -0.5330607891082764, \
-0.7408730387687683, -0.118008092045784, -0.21382668614387512`, 
               0.36327388882637024`, 
               0.1754329800605774, -0.39723342657089233`, \
-0.2704251706600189, -0.3823316991329193, -0.0031432844698429108`, \
-0.2650100290775299, -0.3219476044178009}], "Children" -> 
             RawArray["Integer16",{{2, 28}, {3, 17}, {4, -15}, {5, 16}, {6, 
               12}, {-1, 7}, {8, 9}, {-2, -3}, {10, -7}, {11, -6}, {-4, -5}, {
               13, 14}, {-8, -9}, {-10, 15}, {-11, -12}, {-13, -14}, {18, 
               25}, {19, 21}, {20, -18}, {-16, -17}, {22, -23}, {23, 
               24}, {-19, -20}, {-21, -22}, {26, -27}, {-24, 
               27}, {-25, -26}, {29, -44}, {30, -43}, {31, 42}, {-28, 32}, {
               33, 34}, {-29, -30}, {35, -39}, {36, 40}, {37, 39}, {-31, 
               38}, {-32, -33}, {-34, -35}, {-36, 41}, {-37, -38}, {
               43, -42}, {-40, -41}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
               2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 
               2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{8, 4, 9, 3, 7, 6, 8, 7, 8, 11, 9, 8, 8, 2, 
               5, 3, 10, 3, 6, 10, 3, 11, 11, 10, 7, 3, 1, 5, 6, 9, 5, 5, 11, 
               6, 7, 4, 10, 8, 7, 3, 7, 8, 1, 6, 9, 9}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.19837208092212677`, -0.158805713057518, 
               1.554129719734192, -1.1190334558486938`, \
-0.24876461923122406`, -0.6175060272216797, -0.27873605489730835`, \
-0.2650100290775299, -0.21691761910915375`, -0.7921000719070435, \
-0.5527690052986145, -0.27873605489730835`, -0.24473591148853302`, \
-0.5735766887664795, -0.30256691575050354`, 
               1.27598237991333, -0.2052939236164093, 
               0.07847446203231812, -0.36417022347450256`, 0.3023419678211212,
                0.330581396818161, 0.7342196106910706, -0.18157218396663666`, 
               0.5561599135398865, -0.292085736989975, -0.6778463125228882, \
-1.7434459924697876`, -0.43980684876441956`, -0.5330607891082764, \
-1.1023948192596436`, -0.0967070460319519, -0.1310170292854309, 
               0.3068501055240631, -0.42750418186187744`, \
-0.24334947764873505`, -0.27801957726478577`, -0.586020827293396, \
-0.1396445482969284, -0.292085736989975, 0.8347952365875244, 
               0.4443732798099518, -0.06546240299940109, \
-1.7434459924697876`, -0.39794835448265076`, -0.8275818824768066, \
-1.285603404045105}], "Children" -> 
             RawArray["Integer16",{{2, 31}, {3, -30}, {4, -29}, {5, 9}, {
               6, -5}, {-1, 7}, {-2, 8}, {-3, -4}, {10, 29}, {11, 13}, {-6, 
               12}, {-7, -8}, {14, 27}, {15, 23}, {16, -17}, {17, -16}, {18, 
               19}, {-9, -10}, {20, -15}, {21, 
               22}, {-11, -12}, {-13, -14}, {-18, 24}, {25, -22}, {
               26, -21}, {-19, -20}, {-23, 28}, {-24, -25}, {-26, 
               30}, {-27, -28}, {32, 44}, {33, 43}, {34, 38}, {35, 
               36}, {-31, -32}, {-33, 37}, {-34, -35}, {39, 40}, {-36, -37}, {
               41, -41}, {42, -40}, {-38, -39}, {-42, -43}, {-44, 45}, {
               46, -47}, {-45, -46}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 
               2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 
               1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0]]}, "Processor" -> MachineLearning`MLProcessor["FirstValues", 
           Association[
           "Info" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 11.], "Key" -> 
            "((f10f11)(f1f2f3f4f5f6f7f8f9))", "Invertibility" -> "Perfect", 
            "Missing" -> "Allowed"]], 
         "OOBConfusionMatrix" -> {{0.7317073106765747, 
          0.26829268932342526`}, {0.26829268932342526`, 0.7317073106765747}}, 
         "Method" -> "RandomForest", "Options" -> 
         Association[
          "FeatureFraction" -> 
           Association[
            "Value" -> 11^Rational[-1, 2], "Options" -> Association[]], 
           "LeafSize" -> 
           Association["Value" -> 5, "Options" -> Association[]], 
           "TreeNumber" -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "DistributionSmoothing" -> 
           Association["Value" -> 0.5, "Options" -> Association[]], 
           "Implementation" -> 
           Association["Value" -> "DAAL", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.5837022484249852, 0.011862105338630342`], "Accuracy" -> 
            PlusMinus[0.7088950032220125, 0.024139869912846838`], 
            "EvaluationTime" -> 0.00012190714285714285`, "TestSize" -> 492, 
            "TrainingSize" -> 326, "TrainingTime" -> 0.033056528571428566`, 
            "TrainingMemory" -> 299777.14285714284`, "ModelMemory" -> 
            103194.28571428571`, "ExperimentCount" -> 6, "ModelUtility" -> 
            0.7369814378557993, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.6046789928272043, 0.025843048062421037`], 
              PlusMinus[0.5724675135989742, 0.019250512857739304`], 
              PlusMinus[0.5943520741871812, 0.02671354347762419], 
              PlusMinus[0.5769121846786969, 0.024169017485867566`], 
              PlusMinus[0.609831801900032, 0.028554149091022767`], 
              PlusMinus[0.5692854588769595, 0.019890593233602167`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6692188059568723, 0.05222799915885347], 
              PlusMinus[0.7415079625833781, 0.04879070933830203], 
              PlusMinus[0.6812669987279566, 0.051755547027087595`], 
              PlusMinus[0.7415079625833781, 0.04879070933830203], 
              PlusMinus[0.693315191499041, 0.05124462502553577], 
              PlusMinus[0.7174115770412094, 0.050102575461482925`]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            408], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 103951280333721]], "Configurations" -> Dataset[
           Association[
           Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5998319375434331, 0.013611007614267296`], 
                 "Accuracy" -> 
                 PlusMinus[0.7052169799218917, 0.020017476303397737`], 
                 "EvaluationTime" -> 0.00019162109882747068`, "TestSize" -> 
                 598, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.10471513333333334`, "TrainingMemory" -> 
                 156810.66666666666`, "ModelMemory" -> 85725.33333333333, 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.7168283333868253,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6083967094884356, 0.012017406981666883`], 
                   PlusMinus[0.5881917963079769, 0.014009801838069436`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7145432196997393, 0.03208554048465661], 
                   PlusMinus[0.7003988239092076, 0.023061975166437286`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6440986602741601, 0.007428344034591689], 
                 "Accuracy" -> 
                 PlusMinus[0.6792788251755031, 0.03859676364544882], 
                 "EvaluationTime" -> 0.00012824566666666667`, "TestSize" -> 
                 200, "TrainingSize" -> 60, "TrainingTime" -> 
                 0.03606296666666667, "TrainingMemory" -> 165618.66666666666`,
                  "ModelMemory" -> 87725.33333333333, "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.669049241233259, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6432672399759654, 0.012636317974446724`], 
                   PlusMinus[0.6445328502018103, 0.009131667852098837]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6588629791526784, 0.04759634188315472], 
                   PlusMinus[0.6984669395487183, 0.04614302198810466]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5837022484249852, 0.011862105338630342`], 
                 "Accuracy" -> 
                 PlusMinus[0.7088950032220125, 0.024139869912846838`], 
                 "EvaluationTime" -> 0.00012190714285714285`, "TestSize" -> 
                 492, "TrainingSize" -> 326, "TrainingTime" -> 
                 0.033056528571428566`, "TrainingMemory" -> 
                 299777.14285714284`, "ModelMemory" -> 103194.28571428571`, 
                 "ExperimentCount" -> 6, "ModelUtility" -> 0.7369814378557993,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6046789928272043, 0.025843048062421037`], 
                   PlusMinus[0.5724675135989742, 0.019250512857739304`], 
                   PlusMinus[0.5943520741871812, 0.02671354347762419], 
                   PlusMinus[0.5769121846786969, 0.024169017485867566`], 
                   PlusMinus[0.609831801900032, 0.028554149091022767`], 
                   PlusMinus[0.5692854588769595, 0.019890593233602167`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6692188059568723, 0.05222799915885347], 
                   PlusMinus[0.7415079625833781, 0.04879070933830203], 
                   PlusMinus[0.6812669987279566, 0.051755547027087595`], 
                   PlusMinus[0.7415079625833781, 0.04879070933830203], 
                   PlusMinus[0.693315191499041, 0.05124462502553577], 
                   PlusMinus[0.7174115770412094, 0.050102575461482925`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00012190714285714285`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.5837022484249852, 0.011862105338630342`], 
                "ModelMemory" -> 103194.28571428571`, "TrainingMemory" -> 
                299777.14285714284`, "TrainingTime" -> 0.14608649424481449`], 
              "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 103946985366425]], "MaxTrainingSize" -> 408, 
         "LastReportingTime" -> 3.7843918329612331`17.330571085727687*^9, 
         "PreprocessorEvaluationTime" -> 0.000011506787109375`2., 
         "PreprocessorMemory" -> 75440, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.32, "ElapsedTimes" -> 
             0.279929, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3959022, "ExperimentCounts" -> 2], 
            Association[
            "TrainingSizes" -> 326, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
             0.7558035999999999, "ExperimentCounts" -> 6]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[103955575301017]], "ID" -> 
            103959870268313]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {33}, "ID" -> 
              1655829805352185057], "f2" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.4}, "ID" -> 
              4707290959889891078], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {1.6}, "ID" -> 
              8921746992689292037], "f4" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {186}, "ID" -> 
              739979300684816526], "f5" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {779}, "ID" -> 
              2700468875218673242], "f6" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {844}, "ID" -> 
              7113523297063603705], "f7" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {7.3}, "ID" -> 
              2774393019402469807], "f8" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {3.2}, "ID" -> 
              6938996016951802333], "f9" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0.7}, "ID" -> 
              4673898987759877533], "f10" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
              5043514025678373964], "f11" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5107476442784992394]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 2.3372577, "MaxTrainingMemory" -> 
         797224, "DataMemory" -> 806280, "FunctionMemory" -> 271928, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2019, 12, 3, 19, 57, 13.357131`8.878288139036712}, 
           "Instant", "Gregorian", 0.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{22, 6.7, 3.2, 850, 154, 248, 6.2, 2.8, 0.8, 0, 1}, {
        42, 1, 0.3, 154, 38, 21, 6.8, 3.9, 1.3, 1, 0}, {
        24, 1, 0.2, 189, 52, 31, 8, 4.8, 1.5, 1, 0}, {
        48, 0.7, 0.1, 1630, 74, 149, 5.3, 2, 0.6, 1, 0}, {
        60, 2.1, 1, 191, 114, 247, 4, 1.6, 0.6, 1, 0}, {
        50, 1.1, 0.3, 175, 20, 19, 7.1, 4.5, 1.7, 1, 0}, {
        49, 3.9, 2.1, 189, 65, 181, 6.9, 3, 0.7, 1, 0}, {
        25, 0.9, 0.3, 159, 24, 25, 6.9, 4.4, 1.7, 0, 1}, {
        32, 23, 11.3, 300, 482, 275, 7.1, 3.5, 0.9, 1, 0}, {
        54, 23.2, 12.6, 574, 43, 47, 7.2, 3.5, 0.9, 0, 1}, {
        60, 8.9, 4, 950, 33, 32, 6.8, 3.1, 0.8, 1, 0}, {
        60, 2.3, 0.6, 272, 79, 51, 6.6, 3.5, 1.1, 1, 0}, {
        34, 6.2, 3, 240, 1680, 850, 7.2, 4, 1.2, 1, 0}, {
        30, 0.8, 0.2, 182, 46, 57, 7.8, 4.3, 1.2, 1, 0}, {
        58, 0.8, 0.2, 180, 32, 25, 8.2, 4.4, 1.1, 1, 0}, {
        60, 5.8, 3, 257, 107, 104, 6.6, 3.5, 1.12, 1, 0}, {
        32, 0.9, 0.3, 462, 70, 82, 6.2, 3.1, 1, 1, 0}, {
        26, 6.8, 3.2, 140, 37, 19, 3.6, 0.9, 0.3, 1, 0}, {
        16, 0.7, 0.2, 418, 28, 35, 7.2, 4.1, 1.3, 1, 0}, {
        45, 0.6, 0.2, 245, 22, 24, 7.1, 3.4, 0.9, 1, 0}, {
        34, 5.9, 2.5, 290, 45, 233, 5.6, 2.7, 0.9, 1, 0}, {
        28, 0.6, 0.1, 177, 36, 29, 6.9, 4.1, 1.4, 1, 0}, {
        40, 3.6, 1.8, 285, 50, 60, 7, 2.9, 0.7, 1, 0}, {
        60, 0.9, 0.3, 168, 16, 24, 6.7, 3, 0.8, 1, 0}, {
        52, 0.6, 0.1, 194, 10, 12, 6.9, 3.3, 0.9, 0, 1}, {
        37, 0.8, 0.2, 125, 41, 39, 6.4, 3.4, 1.1, 1, 0}, {
        69, 0.9, 0.2, 215, 32, 24, 6.9, 3, 0.7, 1, 0}, {
        49, 0.6, 0.1, 218, 50, 53, 5, 2.4, 0.9, 1, 0}, {
        65, 0.7, 0.2, 182, 23, 28, 6.8, 2.9, 0.7, 0, 1}, {
        33, 7.1, 3.7, 196, 622, 497, 6.9, 3.6, 1.09, 1, 0}, {
        22, 0.8, 0.2, 300, 57, 40, 7.9, 3.8, 0.9, 1, 0}, {
        60, 4, 1.9, 238, 119, 350, 7.1, 3.3, 0.8, 1, 0}, {
        36, 0.8, 0.2, 650, 70, 138, 6.6, 3.1, 0.8, 0, 1}, {
        57, 1.4, 0.7, 470, 62, 88, 5.6, 2.5, 0.8, 1, 0}, {
        28, 1, 0.3, 90, 18, 108, 6.8, 3.1, 0.8, 0, 1}, {
        60, 2.2, 1, 271, 45, 52, 6.1, 2.9, 0.9, 1, 0}, {
        69, 0.8, 0.2, 146, 42, 70, 8.4, 4.9, 1.4, 0, 1}, {
        18, 0.8, 0.2, 199, 34, 31, 6.5, 3.5, 1.16, 0, 1}, {
        45, 0.6, 0.1, 196, 29, 30, 5.8, 2.9, 1, 1, 0}, {
        22, 0.8, 0.2, 198, 20, 26, 6.8, 3.9, 1.3, 1, 0}, {
        6, 0.6, 0.1, 289, 38, 30, 4.8, 2, 0.7, 1, 0}, {
        8, 0.9, 0.2, 401, 25, 58, 7.5, 3.4, 0.8, 0, 1}, {
        46, 0.6, 0.2, 115, 14, 11, 6.9, 3.4, 0.9, 1, 0}, {
        37, 0.8, 0.2, 205, 31, 36, 9.2, 4.6, 1, 0, 1}, {
        26, 7.1, 3.3, 258, 80, 113, 6.2, 2.9, 0.8, 1, 0}, {
        72, 1.7, 0.8, 200, 28, 37, 6.2, 3, 0.93, 1, 0}, {
        40, 0.9, 0.3, 293, 232, 245, 6.8, 3.1, 0.8, 0, 1}, {
        44, 0.8, 0.2, 335, 148, 86, 5.6, 3, 1.1, 1, 0}, {
        29, 1, 0.3, 75, 25, 26, 5.1, 2.9, 1.3, 1, 0}, {
        60, 6.3, 3.2, 314, 118, 114, 6.6, 3.7, 1.27, 1, 0}, {
        51, 2.9, 1.2, 189, 80, 125, 6.2, 3.1, 1, 1, 0}, {
        33, 0.7, 0.1, 168, 35, 33, 7, 3.7, 1.1, 1, 0}, {
        32, 12.1, 6, 515, 48, 92, 6.6, 2.4, 0.5, 1, 0}, {
        72, 3.9, 2, 195, 27, 59, 7.3, 2.4, 0.4, 1, 0}, {
        51, 0.9, 0.2, 280, 21, 30, 6.7, 3.2, 0.8, 0, 1}, {
        30, 0.8, 0.2, 174, 21, 47, 4.6, 2.3, 1, 1, 0}, {
        34, 4.1, 2, 289, 875, 731, 5, 2.7, 1.1, 1, 0}, {
        29, 0.7, 0.1, 162, 52, 41, 5.2, 2.5, 0.9, 0, 1}, {
        51, 0.8, 0.2, 175, 48, 22, 8.1, 4.6, 1.3, 1, 0}, {
        13, 0.7, 0.1, 182, 24, 19, 8.9, 4.9, 1.2, 0, 1}, {
        75, 0.9, 0.2, 282, 25, 23, 4.4, 2.2, 1, 1, 0}, {
        36, 0.8, 0.2, 182, 31, 34, 6.4, 3.8, 1.4, 1, 0}, {
        32, 0.7, 0.1, 240, 12, 15, 7, 3, 0.7, 0, 1}, {
        57, 4.5, 2.3, 315, 120, 105, 7, 4, 1.3, 1, 0}, {
        26, 1.3, 0.4, 173, 38, 62, 8, 4, 1, 1, 0}, {
        55, 4.4, 2.9, 230, 14, 25, 7.1, 2.1, 0.4, 1, 0}, {
        75, 1.8, 0.8, 405, 79, 50, 6.1, 2.9, 0.9, 1, 0}, {
        18, 0.6, 0.2, 538, 33, 34, 7.5, 3.2, 0.7, 1, 0}, {
        49, 1.3, 0.4, 206, 30, 25, 6, 3.1, 1.06, 1, 0}, {
        55, 0.8, 0.2, 225, 14, 23, 6.1, 3.3, 1.2, 0, 1}, {
        51, 0.8, 0.2, 367, 42, 18, 5.2, 2, 0.6, 1, 0}, {
        66, 2.9, 1.3, 168, 21, 38, 5.5, 1.8, 0.4, 0, 1}, {
        22, 2.4, 1, 340, 25, 21, 8.3, 4.5, 1.1, 1, 0}, {
        73, 1.8, 0.9, 220, 20, 43, 6.5, 3, 0.8, 1, 0}, {
        35, 2, 1.1, 226, 33, 135, 6, 2.7, 0.8, 1, 0}, {
        62, 1.2, 0.4, 195, 38, 54, 6.3, 3.8, 1.5, 1, 0}, {
        65, 0.7, 0.2, 406, 24, 45, 7.2, 3.5, 0.9, 0, 1}, {
        40, 0.7, 0.1, 202, 37, 29, 5, 2.6, 1, 1, 0}, {
        55, 0.8, 0.2, 290, 139, 87, 7, 3, 0.7, 1, 0}, {
        29, 1.2, 0.4, 160, 20, 22, 6.2, 3, 0.9, 1, 0}, {
        46, 14.2, 7.8, 374, 38, 77, 4.3, 2, 0.8, 0, 1}, {
        28, 0.6, 0.2, 159, 15, 16, 7, 3.5, 1, 1, 0}, {
        61, 0.8, 0.2, 192, 28, 35, 6.9, 3.4, 0.9, 1, 0}, {
        30, 0.8, 0.2, 158, 25, 22, 7.9, 4.5, 1.3, 0, 1}, {
        50, 5.8, 3, 661, 181, 285, 5.7, 2.3, 0.67, 1, 0}, {
        31, 0.8, 0.2, 198, 43, 31, 7.3, 4, 1.2, 1, 0}, {
        38, 1.5, 0.4, 298, 60, 103, 6, 3, 1, 1, 0}, {
        75, 10.6, 5, 562, 37, 29, 5.1, 1.8, 0.5, 1, 0}, {
        45, 0.6, 0.1, 270, 23, 42, 5.1, 2, 0.5, 0, 1}, {
        74, 0.9, 0.3, 234, 16, 19, 7.9, 4, 1, 0, 1}, {
        45, 23.3, 12.8, 1550, 425, 511, 7.7, 3.5, 0.8, 0, 1}, {
        39, 1.9, 0.9, 180, 42, 62, 7.4, 4.3, 1.38, 1, 0}, {
        60, 2, 1.1, 664, 52, 104, 6, 2.1, 0.53, 1, 0}, {
        38, 0.7, 0.2, 110, 22, 18, 6.4, 2.5, 0.64, 1, 0}, {
        58, 1, 0.4, 182, 14, 20, 6.8, 3.4, 1, 1, 0}, {
        36, 2.8, 1.5, 305, 28, 76, 5.9, 2.5, 0.7, 1, 0}, {
        65, 0.8, 0.2, 162, 30, 90, 3.8, 1.4, 0.5, 1, 0}, {
        60, 5.7, 2.8, 214, 412, 850, 7.3, 3.2, 0.78, 1, 0}, {
        37, 0.8, 0.2, 147, 27, 46, 5, 2.5, 1, 1, 0}, {
        53, 0.7, 0.1, 182, 20, 33, 4.8, 1.9, 0.6, 0, 1}, {
        53, 0.9, 0.4, 238, 17, 14, 6.6, 2.9, 0.8, 1, 0}, {
        66, 1, 0.3, 190, 30, 54, 5.3, 2.1, 0.6, 1, 0}, {
        7, 0.5, 0.1, 352, 28, 51, 7.9, 4.2, 1.1, 1, 0}, {
        41, 2.7, 1.3, 580, 142, 68, 8, 4, 1, 1, 0}, {
        24, 3.3, 1.6, 174, 11, 33, 7.6, 3.9, 1, 1, 0}, {
        55, 0.6, 0.2, 220, 24, 32, 5.1, 2.4, 0.88, 1, 0}, {
        46, 3.3, 1.5, 172, 25, 41, 5.6, 2.4, 0.7, 1, 0}, {
        58, 0.8, 0.2, 130, 24, 25, 7, 4, 1.3, 0, 1}, {
        18, 0.8, 0.2, 228, 55, 54, 6.9, 4, 1.3, 1, 0}, {
        66, 16.6, 7.6, 315, 233, 384, 6.9, 2, 0.4, 1, 0}, {
        12, 1, 0.2, 719, 157, 108, 7.2, 3.7, 1, 1, 0}, {
        67, 2.2, 1.1, 198, 42, 39, 7.2, 3, 0.7, 1, 0}, {
        55, 0.7, 0.2, 290, 53, 58, 6.8, 3.4, 1, 1, 0}, {
        33, 1.5, 7, 505, 205, 140, 7.5, 3.9, 1, 1, 0}, {
        38, 2.2, 1, 310, 119, 42, 7.9, 4.1, 1, 1, 0}, {
        20, 1.1, 0.5, 128, 20, 30, 3.9, 1.9, 0.95, 1, 0}, {
        55, 0.9, 0.2, 116, 36, 16, 6.2, 3.2, 1, 1, 0}, {
        42, 0.7, 0.2, 197, 64, 33, 5.8, 2.4, 0.7, 1, 0}, {
        42, 6.8, 3.2, 630, 25, 47, 6.1, 2.3, 0.6, 1, 0}, {
        52, 2.7, 1.4, 251, 20, 40, 6, 1.7, 0.39, 1, 0}, {
        33, 2.1, 1.3, 480, 38, 22, 6.5, 3, 0.8, 1, 0}, {
        90, 1.1, 0.3, 215, 46, 134, 6.9, 3, 0.7, 1, 0}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        55, 3.3, 1.5, 214, 54, 152, 5.1, 1.8, 0.5, 1, 0}, {
        42, 0.8, 0.2, 182, 22, 20, 7.2, 3.9, 1.1, 0, 1}, {
        48, 1.4, 0.8, 621, 110, 176, 7.2, 3.9, 1.1, 0, 1}, {
        85, 1, 0.3, 208, 17, 15, 7, 3.6, 1, 0, 1}, {
        43, 0.9, 0.3, 140, 12, 29, 7.4, 3.5, 1.8, 0, 1}, {
        33, 0.7, 0.2, 256, 21, 30, 8.5, 3.9, 0.8, 1, 0}, {
        75, 14.8, 9, 1020, 71, 42, 5.3, 2.2, 0.7, 1, 0}, {
        70, 3.1, 1.6, 198, 40, 28, 5.6, 2, 0.5, 1, 0}, {
        31, 0.9, 0.2, 518, 189, 17, 5.3, 2.3, 0.7, 1, 0}, {
        13, 0.7, 0.2, 350, 17, 24, 7.4, 4, 1.1, 0, 1}, {
        42, 7.4, 3.6, 298, 52, 102, 4.6, 1.9, 0.7, 0, 1}, {
        42, 0.8, 0.2, 195, 18, 15, 6.7, 3, 0.8, 0, 1}, {
        50, 1, 0.3, 191, 22, 31, 7.8, 4, 1, 0, 1}, {
        48, 3.2, 1.6, 257, 33, 116, 5.7, 2.2, 0.62, 1, 0}, {
        70, 1.3, 0.3, 690, 93, 40, 3.6, 2.7, 0.7, 1, 0}, {
        63, 0.9, 0.2, 194, 52, 45, 6, 3.9, 1.85, 1, 0}, {
        48, 4.5, 2.3, 282, 13, 74, 7, 2.4, 0.52, 1, 0}, {
        32, 15, 8.2, 289, 58, 80, 5.3, 2.2, 0.7, 1, 0}, {
        32, 12.7, 8.4, 190, 28, 47, 5.4, 2.6, 0.9, 1, 0}, {
        26, 1, 0.3, 163, 48, 71, 7.1, 3.7, 1, 1, 0}, {
        65, 1.4, 0.6, 260, 28, 24, 5.2, 2.2, 0.7, 1, 0}, {
        70, 1.4, 0.6, 146, 12, 24, 6.2, 3.8, 1.58, 1, 0}, {
        34, 8.7, 4, 298, 58, 138, 5.8, 2.4, 0.7, 1, 0}, {
        38, 0.9, 0.3, 310, 15, 25, 5.5, 2.7, 1, 1, 0}, {
        18, 0.6, 0.1, 265, 97, 161, 5.9, 3.1, 1.1, 1, 0}, {
        40, 0.9, 0.2, 285, 32, 27, 7.7, 3.5, 0.8, 0, 1}, {
        65, 0.9, 0.2, 170, 33, 66, 7, 3, 0.75, 1, 0}, {
        23, 1, 0.3, 212, 41, 80, 6.2, 3.1, 1, 1, 0}, {
        40, 3.9, 1.7, 350, 950, 1500, 6.7, 3.8, 1.3, 1, 0}, {
        50, 7.3, 3.7, 92, 44, 236, 6.8, 1.6, 0.3, 1, 0}, {
        55, 0.8, 0.2, 155, 21, 17, 6.9, 3.8, 1.4, 0, 1}, {
        73, 1.9, 0.7, 1750, 102, 141, 5.5, 2, 0.5, 1, 0}, {
        38, 3.1, 1.6, 253, 80, 406, 6.8, 3.9, 1.3, 1, 0}, {
        62, 0.6, 0.1, 160, 42, 110, 4.9, 2.6, 1.1, 1, 0}, {
        46, 0.8, 0.2, 185, 24, 15, 7.9, 3.7, 0.8, 0, 1}, {
        42, 8.9, 4.5, 272, 31, 61, 5.8, 2, 0.5, 1, 0}, {
        51, 0.8, 0.2, 160, 34, 20, 6.9, 3.7, 1.1, 1, 0}, {
        68, 0.6, 0.1, 1620, 95, 127, 4.6, 2.1, 0.8, 0, 1}, {
        50, 2.6, 1.2, 415, 407, 576, 6.4, 3.2, 1, 1, 0}, {
        18, 1.4, 0.6, 215, 440, 850, 5, 1.9, 0.6, 1, 0}, {
        42, 0.5, 0.1, 162, 155, 108, 8.1, 4, 0.9, 0, 1}, {
        50, 0.8, 0.2, 152, 29, 30, 7.4, 4.1, 1.3, 1, 0}, {
        13, 0.6, 0.1, 320, 28, 56, 7.2, 3.6, 1, 1, 0}, {
        32, 32.6, 14.1, 219, 95, 235, 5.8, 3.1, 1.1, 1, 0}, {
        42, 16.4, 8.9, 245, 56, 87, 5.4, 2, 0.5, 1, 0}, {
        35, 0.9, 0.2, 190, 25, 20, 6.4, 3.6, 1.2, 1, 0}, {
        64, 0.9, 0.3, 310, 61, 58, 7, 3.4, 0.9, 1, 0}, {
        51, 4, 2.5, 275, 382, 330, 7.5, 4, 1.1, 1, 0}, {
        44, 1.9, 0.6, 298, 378, 602, 6.6, 3.3, 1, 0, 1}, {
        40, 14.5, 6.4, 358, 50, 75, 5.7, 2.1, 0.5, 1, 0}, {
        48, 0.8, 0.2, 218, 32, 28, 5.2, 2.5, 0.9, 0, 1}, {
        37, 1.3, 0.4, 195, 41, 38, 5.3, 2.1, 0.6, 1, 0}}, 
      "Output" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 
       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 
       1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1}], 
    "Predictions" -> {1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
      1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
     1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1}, 
    "LogProbabilities" -> CompressedData["
1:eJyVVl1Ik1EYns7FtuZVZaDQj2uVF7NQg2JriEQQ/awlWlaGJEZR4SqITRpp
mfYDeWNpFE0CQQOT0EAseVsQIS2hmn+pS506t2Zzc1paSnVxdvGci0MX4+N8
533PeZ/nfZ732/qTxYeKYiUSSfPf37+n9qn1fHjxM9mvt62Sxs/So2pPU379
JKX5btaYxjxUZdNfio8bJ9Pd3LFXhV76+DJH32TpobQ5hTXROsOtWRzL68ww
2j90uSjDWLDFWxbh9vF+jMe1bOnM1R5TL6XUVbQOLIS5/M15+qK8rlH67Q4/
U0d80Sd7j/FTy5Ir/do+un0l+3BhaZjsOrs+vWOYCkIxKkdHgB4/9CQHLo5R
+z61bj52kk65q3ovu76Q3Kx5XqEJcfVVtxqHnDXjlHpjsPfWuwluv2GdZdBZ
56ft6RLHp92j0TiWh/cfL4l0Zt5xU2KKofanJMjVa11r07rKvtLbXblbD+q+
c/janCeyc2qHqPFFkqb8fZDbx/7h+Ygf8SDfRqmyedMRD8nLZwLKvb6ojpiu
2DnsXIXM/abUMUJ1CZbXWtM3bo3n4X3/q49ry4sbF1X9pMw8m2VV8PgwHs9D
P4j0q5u/YJ5rGKSV93dueLB/WqgP9B/qA/PxfOSR6YzpDutF/NvqszKOPekm
f4t3Tf4v3t+oJ9Rfyp4kVYJhmMynwz+MJVMc38hn3EZ5jskwQrMJMQazLMDx
gfVg/0V+wHz2nsUhPuQX/Yf+xHqDOxaWslInok/Ej/Hoj8ruvhWaYD8daFes
9t8LcfWfcxydU3QMkE1KLeq2aa6fOF+Zb5iPRPoX+Rv7i/vIv8iv2H/kF/nA
/mA9ovmGa6xHFI/+xPkkmtfYT9wXrbFexI98oV9xfuH3DOtDv4r6gfXh/MF8
0fxGPkXzAfWN+kK8Iv1jPt6H8xfxifDiWjS/UN/IL/oH9YPxIr1jPxAv8oPf
b6wX8eD/M6xX5GeRH3C+/gFM1y8s
     "], "CountMatrix" -> {{123, 5, 0}, {37, 10, 0}}, 
    "IndicesMatrix" -> {{{1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 16, 17, 18, 20, 
       21, 23, 26, 27, 28, 30, 32, 33, 34, 39, 42, 43, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 68, 71, 72, 
       73, 74, 76, 78, 79, 81, 86, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 
       101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 
       122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 
       138, 140, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 
       156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 173, 
       175}, {24, 40, 59, 94, 95}, {}}, {{14, 19, 22, 29, 31, 35, 36, 37, 38, 
       41, 44, 69, 70, 75, 77, 82, 83, 84, 85, 87, 89, 103, 105, 115, 117, 
       118, 119, 127, 136, 139, 143, 144, 145, 157, 166, 170, 174}, {2, 6, 8, 
       15, 25, 58, 62, 80, 116, 169}, {}}}, "ExtendedClasses" -> {1, 2}, 
    "Weights" -> SparseArray[Automatic, {175}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00018313200000000002`, "SingleEvaluationTime" -> 
    0.0142835000000000011`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.783521209479599*^9, 3.7835291629020925`*^9, 
  3.783529699738256*^9, 3.7835298974984307`*^9, 3.783531062795725*^9, 
  3.7842314872816687`*^9, 3.7843918402753906`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"a8216e7f-ffb4-4182-bfc6-f0dbbbf3b83d"]
}, Open  ]],

Cell["4) The testing measurements are obtained:", "Text",
 CellChangeTimes->{
  3.7842320051828194`*^9},ExpressionUUID->"2e2eb851-2616-47d9-997d-\
693b893f0f7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RFtesting", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", "\"\<Error\>\"", ",", 
     "  ", "\"\<Precision\>\"", ",", "\"\<ConfusionFunction\>\""}], "}"}], 
   "]"}], "//", "ColumnForm"}]], "Input",
 CellChangeTimes->{{3.7835283641941853`*^9, 3.7835283816734133`*^9}, 
   3.783528590672943*^9, {3.783528889647745*^9, 3.7835289061552753`*^9}, {
   3.783529785926817*^9, 3.78352979276612*^9}, {3.7835298502631183`*^9, 
   3.7835299557918673`*^9}, {3.78353000961399*^9, 3.783530032592716*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"5b92b608-1d9e-4907-a7f3-16dcbc6942f2"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.76`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.8541666666666666`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.3225806451612903`"}]}], 
      "\[RightAssociation]"}]},
    {"0.24`"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0.76875`"}], ",", 
       RowBox[{"2", "\[Rule]", "0.6666666666666666`"}]}], 
      "\[RightAssociation]"}]},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "123"}], ",", 
          RowBox[{"2", "\[Rule]", "5"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "37"}], ",", 
          RowBox[{"2", "\[Rule]", "10"}], ",", 
          RowBox[{"Indeterminate", "\[Rule]", "0"}]}], 
         "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  ColumnForm[{0.76, 
    Association[1 -> 0.8541666666666666, 2 -> 0.3225806451612903], 0.24, 
    Association[1 -> 0.76875, 2 -> 0.6666666666666666], 
    Association[
    1 -> Association[1 -> 123, 2 -> 5, Indeterminate -> 0], 2 -> 
     Association[1 -> 37, 2 -> 10, Indeterminate -> 0]]}],
  Editable->False]], "Output",
 CellChangeTimes->{{3.783529929787757*^9, 3.7835299448041396`*^9}, {
   3.783530023911753*^9, 3.783530033605133*^9}, 3.7835310645187397`*^9, 
   3.7842314905646615`*^9, 3.7843918439664574`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"f1b4738f-f3d9-4cd2-9d67-8ff3c4a4bbc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RFtesting", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7835300363735476`*^9, 3.7835300473512487`*^9}, {
  3.7835300773897843`*^9, 3.783530085795961*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"ed0833dd-3dec-4e4f-a6b1-7c8eae47d401"],

Cell[BoxData[
 GraphicsBox[{{{}, 
    GraphicsComplexBox[{{0., 0.7542857142857143}, {0., 0.7542857142857143}, {
     0., 0.7542857142857143}, {0., 0.7542857142857143}, {0., 
     0.7542857142857143}, {0., 0.7542857142857143}, {0.18285714285714286`, 
     0.7902097902097902}, {0.3142857142857143, 0.8333333333333334}, {
     0.44571428571428573`, 0.8969072164948454}, {0.5314285714285715, 
     0.9024390243902439}, {0.7257142857142858, 0.9375}, {0.7257142857142858, 
     0.7542857142857143}}, {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{6, 12, 11, 10, 9, 8, 7}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
         11}]}}}], {}, {}, {}, {}}, {{}, {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsolutePointSize[6], 
       AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
         GraphicsBox[
          {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
           EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], AbsoluteThickness[
           1.]}], DiskBox[{0, 0}, 
            Offset[{2., 2.}, {0., 0.}]]}], {0., 0.}], {{{0., 
        0.7542857142857143}}, {{0., 0.7542857142857143}}, {{0., 
        0.7542857142857143}}, {{0., 0.7542857142857143}}, {{0., 
        0.7542857142857143}}, {{0., 0.7542857142857143}}, {{
        0.18285714285714286`, 0.7902097902097902}}, {{0.3142857142857143, 
        0.8333333333333334}}, {{0.44571428571428573`, 0.8969072164948454}}, {{
        0.5314285714285715, 0.9024390243902439}}, {{0.7257142857142858, 
        0.9375}}}]}, {}}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.22360679774997896`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.22360679774997896`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.31622776601683794`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.31622776601683794`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.3872983346207417`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.3872983346207417}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4472135954999579`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.4472135954999579}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0., 0.7542857142857143}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7542857142857143`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0.`"}, "RowDefault"]}, {
            
            TemplateBox[{"IndeterminateThreshold", "\" = \"", "0.5`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7542857142857143}], 
          Row[{"RejectionRate = ", 0.}], 
          Row[{IndeterminateThreshold, " = ", 0.5}]}], "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.18285714285714286`, 0.7902097902097902}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.7902097902097902`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.18285714285714286`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5477225575051662`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.7902097902097902}], 
          Row[{"RejectionRate = ", 0.18285714285714286`}], 
          Row[{IndeterminateThreshold, " = ", 0.5477225575051662}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.3142857142857143, 0.8333333333333334}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8333333333333334`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.3142857142857143`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.5916079783099616`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8333333333333334}], 
          Row[{"RejectionRate = ", 0.3142857142857143}], 
          Row[{IndeterminateThreshold, " = ", 0.5916079783099616}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.44571428571428573`, 0.8969072164948454}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.8969072164948454`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.44571428571428573`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6324555320336759`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.8969072164948454}], 
          Row[{"RejectionRate = ", 0.44571428571428573`}], 
          Row[{IndeterminateThreshold, " = ", 0.6324555320336759}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.5314285714285715, 0.9024390243902439}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9024390243902439`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.5314285714285715`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6708203932499369`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9024390243902439}], 
          Row[{"RejectionRate = ", 0.5314285714285715}], 
          Row[{IndeterminateThreshold, " = ", 0.6708203932499369}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{0.7257142857142858, 0.9375}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "0.9375`"}, "RowDefault"]}, {
            
            TemplateBox[{"\"RejectionRate = \"", "0.7257142857142858`"}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7071067811865476`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9375}], 
          Row[{"RejectionRate = ", 0.7257142857142858}], 
          Row[{IndeterminateThreshold, " = ", 0.7071067811865476}]}], 
        "Tooltip"]& ]}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.7451250000000001},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImagePadding->All,
  ImageSize->300,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.7257142857142858}, {0.7542857142857143, 0.9375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.7835300478549585`*^9, 3.783530086522543*^9, 
  3.7835310667584496`*^9, 3.7842314944862814`*^9, 3.7843918504608164`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"0bbc9d3e-961f-4a4a-94c5-6bc3eb644eec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RFtesting", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.783530051316774*^9, 3.7835300709394903`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"142d5c34-ee7d-465f-b812-c4c5254953c8"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8827071637167037, 0.6570696031049001, 
   0.20015054939612398`}, {0.9188988059051748, 0.8119838271578941, 
   0.518338527894502}}, {{1., 0.42, 0.}, {0.9381245352471166, 
   0.8846329134859466, 0.7073050642484522}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["123", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "123", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.76875`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.9609375`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.8541666666666666`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{123, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.76875}], 
         Row[{"Recall = ", 0.9609375}], 
         Row[{"FScore = ", 0.8541666666666666}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["37", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "37", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.23125`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.7872340425531915`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{37, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.23125}], 
         Row[{"Row fraction = ", 0.7872340425531915}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["5", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "5", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3333333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.0390625`"}, "RowDefault"]}},
          GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{5, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.3333333333333333}], 
         Row[{"Row fraction = ", 0.0390625}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["10", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "10", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.2127659574468085`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.3225806451612903`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{10, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.6666666666666666}], 
         Row[{"Recall = ", 0.2127659574468085}], 
         Row[{"FScore = ", 0.3225806451612903}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"128", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.9609375`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{128, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.9609375}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"47", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.2127659574468085`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{47, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.2127659574468085}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "160", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.76875`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{160, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.76875}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "15", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{15, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.6666666666666666}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}}, {{1.5, 
       FormBox["128", TraditionalForm]}, {0.5, 
       FormBox["47", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["160", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["15", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7835300713812294`*^9, 3.783531070163497*^9, 
  3.7842314973454366`*^9, 3.7843918539419484`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"4990a51c-7d63-47d7-b23b-6131394000fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observations:", "Subsection",
 CellChangeTimes->{{3.784387497662454*^9, 
  3.7843875004934464`*^9}},ExpressionUUID->"745f8d13-d3a8-418e-884b-\
f3cb104879be"],

Cell["\<\
1) The Classifier measurements show that 76% of the data is classified \
correctly and 24% data is classified incorrectly. 
2) The Confusion matrix shows : 
\ta) 123 data correctly predicted to be belonging to Dataset=1 and 5 data \
belonging to Dataset =1 has been incorrectly classified to be belonging to \
Dataset =2
\tb) 10  data correctly predicted to be belonging to Dataset=2 and 37 data \
belonging to Dataset =2 has been incorrectly classified to be belonging to \
Dataset =1
3) F-score of Dataset=1 is calculated as 0.85 and Dataset=2 is 0.32.\
\>", "Text",
 CellChangeTimes->{{3.7842320178087845`*^9, 3.784232041339667*^9}, {
  3.78423209614005*^9, 3.784232119075242*^9}, {3.784387494251943*^9, 
  3.784387494436886*^9}},ExpressionUUID->"3e15aee2-813a-40d8-a1ce-\
839291c48014"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Subchapter",
 CellChangeTimes->{{3.7842337175041847`*^9, 
  3.7842337276483994`*^9}},ExpressionUUID->"7d09092b-1a75-49cf-badf-\
cd84c7412002"],

Cell["\<\
The Gaussian Naive Bayes algorithm had the lowest accuracy level and so \
incorrectly classified 49 cases. The Support Vector Machine Algorithm and \
Nearest Neighbour algorithm had around 73% accuracy but both of them failed \
to identify any data belonging to Class \[OpenCurlyDoubleQuote]2\
\[CloseCurlyDoubleQuote] and so all were identified to be belonging to Class \
\[OpenCurlyDoubleQuote]1\[CloseCurlyDoubleQuote]. All the models had almost \
same accuracy but the Random Forest algorithm had the highest accuracy rate \
of 76% and correctly identified most of the cases(133 out of 175). The \
training dataset needs to be of bigger size and properly created by adding \
different cases for all the 10 variables so that the model can be trained to \
understand significance of each variable and hence classify correctly. \
\>", "Text",
 CellChangeTimes->{{3.7842341607497215`*^9, 3.7842343638509035`*^9}, {
  3.7842348046816897`*^9, 3.7842348229302597`*^9}, {3.784388109380539*^9, 
  3.784388159759892*^9}, {3.7843881956388392`*^9, 3.7843883599543753`*^9}, {
  3.784391886783635*^9, 
  3.7843919640931964`*^9}},ExpressionUUID->"a24c18d5-ec54-4bd7-bbab-\
48a806f82321"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bibliography:", "Chapter",
 CellFrame->{{0, 0}, {0, 2}},
 CellChangeTimes->{{3.7842251181089096`*^9, 3.784225124030361*^9}, {
  3.7842268681094713`*^9, 3.784226869515622*^9}, {3.7842273284780083`*^9, 
  3.784227329385472*^9}, {3.7842273621946354`*^9, 3.7842273629262114`*^9}, {
  3.7842349104196477`*^9, 3.784234911278165*^9}, {3.784235177705126*^9, 
  3.784235178387748*^9}, {3.784235742443447*^9, 3.7842357435258083`*^9}, {
  3.7842361774195347`*^9, 
  3.7842361785569143`*^9}},ExpressionUUID->"2ba07c62-f6ee-4059-a059-\
72b4aa16b740"],

Cell[CellGroupData[{

Cell[TextData[{
 "ht",
 StyleBox["tps://www.healthline.com/health/liver-function-tests#types", 
  "ItemNumbered"]
}], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.78438805111525*^9}},ExpressionUUID->"95562457-0dc1-4a46-82a2-\
fcb750ae836c"],

Cell[TextData[StyleBox["https://www.guidelinesinpractice.co.uk/liver-disease/\
liver-blood-tests-how-to-interpret-abnormal-results/453912.article", \
"ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.784388053978528*^9}},ExpressionUUID->"50947d98-d46a-46d1-a534-\
3d210a8a1fa9"],

Cell[TextData[StyleBox["https://timesofindia.indiatimes.com/life-style/health-\
fitness/health-news/is-liver-disease-the-next-major-lifestyle-disease-of-\
india-after-diabetes-and-bp/articleshow/58122706.cms", "ItemNumbered"]], \
"ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.784388056537867*^9}},ExpressionUUID->"8ebea3b1-8f3e-428f-a86d-\
d1550eada91a"],

Cell[TextData[StyleBox["https://machinelearningmastery.com/classification-\
accuracy-is-not-enough-more-performance-measures-you-can-use/", \
"ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880593931417`*^9}},ExpressionUUID->"3ad4a17e-b249-4ef6-a3ed-\
ab1d2e2ebf38"],

Cell[TextData[StyleBox["https://www.geeksforgeeks.org/naive-bayes-classifiers/\
", "ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880619964886`*^9}},ExpressionUUID->"cba72706-da11-41e7-b151-\
c883b8ebfd44"],

Cell[TextData[StyleBox["https://towardsdatascience.com/decision-tree-\
classification-de64fc4d5aac", "ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.784388064499858*^9}},ExpressionUUID->"c08edb45-6a0b-405a-8638-\
36c18ccfa0a4"],

Cell[TextData[StyleBox["https://en.wikipedia.org/wiki/Decision_tree_learning",\
 "ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880675230956`*^9}},ExpressionUUID->"30ffef93-a67c-439f-a2ad-\
3717d388fbfe"],

Cell[TextData[StyleBox["https://towardsdatascience.com/a-simple-introduction-\
to-k-nearest-neighbors-algorithm-b3519ed98e", "ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880697825403`*^9}},ExpressionUUID->"cc35b7d0-ba74-4245-a58e-\
cbd6129c17f3"],

Cell[TextData[StyleBox["https://towardsdatascience.com/neural-network-\
algorithms-learn-how-to-train-ann-736dab9e6299", "ItemNumbered"]], \
"ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880721739206`*^9}},ExpressionUUID->"9cb361fc-6115-47f6-aab8-\
9336d0d48cc3"],

Cell[TextData[{
 StyleBox["http", "ItemNumbered"],
 "s://www.analyticsvidhya.com/blog/2017/09/understaing-support-vector-machine-\
example-code/"
}], "ItemNumbered",
 CellChangeTimes->{
  3.7842361821648445`*^9, {3.784387986123144*^9, 3.784388000156089*^9}, {
   3.7843880505953703`*^9, 
   3.7843880717620273`*^9}},ExpressionUUID->"97bbc109-5c5d-409d-afe1-\
5ba4180798c0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1302, 709},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
SpellingDictionaries->{"CorrectWords"->{
 "paient", "coeeficient", "algotraining", "algotesting"}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 608, 11, 165, "Title",ExpressionUUID->"1134b464-5fd7-4d88-93a1-1b28c2150197"],
Cell[CellGroupData[{
Cell[1213, 37, 188, 4, 77, "Chapter",ExpressionUUID->"811ac17f-90f4-46d2-89f9-591b73aeec41"],
Cell[1404, 43, 1999, 32, 254, "Text",ExpressionUUID->"8356d147-77c7-48f4-88bd-8c88b6a46f14"],
Cell[CellGroupData[{
Cell[3428, 79, 220, 4, 64, "Subchapter",ExpressionUUID->"3b89fb54-b9dd-40b7-8ecb-8e3e6d42391b"],
Cell[3651, 85, 2366, 38, 430, "Text",ExpressionUUID->"c75e66b2-1382-45fb-aa2c-165ecb0bec1d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6066, 129, 188, 4, 77, "Chapter",ExpressionUUID->"a5cbcd1c-7b1b-4c07-9f15-fb14aad6ea20"],
Cell[6257, 135, 274, 6, 34, "Text",ExpressionUUID->"ddc1294a-2bef-47b6-b059-37dc4260d942"],
Cell[CellGroupData[{
Cell[6556, 145, 1038, 24, 86, "Input",ExpressionUUID->"103e2e9c-c88a-4979-84de-4c50ba8b9f26"],
Cell[7597, 171, 40176, 807, 135, "Output",ExpressionUUID->"13498643-0177-4336-a5a2-92b168b7a536"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47822, 984, 204, 4, 77, "Chapter",ExpressionUUID->"fa940175-716a-412c-9184-cdb1bde96239"],
Cell[CellGroupData[{
Cell[48051, 992, 284, 4, 64, "Subchapter",ExpressionUUID->"c140a0d9-9246-4897-8a29-ae6fe17c7200"],
Cell[48338, 998, 697, 11, 78, "Text",ExpressionUUID->"2c1e59ab-e90a-4795-8c79-0f7fa03222a9"],
Cell[49038, 1011, 2460, 58, 200, "Input",ExpressionUUID->"1d2e0337-ec25-4c24-9510-3234781b41da"],
Cell[CellGroupData[{
Cell[51523, 1073, 159, 3, 44, "Subsubsection",ExpressionUUID->"d41bba06-aa93-4a22-871c-1dcb3751db11"],
Cell[CellGroupData[{
Cell[51707, 1080, 600, 9, 28, "Input",ExpressionUUID->"a47297f3-b214-4ada-9191-60eb52531433"],
Cell[52310, 1091, 1606, 28, 131, "Print",ExpressionUUID->"bed8a748-c31e-4caf-a1db-9e3a42185645"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53953, 1124, 284, 5, 28, "Input",ExpressionUUID->"30f388e8-07fc-46cb-b92c-a8365a6403f5"],
Cell[54240, 1131, 5102, 128, 238, "Output",ExpressionUUID->"22172044-913d-46b8-be56-cee9c5ea83eb"]
}, Open  ]],
Cell[59357, 1262, 613, 11, 78, "Text",ExpressionUUID->"af32f34d-4e57-4b3d-88f8-f7b1dbfd52f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60007, 1278, 169, 3, 44, "Subsubsection",ExpressionUUID->"2e093b9b-a8c6-41b6-b104-a39a2f68c957"],
Cell[CellGroupData[{
Cell[60201, 1285, 386, 7, 28, "Input",ExpressionUUID->"36cb3839-4bae-4ff4-a2a8-fb4feb9af565"],
Cell[60590, 1294, 1380, 24, 131, "Print",ExpressionUUID->"18a89200-099e-481f-9919-e0bfc2344809"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62007, 1323, 1422, 35, 67, "Input",ExpressionUUID->"115a1f33-dcd4-4cc2-af9e-b97ab9a36a3b"],
Cell[63432, 1360, 12051, 281, 263, "Output",ExpressionUUID->"dab2ce31-debb-46be-9dfd-aec0846ef7fa"]
}, Open  ]],
Cell[75498, 1644, 1250, 19, 100, "Text",ExpressionUUID->"e9d55fc4-31b7-4ab3-98e9-510564d26dd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76785, 1668, 170, 3, 44, "Subsubsection",ExpressionUUID->"b6b60ec4-b267-4a65-8f5d-6d99057e96ef"],
Cell[CellGroupData[{
Cell[76980, 1675, 389, 8, 28, "Input",ExpressionUUID->"31ad2488-ea26-4961-a68d-d08d2def06e7"],
Cell[77372, 1685, 1422, 25, 131, "Print",ExpressionUUID->"0f2f5f17-55ad-442b-8caf-8bc215031c07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78831, 1715, 1357, 35, 86, "Input",ExpressionUUID->"50e67bae-23e1-4f99-a22f-133eb16810a5"],
Cell[80191, 1752, 11850, 277, 263, "Output",ExpressionUUID->"ab914df3-d475-4acc-8885-23473e417a7b"]
}, Open  ]],
Cell[92056, 2032, 744, 12, 78, "Text",ExpressionUUID->"cb47702a-99c4-4e70-8031-1f3d041547f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92837, 2049, 174, 3, 44, "Subsubsection",ExpressionUUID->"01fd4b59-109d-4e2d-b1b5-6c93efdd3ab4"],
Cell[CellGroupData[{
Cell[93036, 2056, 398, 8, 28, "Input",ExpressionUUID->"4465c666-9cf8-4f0d-a92a-45cc04f8502d"],
Cell[CellGroupData[{
Cell[93459, 2068, 1448, 27, 131, "Print",ExpressionUUID->"7aecafb5-fe91-4a51-bebf-d667596bc2db"],
Cell[94910, 2097, 1376, 25, 131, "Print",ExpressionUUID->"1f0bd931-cc14-434c-a7e6-94973f4ade44"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[96335, 2128, 351, 7, 28, "Input",ExpressionUUID->"48526865-53f1-4c44-b4df-1e05e06299db"],
Cell[96689, 2137, 5635, 140, 231, "Output",ExpressionUUID->"1dff94df-631d-490c-9abf-4bafda3bf479"]
}, Open  ]],
Cell[102339, 2280, 683, 11, 56, "Text",ExpressionUUID->"29902a4a-0246-4306-8aac-d37b53b7887e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103059, 2296, 177, 3, 44, "Subsubsection",ExpressionUUID->"70841201-1ab5-4acf-9945-f02b6e7b0951"],
Cell[CellGroupData[{
Cell[103261, 2303, 326, 7, 28, "Input",ExpressionUUID->"1e60c73d-cbee-4ff0-a035-9bb77e69959d"],
Cell[103590, 2312, 1264, 23, 131, "Print",ExpressionUUID->"d47b61b6-a5a1-4109-8bdf-fb9cf2bcd96e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104891, 2340, 1407, 36, 67, "Input",ExpressionUUID->"9caf86a6-1a94-45fa-bdc4-ad21eedc6008"],
Cell[106301, 2378, 12292, 284, 263, "Output",ExpressionUUID->"78ea49d3-73ac-42d7-88f4-6bc5530535be"]
}, Open  ]],
Cell[118608, 2665, 901, 15, 78, "Text",ExpressionUUID->"8fc65303-6c49-45f7-be77-62a306f3a696"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119546, 2685, 177, 3, 44, "Subsubsection",ExpressionUUID->"9cad3542-2868-49c6-929c-5b002b9fba92"],
Cell[CellGroupData[{
Cell[119748, 2692, 277, 6, 28, "Input",ExpressionUUID->"d573f906-b451-4ad5-9bfa-7833c990e094"],
Cell[120028, 2700, 1312, 23, 131, "Print",ExpressionUUID->"2a587593-ff33-48c9-9829-288d80b2e697"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121377, 2728, 1373, 36, 67, "Input",ExpressionUUID->"8cf296d2-07ec-4c15-8cd3-bab3dbdf1df9"],
Cell[122753, 2766, 13038, 300, 263, "Output",ExpressionUUID->"50576fbc-b572-4eb5-a027-17067a9e4c13"]
}, Open  ]],
Cell[135806, 3069, 759, 13, 78, "Text",ExpressionUUID->"36517b88-8f52-4cd9-9af7-834f31bf21f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136602, 3087, 217, 4, 44, "Subsubsection",ExpressionUUID->"6fcf7359-d62d-46b4-9dce-d9faf410a2ec"],
Cell[CellGroupData[{
Cell[136844, 3095, 313, 6, 28, "Input",ExpressionUUID->"1d14a544-5270-4a81-82b2-6e3fbf1acb95"],
Cell[137160, 3103, 1355, 24, 131, "Print",ExpressionUUID->"8307e914-fdd6-4a53-ab28-61799af76e11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138552, 3132, 291, 5, 28, "Input",ExpressionUUID->"8ceb26b9-6475-4793-beb7-f0f08f92073e"],
Cell[138846, 3139, 5162, 130, 239, "Output",ExpressionUUID->"1c092b23-2712-451c-b0a8-adbccc8f160d"]
}, Open  ]],
Cell[144023, 3272, 486, 9, 56, "Text",ExpressionUUID->"35688e78-aedd-4804-be9b-f785e779b3d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144546, 3286, 157, 3, 44, "Subsubsection",ExpressionUUID->"95e09163-1e21-43cc-8f9c-105ccb15e8f6"],
Cell[CellGroupData[{
Cell[144728, 3293, 250, 4, 28, "Input",ExpressionUUID->"6fdf06be-bd20-4ed8-b7c7-53309232d710"],
Cell[144981, 3299, 1317, 23, 131, "Print",ExpressionUUID->"90d59e4b-343f-4f04-a367-3405e98d2d07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146335, 3327, 284, 5, 28, "Input",ExpressionUUID->"1ac93663-053a-43d7-98df-7f97bdc373a5"],
Cell[146622, 3334, 5130, 129, 244, "Output",ExpressionUUID->"8ddf773c-c265-4f98-ad46-64f4f12fd99b"]
}, Open  ]],
Cell[151767, 3466, 546, 10, 56, "Text",ExpressionUUID->"c8663e0a-b0e4-4c4d-a102-bee205b2ac88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152350, 3481, 209, 3, 44, "Subsubsection",ExpressionUUID->"2c033917-5bfb-4388-aaef-d3ca3a25aa6e"],
Cell[CellGroupData[{
Cell[152584, 3488, 277, 6, 28, "Input",ExpressionUUID->"0a593e19-ee78-4e49-8c22-94bab8d56aca"],
Cell[152864, 3496, 1325, 23, 131, "Print",ExpressionUUID->"2cf2d6d0-3e4b-4bbb-827d-fed12397debd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154226, 3524, 282, 6, 28, "Input",ExpressionUUID->"96e52fb0-4b7c-4df7-93fe-377dd2b3740e"],
Cell[154511, 3532, 5139, 129, 236, "Output",ExpressionUUID->"0da193a2-22d2-468d-83c8-11aaa242f3b4"]
}, Open  ]],
Cell[159665, 3664, 445, 8, 56, "Text",ExpressionUUID->"dd39ac8c-cffc-4e32-b9ba-98a75111a7dc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[160159, 3678, 221, 4, 64, "Subchapter",ExpressionUUID->"7c249b8f-5ea7-4de3-804a-9282eda8f4bb"],
Cell[CellGroupData[{
Cell[160405, 3686, 188, 3, 67, "Section",ExpressionUUID->"36de3025-3293-44c5-ba9d-ee64227c3843"],
Cell[160596, 3691, 332, 7, 34, "Text",ExpressionUUID->"3475a20a-8786-4634-bcd6-b3d4844836fd"],
Cell[CellGroupData[{
Cell[160953, 3702, 818, 21, 48, "Input",ExpressionUUID->"40bd974f-b70d-43f7-af81-34696a32b161"],
Cell[161774, 3725, 11866, 251, 230, "Output",ExpressionUUID->"c2a71fea-3ed5-4b7c-af95-0a8eaa878090"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[173689, 3982, 161, 3, 67, "Section",ExpressionUUID->"169cdd07-2f01-4eae-a395-d7d0f39594cd"],
Cell[173853, 3987, 467, 9, 34, "Text",ExpressionUUID->"811aa3c7-7ee0-4240-8b0d-1e767454f61b"],
Cell[CellGroupData[{
Cell[174345, 4000, 1295, 35, 67, "Input",ExpressionUUID->"59909080-0434-4577-9040-3055eede558c"],
Cell[175643, 4037, 11996, 254, 230, "Output",ExpressionUUID->"8fe2f7eb-ef80-472b-b71d-6edcc2791cd3"]
}, Open  ]],
Cell[187654, 4294, 257, 6, 34, "Text",ExpressionUUID->"dc5937be-6839-4c37-8051-9b46d561c4ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187948, 4305, 157, 3, 67, "Section",ExpressionUUID->"f4229443-9764-4cba-8821-a1537d847b2e"],
Cell[188108, 4310, 408, 8, 56, "Text",ExpressionUUID->"e39c0842-cf02-4390-a5e3-828e4ba9e838"],
Cell[CellGroupData[{
Cell[188541, 4322, 301, 4, 53, "Subsection",ExpressionUUID->"b81eb4e2-c90f-4d83-9d34-6d8537c63af9"],
Cell[188845, 4328, 267, 6, 34, "Text",ExpressionUUID->"04789e18-623a-4ea8-a7c3-37ea261163f5"],
Cell[CellGroupData[{
Cell[189137, 4338, 1247, 30, 48, "Input",ExpressionUUID->"18ae640d-c957-4191-ae06-e0a4a7f58a6c"],
Cell[190387, 4370, 281, 4, 32, "Output",ExpressionUUID->"124478c5-3197-4546-b332-2e4d79e24925"],
Cell[190671, 4376, 298, 4, 32, "Output",ExpressionUUID->"c95ad1a1-dfb0-45d1-bde7-4be516e2408d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[191018, 4386, 256, 4, 53, "Subsection",ExpressionUUID->"636ac158-e0af-4bc8-954b-70fa8e94c96e"],
Cell[191277, 4392, 221, 5, 34, "Text",ExpressionUUID->"2ce0d749-1b55-4692-8093-7c011421b934"],
Cell[CellGroupData[{
Cell[191523, 4401, 1074, 29, 67, "Input",ExpressionUUID->"77900036-154e-4475-a300-b30484dd0120"],
Cell[192600, 4432, 279, 4, 32, "Output",ExpressionUUID->"c3e34df4-2c38-4f41-bdbd-76a7d5ef8c76"],
Cell[192882, 4438, 295, 4, 32, "Output",ExpressionUUID->"6c1c6d5c-8f2b-4532-8d63-bdafaf31b6ed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[193226, 4448, 354, 5, 53, "Subsection",ExpressionUUID->"8bbaea56-68a4-4453-9868-d66aca0ee34c"],
Cell[193583, 4455, 218, 5, 34, "Text",ExpressionUUID->"fa662605-3425-4571-be74-2d66e906b1ad"],
Cell[CellGroupData[{
Cell[193826, 4464, 1375, 33, 67, "Input",ExpressionUUID->"ec2177f3-c0f4-4ed9-8357-eb2454bb5dbc"],
Cell[195204, 4499, 296, 4, 32, "Output",ExpressionUUID->"42be607e-e117-40ad-b4e7-38cabac6f7ce"],
Cell[195503, 4505, 314, 4, 32, "Output",ExpressionUUID->"7c145736-95b0-42f7-9974-55ed4dcbefee"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[195866, 4515, 359, 5, 53, "Subsection",ExpressionUUID->"9246f959-5bbf-409a-ba2d-8fc74040afff"],
Cell[196228, 4522, 223, 5, 34, "Text",ExpressionUUID->"acb5293d-63e9-426d-b920-b52afe044457"],
Cell[CellGroupData[{
Cell[196476, 4531, 1401, 33, 67, "Input",ExpressionUUID->"f4d1e162-9bf6-4da7-8811-a7620b37d4d9"],
Cell[197880, 4566, 356, 5, 32, "Output",ExpressionUUID->"7aef594e-3bce-48d4-be58-5db7da796f01"],
Cell[198239, 4573, 360, 5, 32, "Output",ExpressionUUID->"c6e9e05f-8001-4367-a2ff-31dc5184cc1f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[198648, 4584, 295, 4, 53, "Subsection",ExpressionUUID->"3f28aadc-c4b8-4646-8838-7f4277afdec5"],
Cell[198946, 4590, 254, 6, 34, "Text",ExpressionUUID->"4faa07b1-a3ed-4e3d-a1c4-2daf0867996c"],
Cell[CellGroupData[{
Cell[199225, 4600, 5307, 131, 181, "Input",ExpressionUUID->"49522a27-7741-4d09-bca6-8b7302a6c780"],
Cell[204535, 4733, 30466, 778, 504, "Output",ExpressionUUID->"0efe5e5e-019a-4412-875e-4ecc4caa452b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[235050, 5517, 163, 3, 53, "Subsection",ExpressionUUID->"2637ed95-4a77-47d8-83d2-4b0161aabcdd"],
Cell[235216, 5522, 1060, 17, 122, "Text",ExpressionUUID->"2d533791-64ab-42be-afe0-f7c4ea8db745"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[236325, 5545, 200, 3, 67, "Section",ExpressionUUID->"27b9ed02-aaf3-4a84-98e7-648b0df5dbf8"],
Cell[236528, 5550, 397, 8, 34, "Text",ExpressionUUID->"17729471-4a7c-45e9-96ae-cc717f98f00c"],
Cell[CellGroupData[{
Cell[236950, 5562, 187, 3, 53, "Subsection",ExpressionUUID->"23ca9b93-e588-46a4-aa1d-894b93b4a7e8"],
Cell[CellGroupData[{
Cell[237162, 5569, 5166, 128, 200, "Input",ExpressionUUID->"ac52f590-0dcd-496a-984c-24f41567d464"],
Cell[242331, 5699, 10180, 227, 504, "Output",ExpressionUUID->"3e2c764a-05ce-4180-bd7e-a2d8fb82627d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[252560, 5932, 167, 3, 53, "Subsection",ExpressionUUID->"6907af44-b486-47b9-b4b0-afbeadcd14bb"],
Cell[CellGroupData[{
Cell[252752, 5939, 470, 12, 28, "Input",ExpressionUUID->"2ea159bf-34bc-413e-b16b-ab043fb0e7e1"],
Cell[253225, 5953, 271, 3, 32, "Output",ExpressionUUID->"f26777f6-105d-4d8c-9b48-4aed20079e0d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[253545, 5962, 165, 3, 53, "Subsection",ExpressionUUID->"82951269-61c8-4248-8357-76d5c415ac7c"],
Cell[253713, 5967, 1202, 19, 100, "Text",ExpressionUUID->"a7ed29dc-356e-42a9-a22d-95200347dafa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[254964, 5992, 328, 6, 67, "Section",ExpressionUUID->"3278cb21-c0fd-440c-adb9-355b85a7574c"],
Cell[255295, 6000, 415, 8, 34, "Text",ExpressionUUID->"900a7b5e-7e99-41fe-bbe3-97b69e739896"],
Cell[CellGroupData[{
Cell[255735, 6012, 187, 3, 53, "Subsection",ExpressionUUID->"ab9a136c-79db-4519-a7ff-2f31da7c10ac"],
Cell[CellGroupData[{
Cell[255947, 6019, 5119, 125, 181, "Input",ExpressionUUID->"2cc93d55-773d-4f0e-8186-59f15aa1a262"],
Cell[261069, 6146, 10708, 235, 504, "Output",ExpressionUUID->"0c17ec7e-7c2a-40ef-bc36-354b4fb70aa3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[271826, 6387, 167, 3, 53, "Subsection",ExpressionUUID->"014ce13f-7a6a-4edb-b35e-c8d14420e06c"],
Cell[CellGroupData[{
Cell[272018, 6394, 627, 15, 28, "Input",ExpressionUUID->"eb4d0bcd-58f6-4c10-b0b1-0a056a657c9b"],
Cell[272648, 6411, 345, 4, 32, "Output",ExpressionUUID->"0d0dcac3-868f-4555-ae83-864af957b8b3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[273042, 6421, 165, 3, 53, "Subsection",ExpressionUUID->"8100133f-bd92-456d-8c8d-d82913b9dc1c"],
Cell[273210, 6426, 1228, 18, 122, "Text",ExpressionUUID->"f2daa705-5d3f-4e6e-88aa-6776b37bfec2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[274487, 6450, 371, 7, 67, "Section",ExpressionUUID->"9be95d45-5e07-416a-a630-4a5ea783e17a"],
Cell[274861, 6459, 409, 8, 34, "Text",ExpressionUUID->"33a2264b-ab67-4295-92bc-c01e314174e8"],
Cell[CellGroupData[{
Cell[275295, 6471, 187, 3, 53, "Subsection",ExpressionUUID->"edc0e92a-68ac-4a0a-b905-b545d953e3c1"],
Cell[CellGroupData[{
Cell[275507, 6478, 5169, 126, 181, "Input",ExpressionUUID->"cbb27dec-74b8-44c4-9139-61c6e09974a9"],
Cell[280679, 6606, 11133, 243, 504, "Output",ExpressionUUID->"ee97365c-1232-4639-af7d-7c7628fb6027"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[291861, 6855, 167, 3, 53, "Subsection",ExpressionUUID->"44603e8d-39c1-48e3-9e79-5748391bf33b"],
Cell[CellGroupData[{
Cell[292053, 6862, 671, 15, 28, "Input",ExpressionUUID->"d7b2a6b5-d7de-4344-b602-03a4c71576d6"],
Cell[292727, 6879, 368, 5, 32, "Output",ExpressionUUID->"5f031258-001d-4bc2-89e2-6c1800b3044f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293144, 6890, 163, 3, 53, "Subsection",ExpressionUUID->"9a5bb204-e65a-429c-9516-bc4f7db55e0c"],
Cell[293310, 6895, 269, 6, 34, "Text",ExpressionUUID->"e1c0295a-77ad-45e1-8ed2-06327b02017f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293628, 6907, 344, 5, 67, "Section",ExpressionUUID->"2731bf0a-438f-4e9b-b046-4928d712f73d"],
Cell[293975, 6914, 386, 8, 34, "Text",ExpressionUUID->"33e46e0a-743e-44c4-bd19-9b40dfd6aff7"],
Cell[CellGroupData[{
Cell[294386, 6926, 188, 3, 53, "Subsection",ExpressionUUID->"db260ddd-1f5b-43d4-9004-4b818edb5153"],
Cell[CellGroupData[{
Cell[294599, 6933, 4966, 118, 181, "Input",ExpressionUUID->"79cf1023-b5ce-495c-b85f-66619b1996a9"],
Cell[299568, 7053, 10438, 232, 504, "Output",ExpressionUUID->"ef243b47-e227-46f5-84c1-34feab09d088"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[310055, 7291, 167, 3, 53, "Subsection",ExpressionUUID->"6f2afb8f-ef18-4a70-ad66-fdcbb1ed693f"],
Cell[CellGroupData[{
Cell[310247, 7298, 697, 16, 28, "Input",ExpressionUUID->"6395c730-5b98-446c-80a7-36e04247aa38"],
Cell[310947, 7316, 399, 5, 32, "Output",ExpressionUUID->"de8296ed-5044-4d64-bd1d-76f850b5c370"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[311395, 7327, 163, 3, 53, "Subsection",ExpressionUUID->"20ab2801-052f-4a25-8749-566a8e7c4afc"],
Cell[311561, 7332, 1019, 16, 78, "Text",ExpressionUUID->"93aa3701-c131-4619-b981-15cfe6c3c540"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[312629, 7354, 354, 5, 67, "Section",ExpressionUUID->"cdfa4bed-35d0-416c-a092-55f5b09ccdff"],
Cell[312986, 7361, 381, 8, 34, "Text",ExpressionUUID->"f00b5c61-699b-482b-a161-5e06d3c8ef82"],
Cell[CellGroupData[{
Cell[313392, 7373, 162, 3, 53, "Subsection",ExpressionUUID->"d626c319-c756-4dd1-86c3-075e59414a6d"],
Cell[CellGroupData[{
Cell[313579, 7380, 5113, 123, 181, "Input",ExpressionUUID->"15e5da50-3243-4fc5-ad95-c5c0bd1ce00f"],
Cell[318695, 7505, 10684, 236, 504, "Output",ExpressionUUID->"c14b9f39-88ed-4875-811a-4892feae2ff5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[329428, 7747, 169, 3, 53, "Subsection",ExpressionUUID->"f83a70a0-eb50-4e3a-b49b-55ff30654cdc"],
Cell[CellGroupData[{
Cell[329622, 7754, 707, 15, 28, "Input",ExpressionUUID->"8ff51229-8902-409f-96ff-06476a7fa872"],
Cell[330332, 7771, 423, 5, 32, "Output",ExpressionUUID->"8f921063-e67e-471a-bea7-b105edc59806"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[330804, 7782, 163, 3, 53, "Subsection",ExpressionUUID->"8b4e346d-026c-42e3-857b-e938d2fda163"],
Cell[330970, 7787, 713, 11, 56, "Text",ExpressionUUID->"1e909174-c6f3-4c3d-bfe8-44e97390bb34"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[331732, 7804, 420, 8, 67, "Section",ExpressionUUID->"e0b9ae5e-2224-4348-b540-7232043c1143"],
Cell[332155, 7814, 388, 8, 34, "Text",ExpressionUUID->"0dab747d-0c4a-440e-9121-478ab085eedf"],
Cell[CellGroupData[{
Cell[332568, 7826, 162, 3, 53, "Subsection",ExpressionUUID->"1e5083e0-915f-4f8f-b0d2-031b47d798d2"],
Cell[CellGroupData[{
Cell[332755, 7833, 5205, 126, 181, "Input",ExpressionUUID->"00fa3654-fa1a-4668-82c0-0ff5d4be2dab"],
Cell[337963, 7961, 10811, 237, 504, "Output",ExpressionUUID->"17c9c3f2-a0fc-437a-8b42-f7729f195c07"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[348823, 8204, 167, 3, 53, "Subsection",ExpressionUUID->"fa03df1f-c9cd-4349-b872-e31c4a901928"],
Cell[CellGroupData[{
Cell[349015, 8211, 816, 17, 28, "Input",ExpressionUUID->"3cf3614c-5c04-4e70-a638-cd98c41e380c"],
Cell[349834, 8230, 441, 6, 32, "Output",ExpressionUUID->"1db754f0-5415-45df-b9e1-4a4440064a43"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[350324, 8242, 163, 3, 53, "Subsection",ExpressionUUID->"9e053ce3-c7bc-4367-a1e4-46cd8133b5b8"],
Cell[350490, 8247, 439, 8, 34, "Text",ExpressionUUID->"6549ecc0-0763-48a1-a3f1-101a423fa0f4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[350978, 8261, 162, 3, 67, "Section",ExpressionUUID->"db02a446-fc3d-4ff0-9a7c-e9916eaf9bd9"],
Cell[351143, 8266, 678, 15, 188, "Text",ExpressionUUID->"147cfddf-0a7a-4c7c-b697-513ba9200297"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[351882, 8288, 195, 4, 77, "Chapter",ExpressionUUID->"b3344685-4f73-41ff-9373-dc0fd39b6040"],
Cell[352080, 8294, 1525, 25, 254, "Text",ExpressionUUID->"c06058ce-bce4-4c02-abb7-518207a100ab"],
Cell[CellGroupData[{
Cell[353630, 8323, 386, 6, 64, "Subchapter",ExpressionUUID->"ec222ebb-41ab-44fd-ae36-ce8c16ec551b"],
Cell[354019, 8331, 568, 11, 56, "Text",ExpressionUUID->"828a1ef4-a378-4815-a7aa-df67ae68a8dd"],
Cell[354590, 8344, 3229, 88, 200, "Input",ExpressionUUID->"6deccd1c-7d59-4042-bc78-282b0296941d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357856, 8437, 197, 3, 64, "Subchapter",ExpressionUUID->"451f3f9d-befa-4f1c-9703-9195e06ab15e"],
Cell[358056, 8442, 399, 8, 34, "Text",ExpressionUUID->"cc005961-3a4b-4acb-8fcf-fb4a638d188d"],
Cell[358458, 8452, 1871, 49, 143, "Input",ExpressionUUID->"c0514da9-9e96-49a0-a584-d8314602ec80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360366, 8506, 346, 5, 64, "Subchapter",ExpressionUUID->"e141022e-463f-4ba3-99cc-806be17a7e68"],
Cell[360715, 8513, 1573, 26, 188, "Text",ExpressionUUID->"90c512ac-f872-4cb8-964d-60d5b28b9a9e"],
Cell[362291, 8541, 2211, 49, 105, "Input",ExpressionUUID->"4f4a999f-6108-4b18-a508-57d3e4407b0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[364539, 8595, 175, 3, 64, "Subchapter",ExpressionUUID->"1d81bae0-d871-4c0b-a162-36ff5ca3fc3f"],
Cell[364717, 8600, 2957, 64, 659, "Text",ExpressionUUID->"68fb0df7-81a8-48e7-8aeb-c49e62ae6307"],
Cell[CellGroupData[{
Cell[367699, 8668, 171, 3, 67, "Section",ExpressionUUID->"5d691024-c62f-4b5b-9cd6-ff30fe9337a6"],
Cell[367873, 8673, 654, 13, 100, "Text",ExpressionUUID->"c60fa35c-c162-461d-bc5c-ffad289c5d87"],
Cell[CellGroupData[{
Cell[368552, 8690, 342, 7, 28, "Input",ExpressionUUID->"058e891f-377f-4b08-8434-00a0532c0a5b"],
Cell[368897, 8699, 60724, 1120, 71, "Output",ExpressionUUID->"077fe9da-af27-4219-ac7b-004ca1231754"]
}, Open  ]],
Cell[429636, 9822, 376, 8, 34, "Text",ExpressionUUID->"3b57d780-d8b3-4548-950d-bfd67ddde372"],
Cell[CellGroupData[{
Cell[430037, 9834, 228, 3, 28, "Input",ExpressionUUID->"4a470929-5296-46f3-9906-3be0d8cb88d0"],
Cell[430268, 9839, 63241, 1252, 605, "Output",ExpressionUUID->"f6b21ff2-ea91-46e6-ab61-c8197a2c0ead"]
}, Open  ]],
Cell[493524, 11094, 311, 7, 34, "Text",ExpressionUUID->"9b099063-25a0-4eee-b1a9-f8015555511f"],
Cell[CellGroupData[{
Cell[493860, 11105, 293, 5, 28, "Input",ExpressionUUID->"fcca53ea-22f3-4234-b182-c747a01e4a6e"],
Cell[494156, 11112, 75928, 1343, 71, "Output",ExpressionUUID->"66dcead6-fca1-48f1-9947-6455e78125c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[570121, 12460, 544, 11, 28, "Input",ExpressionUUID->"9a4a57c1-3122-41ba-8649-cf1a81ad5f1f"],
Cell[570668, 12473, 2251, 56, 118, "Output",ExpressionUUID->"b9d8e2c1-4e7c-4163-aab3-672e21669382"]
}, Open  ]],
Cell[CellGroupData[{
Cell[572956, 12534, 237, 3, 28, "Input",ExpressionUUID->"97a4c5eb-af4e-4ae5-8b20-1f09ea4451c9"],
Cell[573196, 12539, 20087, 492, 247, "Output",ExpressionUUID->"3246e7ac-cdb7-4426-9605-f4fea2e7629f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[593320, 13036, 237, 3, 28, "Input",ExpressionUUID->"202a47c4-0ffa-4255-a954-5351f3276724"],
Cell[593560, 13041, 9201, 241, 327, "Output",ExpressionUUID->"17c62b43-fdf7-44d6-9288-444fa528bfe7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[602798, 13287, 161, 3, 53, "Subsection",ExpressionUUID->"5a57c73b-96e7-4c7f-889d-a023f7a58931"],
Cell[602962, 13292, 916, 17, 122, "Text",ExpressionUUID->"aae6c014-a947-41b5-9c80-3b6c7abdd191"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[603927, 13315, 228, 4, 67, "Section",ExpressionUUID->"2b5f5f08-5d95-42df-85cc-29577b009279"],
Cell[604158, 13321, 586, 11, 78, "Text",ExpressionUUID->"d8f0a96f-2acc-455d-b589-94134c78cf85"],
Cell[604747, 13334, 236, 6, 34, "Text",ExpressionUUID->"d60bdd1c-9fb0-49c6-a29e-923978c574ee"],
Cell[CellGroupData[{
Cell[605008, 13344, 409, 7, 28, "Input",ExpressionUUID->"7f7c9c0a-d468-4158-bd81-a87437b0fd46"],
Cell[605420, 13353, 57793, 1052, 71, "Output",ExpressionUUID->"839c0caf-b9c7-4948-96b8-e093075c1a24"]
}, Open  ]],
Cell[663228, 14408, 189, 3, 34, "Text",ExpressionUUID->"0552187f-b5f4-4fce-98be-06d9295a742d"],
Cell[CellGroupData[{
Cell[663442, 14415, 231, 3, 28, "Input",ExpressionUUID->"6bdb00fd-3e1e-499e-90de-b5e8252f350e"],
Cell[663676, 14420, 51424, 1012, 605, "Output",ExpressionUUID->"31fed5f4-0ea0-4b33-8497-37d572fff36e"]
}, Open  ]],
Cell[715115, 15435, 245, 6, 34, "Text",ExpressionUUID->"48c69ae7-4b38-4f37-bcb3-6cc72cc68667"],
Cell[CellGroupData[{
Cell[715385, 15445, 346, 6, 28, "Input",ExpressionUUID->"ea3aa04a-272c-4708-bf5b-e4fb3f751077"],
Cell[715734, 15453, 72388, 1269, 71, "Output",ExpressionUUID->"2673b7ac-8c61-478d-beeb-db0cb29bd87c"]
}, Open  ]],
Cell[788137, 16725, 185, 3, 34, "Text",ExpressionUUID->"9df97496-1bf6-49af-87cf-e842c998d46f"],
Cell[CellGroupData[{
Cell[788347, 16732, 471, 10, 28, "Input",ExpressionUUID->"4726db06-2efc-44cd-8d1e-c19cb6f89f9b"],
Cell[788821, 16744, 1816, 47, 101, "Output",ExpressionUUID->"84c7b413-4f91-4b2f-95ff-520f159ea9f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790674, 16796, 289, 4, 28, "Input",ExpressionUUID->"1e7733f3-aef3-49ba-a3f8-114c500448d7"],
Cell[790966, 16802, 21129, 512, 248, "Output",ExpressionUUID->"40e97e2b-ab1e-4a4f-95d7-db7317944df3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[812132, 17319, 289, 4, 28, "Input",ExpressionUUID->"96c31848-6a7a-406f-9fde-f4a9f3d2e7ce"],
Cell[812424, 17325, 9412, 247, 327, "Output",ExpressionUUID->"379e1161-6981-4efc-a0dc-45dedd5b0516"]
}, Open  ]],
Cell[CellGroupData[{
Cell[821873, 17577, 165, 3, 53, "Subsection",ExpressionUUID->"6a31a530-cc6a-4630-a021-8bf09bf9b1d6"],
Cell[822041, 17582, 806, 15, 122, "Text",ExpressionUUID->"e0edacc1-1a42-4ad4-a72c-fd9cc621be40"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[822896, 17603, 210, 4, 67, "Section",ExpressionUUID->"8780b74b-a027-4940-b249-62b1178100e1"],
Cell[823109, 17609, 858, 19, 232, "Text",ExpressionUUID->"676efcef-837a-4c6b-b00e-2c1c4094fea5"],
Cell[823970, 17630, 210, 6, 34, "Text",ExpressionUUID->"528ef26b-9fb8-4058-a9ca-393ff72de5e1"],
Cell[CellGroupData[{
Cell[824205, 17640, 383, 7, 28, "Input",ExpressionUUID->"ac94bd47-9a19-42f1-9488-5f153b9fc28f"],
Cell[824591, 17649, 47306, 873, 71, "Output",ExpressionUUID->"57eda29f-95e6-4b86-95bd-3408515f4ed6"]
}, Open  ]],
Cell[871912, 18525, 163, 3, 34, "Text",ExpressionUUID->"4c064399-c8f6-4977-9238-1720d3004a1c"],
Cell[CellGroupData[{
Cell[872100, 18532, 232, 3, 28, "Input",ExpressionUUID->"f98993a7-c493-4fe1-a501-595ef567aadf"],
Cell[872335, 18537, 53707, 1063, 605, "Output",ExpressionUUID->"b0e5989e-4ac5-4b0e-be96-8e8dca7c91da"]
}, Open  ]],
Cell[926057, 19603, 220, 6, 34, "Text",ExpressionUUID->"2d321485-68de-42c3-b4f4-eadf77113295"],
Cell[CellGroupData[{
Cell[926302, 19613, 344, 6, 28, "Input",ExpressionUUID->"80c29a0d-de1e-4685-8522-54803c6f303a"],
Cell[926649, 19621, 58685, 1039, 71, "Output",ExpressionUUID->"c3e53c3e-08e7-4c16-8864-a725218e5b34"]
}, Open  ]],
Cell[985349, 20663, 161, 3, 34, "Text",ExpressionUUID->"73cc8ba2-3e01-4542-989c-845fda8cf4b5"],
Cell[CellGroupData[{
Cell[985535, 20670, 472, 10, 28, "Input",ExpressionUUID->"6d00d667-5ab2-4811-82a9-b5d4c7b4665e"],
Cell[986010, 20682, 1845, 47, 101, "Output",ExpressionUUID->"35471586-a081-4192-a94a-452ff24d305a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[987892, 20734, 284, 4, 28, "Input",ExpressionUUID->"eae32651-dd82-4704-bbe5-35c3f23b85e8"],
Cell[988179, 20740, 21398, 523, 254, "Output",ExpressionUUID->"7ebfc1bd-8c9d-4755-aebe-7c0523e752bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1009614, 21268, 288, 4, 28, "Input",ExpressionUUID->"6ef96db3-0258-42db-97e8-17d6e874907e"],
Cell[1009905, 21274, 9282, 242, 327, "Output",ExpressionUUID->"7c8567fa-4c80-449a-9f12-19c77d8a8d76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1019224, 21521, 165, 3, 53, "Subsection",ExpressionUUID->"9aab455d-2a3e-40ac-bffd-4cf942464c4b"],
Cell[1019392, 21526, 761, 15, 122, "Text",ExpressionUUID->"f795da16-e7aa-4a20-8233-ebe09a1e7a08"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1020202, 21547, 227, 4, 67, "Section",ExpressionUUID->"be7f9724-b6aa-4657-94bf-38127fd7029a"],
Cell[1020432, 21553, 491, 9, 56, "Text",ExpressionUUID->"644ac81a-a1e3-45e0-b5da-0d705aa2f7e5"],
Cell[1020926, 21564, 210, 6, 34, "Text",ExpressionUUID->"eb02a2eb-b287-45cc-bf45-d94630ea22fc"],
Cell[CellGroupData[{
Cell[1021161, 21574, 391, 8, 28, "Input",ExpressionUUID->"0c6cab84-bc0c-4256-a774-490684d4ab05"],
Cell[1021555, 21584, 61932, 1116, 71, "Output",ExpressionUUID->"a489c011-ea6c-4685-a869-be823c94c854"]
}, Open  ]],
Cell[1083502, 22703, 161, 3, 34, "Text",ExpressionUUID->"003672b3-0cd2-4b4c-a8f9-604deb6b708e"],
Cell[CellGroupData[{
Cell[1083688, 22710, 228, 3, 28, "Input",ExpressionUUID->"7f971279-b397-4f11-99b5-58d33d887993"],
Cell[1083919, 22715, 56245, 1108, 605, "Output",ExpressionUUID->"47b3a075-a2b2-4914-907b-08b1fe5c928d"]
}, Open  ]],
Cell[1140179, 23826, 248, 6, 34, "Text",ExpressionUUID->"3d51793d-a73b-4936-ba31-e0d844b6352f"],
Cell[CellGroupData[{
Cell[1140452, 23836, 344, 6, 28, "Input",ExpressionUUID->"d31147b2-2682-4035-acf4-275ef6857b96"],
Cell[1140799, 23844, 73414, 1284, 71, "Output",ExpressionUUID->"a6013844-c89c-495d-be34-1a02f4f078c0"]
}, Open  ]],
Cell[1214228, 25131, 161, 3, 34, "Text",ExpressionUUID->"d1cbbf16-a5e6-41d3-b0f5-2d6d9adb416b"],
Cell[CellGroupData[{
Cell[1214414, 25138, 469, 10, 28, "Input",ExpressionUUID->"48857d25-9520-46df-ac94-6503c5d38cec"],
Cell[1214886, 25150, 1840, 45, 101, "Output",ExpressionUUID->"0557b93a-545a-4277-9b1e-66c8f1cdb367"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1216763, 25200, 288, 4, 28, "Input",ExpressionUUID->"f3f1cba7-d697-43c8-937d-545b4aaa73cb"],
Cell[1217054, 25206, 21082, 514, 246, "Output",ExpressionUUID->"edc7e2db-421d-4c08-9ed8-8ad233a6d752"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1238173, 25725, 288, 4, 28, "Input",ExpressionUUID->"2dcf9358-1ad9-45ff-9429-0a302783b9b3"],
Cell[1238464, 25731, 8923, 235, 327, "Output",ExpressionUUID->"a74cd2c1-a84d-4164-8b95-0c5203af349c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1247424, 25971, 162, 3, 53, "Subsection",ExpressionUUID->"7f8f3758-2bcb-41ed-a9f5-c43b192c6652"],
Cell[1247589, 25976, 800, 15, 144, "Text",ExpressionUUID->"98c679e2-34a8-4f25-9285-7221e9850462"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1248438, 25997, 230, 4, 67, "Section",ExpressionUUID->"340f249e-1011-4b75-bb0c-a3368b8ef0e3"],
Cell[1248671, 26003, 483, 9, 56, "Text",ExpressionUUID->"380e72f3-0679-4f62-94c9-eb38fe7d61cb"],
Cell[1249157, 26014, 210, 6, 34, "Text",ExpressionUUID->"9516f9f1-6592-42bd-9b8b-96f9b054058b"],
Cell[CellGroupData[{
Cell[1249392, 26024, 391, 8, 28, "Input",ExpressionUUID->"fd5344f2-b26c-499e-96a5-77179bd1d208"],
Cell[1249786, 26034, 304380, 5555, 71, "Output",ExpressionUUID->"6053d979-823f-4080-a375-02d1459158dd"]
}, Open  ]],
Cell[1554181, 31592, 163, 3, 34, "Text",ExpressionUUID->"ba063d57-bdf3-4ca0-bbd1-6510b425b1f7"],
Cell[CellGroupData[{
Cell[1554369, 31599, 229, 3, 28, "Input",ExpressionUUID->"1709d76b-d0f8-44ba-9c5b-8623c54af1d6"],
Cell[1554601, 31604, 61186, 1208, 605, "Output",ExpressionUUID->"074f7fa6-3b90-4c4a-a25e-c20df8f6a7c7"]
}, Open  ]],
Cell[1615802, 32815, 220, 6, 34, "Text",ExpressionUUID->"2010a0f6-8d28-4da1-883d-3d4d134621f0"],
Cell[CellGroupData[{
Cell[1616047, 32825, 346, 6, 28, "Input",ExpressionUUID->"6d5cbe0a-1cff-4a32-9306-534fc473e939"],
Cell[1616396, 32833, 315120, 5495, 71, "Output",ExpressionUUID->"7a177e72-3926-4923-8ad0-45c104c2fb31"]
}, Open  ]],
Cell[1931531, 38331, 161, 3, 34, "Text",ExpressionUUID->"deaf13e3-61d8-4c90-8b0a-341b3ba6240a"],
Cell[CellGroupData[{
Cell[1931717, 38338, 471, 10, 28, "Input",ExpressionUUID->"853947b3-d5ff-4e08-9434-a634958f4d43"],
Cell[1932191, 38350, 1928, 48, 101, "Output",ExpressionUUID->"91d03eb4-8a6b-4362-9870-5ec2f61a1ccf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1934156, 38403, 291, 4, 28, "Input",ExpressionUUID->"9d41467c-eb70-409d-981a-fc14501508a5"],
Cell[1934450, 38409, 21119, 517, 248, "Output",ExpressionUUID->"1c5dca0f-189d-42bf-9bac-c86b3c1c42bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1955606, 38931, 289, 4, 28, "Input",ExpressionUUID->"058a00e6-3860-4316-a6bf-b60087ef8cf6"],
Cell[1955898, 38937, 9277, 242, 327, "Output",ExpressionUUID->"fb6dd8a1-67f2-4335-ae2b-1723be48a48b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1965212, 39184, 161, 3, 53, "Subsection",ExpressionUUID->"95f61829-4a88-4cb2-93ec-95e3ce421689"],
Cell[1965376, 39189, 866, 16, 122, "Text",ExpressionUUID->"d8b403f4-1d11-41d6-8076-ec597d250ab0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1966291, 39211, 229, 4, 67, "Section",ExpressionUUID->"32a4c136-aebc-45ca-8ec1-cc0a756e220f"],
Cell[1966523, 39217, 687, 12, 78, "Text",ExpressionUUID->"84fdb5f2-3a84-4740-8623-e3d53e367abb"],
Cell[1967213, 39231, 210, 6, 34, "Text",ExpressionUUID->"4acbb4bd-f9d3-4066-b1b8-85b6fda76e84"],
Cell[CellGroupData[{
Cell[1967448, 39241, 392, 8, 28, "Input",ExpressionUUID->"454ed84b-3faf-47cc-a439-0c215d709617"],
Cell[1967843, 39251, 72170, 1307, 71, "Output",ExpressionUUID->"67f5a61c-da03-421b-becd-ca86ffa299c8"]
}, Open  ]],
Cell[2040028, 40561, 161, 3, 34, "Text",ExpressionUUID->"9d7e326b-1966-4b40-a5a6-4197b01e97d8"],
Cell[CellGroupData[{
Cell[2040214, 40568, 231, 3, 28, "Input",ExpressionUUID->"fbaecc21-013a-4857-90a5-1d72331bfab8"],
Cell[2040448, 40573, 67190, 1327, 605, "Output",ExpressionUUID->"1929c8bf-f6d2-4d74-94af-e19c1c87a4be"]
}, Open  ]],
Cell[2107653, 41903, 220, 6, 34, "Text",ExpressionUUID->"a2baec24-c5bb-402f-839d-ad90ccb330d6"],
Cell[CellGroupData[{
Cell[2107898, 41913, 344, 6, 28, "Input",ExpressionUUID->"c264edbf-1b95-4dcd-8031-4be784f4ed6b"],
Cell[2108245, 41921, 87472, 1533, 71, "Output",ExpressionUUID->"342e0a01-5ef6-494b-a83d-007eeda441a5"]
}, Open  ]],
Cell[2195732, 43457, 159, 3, 34, "Text",ExpressionUUID->"138f8b12-325b-4c6f-b48f-b8a8e1ff4649"],
Cell[CellGroupData[{
Cell[2195916, 43464, 469, 10, 28, "Input",ExpressionUUID->"89807caa-a472-4389-b349-775760292e62"],
Cell[2196388, 43476, 1820, 45, 101, "Output",ExpressionUUID->"295b4a6d-401f-48a5-ba23-0666b4369296"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2198245, 43526, 291, 4, 28, "Input",ExpressionUUID->"3dc0ce77-d5aa-4adb-97cc-423cabcbacaa"],
Cell[2198539, 43532, 19873, 488, 248, "Output",ExpressionUUID->"20c85939-8952-43d7-82bc-4effb29d1030"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2218449, 44025, 289, 4, 28, "Input",ExpressionUUID->"2369fb85-d9ae-4385-af73-b72aeb099876"],
Cell[2218741, 44031, 8897, 235, 327, "Output",ExpressionUUID->"b9a9c6ea-b26a-4ed0-8f48-027111063729"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2227675, 44271, 163, 3, 53, "Subsection",ExpressionUUID->"9ffe71af-e3ae-40ec-82f7-e5a162e4c35d"],
Cell[2227841, 44276, 792, 13, 122, "Text",ExpressionUUID->"8b37d3ce-ab2f-4da0-81a6-4dded0cceb6f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2228682, 44295, 172, 3, 67, "Section",ExpressionUUID->"d5fcb3bd-f62d-42ac-a8a6-a916cfbb452d"],
Cell[2228857, 44300, 977, 16, 100, "Text",ExpressionUUID->"c67dcd21-171c-4950-a8c0-93f7753f5c7c"],
Cell[2229837, 44318, 208, 6, 34, "Text",ExpressionUUID->"6d7a65c4-8c7b-49c6-992b-9afe328a107e"],
Cell[CellGroupData[{
Cell[2230070, 44328, 529, 9, 28, "Input",ExpressionUUID->"911ea479-e292-4215-b53c-34d9cbafcbad"],
Cell[2230602, 44339, 156373, 2633, 71, "Output",ExpressionUUID->"f83a3369-88ef-4b0c-a5ae-d78f7eca4b48"]
}, Open  ]],
Cell[2386990, 46975, 161, 3, 34, "Text",ExpressionUUID->"1f3e05c2-bdd5-486c-a357-3b7475b7fcf9"],
Cell[CellGroupData[{
Cell[2387176, 46982, 230, 3, 28, "Input",ExpressionUUID->"a3eca312-653d-4cd4-8f8c-7138cc10a916"],
Cell[2387409, 46987, 58315, 1149, 605, "Output",ExpressionUUID->"70af3afb-0e74-4061-849d-50bf4146be58"]
}, Open  ]],
Cell[2445739, 48139, 222, 6, 34, "Text",ExpressionUUID->"0756d70c-5b32-485a-a4ba-24eee93bf791"],
Cell[CellGroupData[{
Cell[2445986, 48149, 623, 10, 28, "Input",ExpressionUUID->"2c5c7575-8462-487b-b2b4-66bc46298985"],
Cell[2446612, 48161, 172450, 2882, 71, "Output",ExpressionUUID->"a8216e7f-ffb4-4182-bfc6-f0dbbbf3b83d"]
}, Open  ]],
Cell[2619077, 51046, 161, 3, 34, "Text",ExpressionUUID->"2e2eb851-2616-47d9-997d-693b893f0f7c"],
Cell[CellGroupData[{
Cell[2619263, 51053, 646, 12, 28, "Input",ExpressionUUID->"5b92b608-1d9e-4907-a7f3-16dcbc6942f2"],
Cell[2619912, 51067, 1897, 48, 101, "Output",ExpressionUUID->"f1b4738f-f3d9-4cd2-9d67-8ff3c4a4bbc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2621846, 51120, 290, 4, 28, "Input",ExpressionUUID->"ed0833dd-3dec-4e4f-a6b1-7c8eae47d401"],
Cell[2622139, 51126, 13098, 312, 211, "Output",ExpressionUUID->"0bbc9d3e-961f-4a4a-94c5-6bc3eb644eec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2635274, 51443, 235, 3, 28, "Input",ExpressionUUID->"142d5c34-ee7d-465f-b812-c4c5254953c8"],
Cell[2635512, 51448, 9306, 242, 327, "Output",ExpressionUUID->"4990a51c-7d63-47d7-b23b-6131394000fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2644855, 51695, 163, 3, 53, "Subsection",ExpressionUUID->"745f8d13-d3a8-418e-884b-f3cb104879be"],
Cell[2645021, 51700, 800, 15, 122, "Text",ExpressionUUID->"3e15aee2-813a-40d8-a1ce-839291c48014"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2645882, 51722, 162, 3, 64, "Subchapter",ExpressionUUID->"7d09092b-1a75-49cf-badf-cd84c7412002"],
Cell[2646047, 51727, 1186, 18, 100, "Text",ExpressionUUID->"a24c18d5-ec54-4bd7-bbab-48a806f82321"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2647282, 51751, 543, 9, 77, "Chapter",ExpressionUUID->"2ba07c62-f6ee-4059-a059-72b4aa16b740"],
Cell[CellGroupData[{
Cell[2647850, 51764, 338, 9, 31, "ItemNumbered",ExpressionUUID->"95562457-0dc1-4a46-82a2-fcb750ae836c"],
Cell[2648191, 51775, 389, 7, 31, "ItemNumbered",ExpressionUUID->"50947d98-d46a-46d1-a534-3d210a8a1fa9"],
Cell[2648583, 51784, 451, 8, 31, "ItemNumbered",ExpressionUUID->"8ebea3b1-8f3e-428f-a86d-d1550eada91a"],
Cell[2649037, 51794, 383, 7, 31, "ItemNumbered",ExpressionUUID->"3ad4a17e-b249-4ef6-a3ed-ab1d2e2ebf38"],
Cell[2649423, 51803, 324, 6, 31, "ItemNumbered",ExpressionUUID->"cba72706-da11-41e7-b151-c883b8ebfd44"],
Cell[2649750, 51811, 340, 6, 31, "ItemNumbered",ExpressionUUID->"c08edb45-6a0b-405a-8638-36c18ccfa0a4"],
Cell[2650093, 51819, 322, 6, 31, "ItemNumbered",ExpressionUUID->"30ffef93-a67c-439f-a2ad-3717d388fbfe"],
Cell[2650418, 51827, 366, 6, 31, "ItemNumbered",ExpressionUUID->"cc35b7d0-ba74-4245-a58e-cbd6129c17f3"],
Cell[2650787, 51835, 364, 7, 31, "ItemNumbered",ExpressionUUID->"9cb361fc-6115-47f6-aab8-9336d0d48cc3"],
Cell[2651154, 51844, 373, 9, 31, "ItemNumbered",ExpressionUUID->"97bbc109-5c5d-409d-afe1-5ba4180798c0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

